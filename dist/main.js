/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DOMBuilders/adminMainPageDOM.js":
/*!*********************************************!*\
  !*** ./src/DOMBuilders/adminMainPageDOM.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminMainPageDOM\": () => (/* binding */ adminMainPageDOM)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*action: admin interface for observing allTeams/allUsers, setting facility parameters, blocking off time for all users, and running the scheduling function\n\nadminMainPageData object is modeled as such:\n\nobj = {\n    allTeams: \n        [{ \n            teamName,\n            teamSize, \n            rank:\n                {\n                    myTeams,\n                    allTeams\n                },\n            allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n            coach,\n        }, {etc}, {etc}]\n\n    allUsers:\n        [{\n            name,\n            color,\n            password, //MAKE SURE THIS DOES NOT GET PASSED TO FRONT END\n            privilegeLevel,\n            teams:{},\n            availability:{},\n            lastVerified\n        }, {etc}, {etc}]\n\n    facilitySelectors:\n        {facilityOpen, facilityClose, facilityMaxCapacity}\n\n    adminTimeBlocks:\n        {day: [{{startTime, stopTime, admin}, {startTime, stopTime, admin}, ], day: [{startTime, stopTime, admin}, {startTime, stopTime, admin}]},  make sure empties don't screw anything up\n\n    season,\n}\n\nadminSelectorsObj is modeled as such:\n\nobj = {\n\n    startTime: (pre-built select HTML element),\n    endTime: etc,\n    teamSize: etc,\n    facilityOpen: etc,\n    facilityClose: etc,\n    facilityMaxCapacity: etc,\n    dayOfWeek: etc,\n    inWeiss: etc\n}\n\npublishes:\n    page render requests FOR pageRenderer\n    season change requests FOR (?)\n    scheduler run requests FOR (?)\n    admin allTeam rank changes FOR adminAllTeamsDataModel\n    user add requests FOR adminUserGeneratorModel \n    user edit/delete requests for adminAllUsersDataModel\n    facilityData changes, save requests, and change cancellations FOR adminMainPageFacilityDataModel\n    \n\nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    adminSelectorsBuilt FROM selectorDOMBuilder\n    adminAvailability and adminFacility model updates FROM adminAvailabity and adminFacility data models\n*/\n\nconst adminMainPageDOM = (function(){\n\n    let season\n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminSelectorsBuilt\", setSelectorNodes);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", setSeason)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", publishAdminMainPageRender);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminAvailabilityModelModified\", renderAdminAllTimeBlocks);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminFacilityModelModified\", renderFacilityDataGrid)\n    \n    \n    const selectorNodes = {\n        facilityOpen: null,\n        facilityClose: null,\n        facilityMaxCapacity: null,\n        startTime: null,\n        endTime: null\n    }\n    //watch for CSS conflicts on start/endTime between this, userAvailability and requestFormDOMs\n    function setSelectorNodes(selectorElementObj){\n        for(let selectorElement in selectorElementObj){\n            switch(selectorElement){\n                case `facilityOpen`:\n                case `facilityClose`:\n                case `facilityMaxCapacity`:\n                case `startTime`: //watch CSS between this and requestFormDOM\n                case `endTime`:\n                    selectorNodes[selectorElement] = selectorElementObj[selectorElement]\n                    break;\n                default:\n                    return;\n            }\t\n        }\n    }\n    \n    function setSeason(adminMainPageData){ //make sure this happens before publishAdminMainPageRender, it should\n        season = adminMainPageData.season\n    }\n\n    function publishAdminMainPageRender(adminMainPageData){\n        const adminMainPageDOM = buildAdminMainPageDOM(adminMainPageData);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageRenderRequested\", adminMainPageDOM);\n    }\n    //find subscribers to changeSeasons and runScheduler, issue NOT TO BE ADDRESSED:  scheduler could be run with unsaved modifications to adminAvail and facilityData\n    function buildAdminMainPageDOM(adminMainPageData){\n        const template = document.querySelector(\"#adminMainPageTemplate\");\n        const content = document.importNode(template.content, true);\n        \n        const seasonButtons = content.querySelector(\"#adminSeasonButtons\");\n        const adminAllTeams = content.querySelector(\"#adminMainPageTeamGrid\");\n        const adminAllUsers = content.querySelector(\"#adminUsersGridContainer\");\n        const adminFacilityData = content.querySelector(\"#facilityDataGridContainer\");\n        const adminAddTimeBlock = content.querySelector(\"#setAllUsersAvailabilityGridContainer\");\n        const schedulerButton = content.querySelector(\"#runScheduleBuilderButton\");\n    \n        const adminAllTeamsNew = renderAdminAllTeamsGrid(adminAllTeams, adminMainPageData.allTeams);\n        const adminAllUsersNew = renderAdminAllUsersGrid(adminAllUsers, adminMainPageData.allUsers);\n        const adminFacilityDataNew = renderFacilityDataGrid({adminFacilityDataContainer: adminFacilityData, adminMainPageData: adminMainPageData.facilitySelectors});\n        const adminAddTimeBlockNew = renderAdminTimeBlocker(adminAddTimeBlock, adminMainPageData.adminTimeBlocks);\n    \n        adminAllTeams.replaceWith(adminAllTeamsNew);\n        adminAllUsers.replaceWith(adminAllUsersNew); \n        adminFacilityData.replaceWith(adminFacilityDataNew);\n        adminAddTimeBlock.replaceWith(adminAddTimeBlockNew);\n    \n        seasonButtons.children.forEach(function(child){\n            if(child.id == `${season}Button`){\n                child.disabled = true;\n            }else{\n                child.addEventListener(\"click\", changeSeason)\n               \n            }\n        })\n\n        schedulerButton.addEventListener(\"click\", runScheduler)\n    \n        return content\n    \n        function changeSeason(){\n            let string = \"Button\";\n            const seasonButtonId = this.id;\n            const truncateIndex = seasonButtonId.indexOf(string);\n            const seasonName = seasonButtonId.slice(0, truncateIndex);\n            \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminSeasonChangeRequested\", seasonName)\n        }\n\n        function runScheduler(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"runSchedulerRequested\") \n        }\n    }\n    //no obvious issues with this or allTeamsData\n    function renderAdminAllTeamsGrid(teamGrid, allTeamsData){ \n        const teamGridNew = document.createElement(\"div\")\n\n        allTeamsData.forEach(function(team){\n            const teamRow = buildAdminTeamRow(team, allTeamsData);\n            teamGridNew.appendChild(teamRow);\n        })\n\n        teamGrid.replaceWith(teamGridNew);\n        teamGridNew.id = \"adminMainPageTeamGrid\"\n    \n        return teamGridNew\n    }\n\n    //adminTeamRow display is: teamName, coach, lastVerified, teamRank, up and downrank buttons\n    function buildAdminTeamRow(teamData, allTeamsData){ //after viewing full page, determine whether to add allOpts for admin viewing\n        const template = document.querySelector(\"#adminMainPageTeamTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const teamName = content.querySelector(\".adminMainPageTeamGridTeamName\");\n        const teamCoach = content.querySelector(\".adminMainPageTeamGridTeamCoach\");\n        const teamSize = content.querySelector(\".adminMainPageTeamGridTeamSize\");\n        const teamRank = content.querySelector(\".adminMainPageTeamGridTeamRank\");\n        const teamButtons = content.querySelector(\".adminMainPageTeamGridTeamsButtons\");\n        \n        const uprankButton = document.createElement(\"button\");\n        const downrankButton = document.createElement(\"button\");\n\n        teamName.innerText = teamData.teamName;\n        teamCoach.innerText = teamData.coach;\n        teamSize.innerText = teamData.teamSize;\n        teamRank.innerText = teamData.rank.allTeams;\n\n        uprankButton.id = \"adminMainPageTeamGridTeamUprankButton\"\n        downrankButton.id = \"adminMainPageTeamGridTeamDownrankButton\"\n    \n        uprankButton.addEventListener(\"click\", moveAdminRankUp);\n        downrankButton.addEventListener(\"click\", moveAdminRankDown);\n    \n        if(allTeamsData.length > 1 && teamData.rank.allTeams != 0 && teamData.rank.allTeams != allTeamsData.length - 1){\n            teamButtons.appendChild(uprankButton);\n            teamButtons.appendChild(downrankButton);\n        }else if(allTeamsData.length > 1 && teamData.rank.allTeams == allTeamsData.length - 1){\n            teamButtons.appendChild(uprankButton)\n        }else if(allTeamsData.length > 1 && teamData.rank.allTeams == 0){\n            teamButtons.appendChild(downrankButton)\n        }   \n    \n        return content\n    \n        function moveAdminRankUp(){ \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyAdminTeamOrder\", {index: teamData.rank.allTeams, modifier: -1})\n        }\n        function moveAdminRankDown(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyAdminTeamOrder\", {index: teamData.rank.allTeams, modifier: 1})\n        }\n    }\n    //no obvious issues with this or dataModel, display is usersGrid and addUserButton\n    function renderAdminAllUsersGrid(adminAllUsersContainer, adminMainPageData){\n    \n        const userGrid = adminAllUsersContainer.querySelector(\"#adminUsersGrid\");\n        const addUserButton = adminAllUsersContainer.querySelector(\"#adminUsersGridAddUser\");\n        const userGridNew = renderAdminAllUsers(adminMainPageData);\n    \n        userGrid.replaceWith(userGridNew);\n        \n        addUserButton.addEventListener(\"click\", addUser)\n    \n        return adminAllUsersContainer\n\n        function addUser(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"addUser\")\n        }\n    }\n    \n    function renderAdminAllUsers(adminMainPageData){\n        const allUsers = document.createElement(\"div\");\n        allUsers.id = \"adminUsersGrid\";\n    \n        adminMainPageData.forEach(function(user){\n            const userRow = buildAdminUserRow(user);\n            allUsers.appendChild(userRow);\n        })\n\n        return allUsers;\n    }\n    //userRow display is: name, privilegeLevel, color, lastVerified date, edit and deleteButtons\n    function buildAdminUserRow(userData){\n        const template = document.querySelector(\"#adminMainPageUserGridUserTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const userName = content.querySelector(\".adminUserGridUserName\");\n        const userPrivilege = content.querySelector(\".adminUserGridUserPrivilege\");\n        const userLastVerified = content.querySelector(\".adminUserGridUserLastVerified\");\n        const userColorBlock = content.querySelector(\".adminUserColor\");\n    \n        const editButton = content.querySelector(\".adminUserGridUserEditButton\");\n        const deleteButton = content.querySelector(\".adminUserGridUserDeleteButton\");\n    \n        editButton.addEventListener(\"click\", editUser);\n        deleteButton.addEventListener(\"click\", deleteUser);\n    \n        userName.innerText = userData.name;\n        userPrivilege.innerText = userData.privilegeLevel;\n        userLastVerified.innerText = userData.lastVerified;\n        userColorBlock.style.background = userData.color\n    \n        return content\n    \n        function editUser(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"editUser\", userData)\n        }\n        function deleteUser(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteUser\", userData)\t\n        }\n    }\n\n    //renderFacilityDataGrid display is: facilityOpen selector, facilityClose selector, facility maxCapacity, saveButton, cancelButton\n    function renderFacilityDataGrid(dataDomObj){\n        \n        const adminFacilityDataContainer = dataDomObj.adminFacilityDataContainer;\n        const adminMainPageData = dataDomObj.adminMainPageData;\n\n        const template = document.querySelector(\"#adminMainPageFacilityDataGridTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const facilityGridNew = content.querySelector(\"#facilityDataGrid\");\n        const facilitySelectorsNodes = content.querySelectorAll(\".select\");\n        const saveButton = content.querySelector(\"#adminMainPageFacilitySelectorsSaveButton\");\n        const cancelButton = content.querySelector(\"#adminMainPageFacilitySelectorsCancelButton\");\n    \n        facilitySelectorsNodes.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n            \n            const selectionNew = selectorNodes[`${primaryClass}`].cloneNode(true);\n            selectionNew.addEventListener(\"change\", publishSelectionValueChange)\n    \n            const selectedOption = selectionNew.querySelector(`option[value = ${adminMainPageData[primaryClass]}]`);\n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectionNew.firstChild.disabled = true;\n            }\n            \n            selector.replaceWith(selectionNew);\n    \n            function publishSelectionValueChange(){\n                const selector = primaryClass\n                const value = selectionNew.value;\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyFacilitySelectorValue\", {selector, value})\n            }\n        })\n\n        saveButton.addEventListener(\"click\", updateFacilityData);\n        cancelButton.addEventListener(\"click\", cancelFacilityDataChanges);\n    \n        function updateFacilityData(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"updateFacilityDataClicked\");\n        }\n        function cancelFacilityDataChanges(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"cancelFacilityDataChangesClicked\", adminFacilityDataContainer)\n        }\n        \n        const facilityGrid = document.querySelector(\"#facilityDataGrid\");\n        if(facilityGrid != null){\n            facilityGrid.replaceWith(facilityGridNew)\n        }else{\n            adminFacilityDataContainer.appendChild(facilityGridNew)\n            return adminFacilityDataContainer\n        }\n    } \n    \n    //adminTimeBlocker display is blockGrid (allTimeBlocks), saveChanges, cancelChanges buttons; dataModel issue to determine when to write changes to allUsers (FE or BE)\n    function renderAdminTimeBlocker(adminTimeBlockDiv, adminMainPageData){\n     \n        const adminTimeBlockGrid = adminTimeBlockDiv.querySelect(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\");\n        const adminSaveTimeBlockButton = adminTimeBlockDiv.querySelect(\"#adminMainPageAddAvailabilityBlockAllUsersSaveButton\");\n        const adminCancelTimeBlockChangesButton = adminTimeBlockDiv.querySelect(\"#adminMainPageAddAvailabilityBlockAllUsersCancelButton\");\n        \n        const adminTimeBlockGridNew = renderAdminAllTimeBlocks({adminTimeBlockDiv, adminMainPageData});\n\n        adminTimeBlockGrid.replaceWith(adminTimeBlockGridNew);\n    \n        adminSaveTimeBlockButton.addEventListener(\"click\", updateAdminAvailability);\n        adminCancelTimeBlockChangesButton.addEventListener(\"click\", cancelAdminAvailabilityChanges);\n\n        return adminTimeBlockDiv\n\n        function updateAdminAvailability(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"updateAdminAvailabilityClicked\")\n        }\n        function cancelAdminAvailabilityChanges(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"cancelAdminAvailabilityChangesClicked\", adminTimeBlockDiv)\n        }\n    }\n    //allTimeBlocks display is forEach day (Day Label, addButton, [row for each timeBlock])\n    function renderAdminAllTimeBlocks(dataDomObj){\n        const adminTimeBlockDiv = dataDomObj.adminTimeBlockDiv;\n        const adminMainPageData = dataDomObj.adminMainPageData\n        const allTimeBlocksNew = document.createElement(\"div\")\n        allTimeBlocksNew.id = \"adminMainPageAddAvailabilityBlockAllUsersGrid\";\n    \n        for(let day in adminMainPageData){\n            const dayDiv = document.createElement(\"div\");\n            dayDiv.classList.add(\"adminTimeBlockDay\");\n\n            const label = document.createElement(\"h3\");\n            const addButton = document.createElement(\"button\");\n\n            label.innerText = `${day}`;\n\n            dayDiv.appendChild(label);\n            dayDiv.appendChild(addButton)\n\n            day.forEach(function(timeBlock){\n                const blockNumber = day.indexOf(timeBlock);\n                const row = buildAdminTimeBlockRow(adminTimeBlockDiv, day, timeBlock, blockNumber);\n                dayDiv.appendChild(row)\n            })\n\n            allTimeBlocksNew.appendChild(day);\n\n            addButton.addEventListener(\"click\", function addAdminTimeBlock(){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish('addAdminTimeBlockClicked', {adminTimeBlockDiv, day})\n            });\n        }\n\n        const allTimeBlocks = document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\");\n        if(allTimeBlocks != null){\n            allTimeBlocks.replaceWith(allTimeBlocksNew)\n        }else{\n            return allTimeBlocksNew\n        }\n    }\n\n    //adminBlockRow display is (startTime selector, endTime selector, deleteButton)\n    function buildAdminTimeBlockRow(adminTimeBlockDiv, day, timeBlock, blockNumber){\n        const template = document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersBlockTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const selectorsNodes = content.querySelectorAll(\".select\");\n        const deleteButton = content.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton\")\n    \n        selectorsNodes.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n            \n            const selectionNew = selectorNodes[`${primaryClass}`].cloneNode(true);\n            selectionNew.addEventListener(\"change\", publishSelectionValueChange)\n    \n            const selectedOption = selectionNew.querySelector(`option[value = ${timeBlock[primaryClass]}]`);\n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectionNew.firstChild.disabled = true;\n            }\n            \n            selector.replaceWith(selectionNew);\n    \n            function publishSelectionValueChange(){\n                const selector = primaryClass\n                const value = selectionNew.value;\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyAdminTimeBlockSelectorValue\", {blockNumber, day, selector, value})\n            }\n        })\n\n        deleteButton.addEventListener(\"click\", deleteAdminTimeBlock);\n\n        return content\n\n        function deleteAdminTimeBlock(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteAdminTimeBlockClicked\", {adminTimeBlockDiv, day, blockNumber})\n        }\n    } \n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/adminMainPageDOM.js?");

/***/ }),

/***/ "./src/DOMBuilders/adminUserGeneratorDOM.js":
/*!**************************************************!*\
  !*** ./src/DOMBuilders/adminUserGeneratorDOM.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminUserGeneratorDOM\": () => (/* binding */ adminUserGeneratorDOM)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n/* eslint-disable no-prototype-builtins */\n\n\n/*\n\npurpose:  admin interface for creating/editing/deleting users\n\nuserObject is modeled as such:\n\n    {\n        name,\n        color,\n        privilegeLevel,\n        teams:{},\n        availability:{},\n        lastVerified\n    }, \n\npublishes:\n    page render requests FOR pageRenderer\n    data save requests FOR adminUserDataModel\n    data change cancellation FOR adminMainPageModel\n    requests to add/delete/modify name/privilege/color data FOR adminUserDataModel\n\nsubscribes to:\n    userModel builds/loads FROM adminUserDataModel\n    adminMainPageModel data FROM adminMainPageModel\n*/\n\n\nconst adminUserGeneratorDOM = (function(){\n    //no obvious issues\n    let allUsersList \n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userModelPopulated\", publishUserGeneratorPageRender);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", setAllUsers);\n\n    function publishUserGeneratorPageRender(userModel){\n        const userGeneratorPage = renderUserGeneratorDOM(userModel);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageRenderRequested\", userGeneratorPage)\n    }\n\n    function setAllUsers(adminDataModel){\n        allUsersList = adminDataModel.allUsers\n    }\n\n    function renderUserGeneratorDOM(userModel){\n        const template = document.querySelector(\"#adminUserGeneratorTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const userName = content.querySelector(\"#userGeneratorName\");\n        const userPrivilege = content.querySelector(\"#userGeneratorPrivilege\");\n        const userColor = content.querySelector(\"#userGeneratorColor\");\n        const saveButton = content.querySelector(\"#userGeneratorSaveButton\");\n        const cancelButton = content.querySelector(\"#userGeneratorCancelButton\");\n\n        saveButton.addEventListener(\"click\", saveUserData) \n        cancelButton.addEventListener(\"click\", cancelUserChanges)\n        \n        const userNameNew = renderUserName(userName, userModel) \n        const userPrivilegeNew = renderUserPrivilege(userPrivilege, userModel)\n        const userColorNew = renderUserColor(userColor, userModel)\n\n        userName.replaceWith(userNameNew);\n        userPrivilege.replaceWith(userPrivilegeNew);\n        userColor.replaceWith(userColorNew);\n       \n        return content\n        \n        function saveUserData(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"saveUserDataClicked\")\n        }\n\n        function cancelUserChanges(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminMainPageDOMRequested\")\n        }\n    }\n\n    function renderUserName(userNameDOM, userModel){\n        \n        //this is good, compare this against other validator in singleUser teams to make sure they are comprehensive;\n        userNameDOM.value = userModel.name;\n\n        userNameDOM.addEventListener(\"blur\", function modifyUserNameValue(){ \n            if(userModel.name != userNameDOM.value && blockNameDuplication(userNameDOM.value)){\n                alert(`Data already exists for ${userNameDOM.value}. Use another name or edit/delete the other user for the name you are trying to switch to.`);\n                userNameDOM.value = \"\";\n                userNameDOM.focus()\n            }else if(userNameDOM.value == \"\"){\n                alert(\"User name must have a value\");\n                userNameDOM.focus();\n            }   \n            else if(userModel.name != \"\" && userNameDOM.value != userModel.name){\n                const confirmation = confirm(`If you submit changes, this will change the user name from ${userModel.name} to ${userNameDOM.value}. Proceed? `);\n                if(confirmation){\n                    _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyUserNameValue\", userNameDOM.value)\n                }else{\n                    userNameDOM.value = userModel.name;\n                }\n            }else if(userModel.name != userNameDOM.value){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyUserNameValue\", userNameDOM.value)\n            } \n        })\n\n        return userNameDOM;\n\n        function blockNameDuplication(thisName){\n            const nameCheck = allUsersList.some(function(user){\n                return user.name.toLowerCase() == thisName.toLowerCase();\n            })\n            return nameCheck;\n        }\n    }\n    \n    function renderUserPrivilege(userPrivilegeDOM, userModel){ \n\n        if(userModel.privilegeLevel == true){\n            userPrivilegeDOM.checked = true\n        }\n       \n        userPrivilegeDOM.addEventListener(\"blur\", updateUserPrivilege)\n\n        return userPrivilegeDOM;\n\n        function updateUserPrivilege(){\n            if(userModel.privilegeLevel == true & !userPrivilegeDOM.checked && !checkForLastAdmin()){\n                alert(\"Cannot demote last admin. Create new admin users before demoting this admin.\")\n                userPrivilegeDOM.checked = true;\n            }else if(userPrivilegeDOM.checked != userModel.privilegeLevel){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyUserPrivilegeLevelValue\", userPrivilegeDOM.checked)\n            } \n\n            function checkForLastAdmin(){\n                const adminUsers = allUsersList.filter(function(user){\n                    return user.privilegeLevel == true\n                })\n\n                return adminUsers.length >1\n            }\n        }\n    }\n\n    function renderUserColor(userColorDOM, userModel){\n\n        userColorDOM.value = userModel.color\n\n        userColorDOM.addEventListener(\"blur\", function verifyColorChange(){\n            if(userModel.color != userColorDOM.value && blockColorDuplication()){\n                alert(`Another user is already using this color. Considering all the possible colors available, the odds are pretty low. Unlucky pick, I guess!`)\n                userColorDOM.value = userModel.color; \n                userColorDOM.focus();\n            }else if(userColorDOM.value == \"#000000\"){\n                alert(\"Color must have a value not equal to black. Black is default value, and must be changed.\");\n                userColorDOM.focus();\n            }else if(userModel.color != userColorDOM.value){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyUserColorValue\", userColorDOM.value)\n            }\n            \n            function blockColorDuplication(){\n                const nameCheck = allUsersList.some(function(user){\n                    return (user.name != userModel.name && user.color == userColorDOM.value)\n                })\n                return nameCheck;\n            }\n        })\n\n        return userColorDOM\n    }\n\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/adminUserGeneratorDOM.js?");

/***/ }),

/***/ "./src/DOMBuilders/availabilityPageDOM.js":
/*!************************************************!*\
  !*** ./src/DOMBuilders/availabilityPageDOM.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"availabilityPageDOM\": () => (/* binding */ availabilityPageDOM)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n\n/*action: user interface for modifying availability\n\navailability object is modeled as such:\n\nobj = {\n    \n    day: \n    [\n        {startTime, stopTime, admin}, \n        {startTime, stopTime, admin}\n    ], \n    day: \n    [\n        {etc}, \n        {etc},\n    ]\n}\n\npublishes:\n    page render requests FOR pageRenderer\n    add/delete/modify/update requests FOR availabilityModel\n\nsubscribes to: \n    userMainPageModel builds FROM mainPageModel\n    userSelectorsBuilt FROM selectorDOMBuilder\n    build requests FROM availabilityModel\n    \n*/\n\nconst availabilityPageDOM = (function(){\n    //no obvious issues here\n    let selectorNodes = {\n        startTime:null, \n        endTime:null\n    };\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userSelectorsBuilt\", setSelectorNodes);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"availabilityModelModified\", buildAvailabilityGrid);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"availabilityDOMPageRequested\", publishAvailabilityPageRender);\n\n    function setSelectorNodes(selectorElementObj){\n        for(let selectorElement in selectorElementObj){\n            switch(selectorElement){\n                case `startTime`:\n                case `endTime`:\n                    selectorNodes[selectorElement] = selectorElementObj[selectorElement];\n                    break;\n                default:\n                    return;\n            }  \n        }  \n    }\n\n    function publishAvailabilityPageRender(availability){\n        const availabilityPage = renderAvailabilityDOM(availability);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageRenderRequested\", availabilityPage)\n    }\n\n    function renderAvailabilityDOM(availability){\n        const template = document.querySelector(\"#availabilityDOMTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const grid = content.querySelector(\"#availabilityGrid\");\n        const updateButton = content.querySelector(\"#availabilityUpdateButton\");\n        const cancelButton = content.querySelector(\"#availabilityCancelButton\");\n\n        const gridNew = buildAvailabilityGrid(availability);\n\n        grid.replaceWith(gridNew);\n\n        updateButton.addEventListener(\"click\", updateAvailability)\n        cancelButton.addEventListener(\"click\", cancelAvailabilityChanges);\n\n        return content\n        \n        function updateAvailability(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"updateAvailabilityClicked\")\n        }\n\n        function cancelAvailabilityChanges(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"mainPageDOMRequested\")\n        }\n    }\n\n    function buildAvailabilityGrid(availability){\n        const gridNew = document.createElement(\"div\");\n        gridNew.id = \"availabilityGrid\";\n\n        for(let day in availability){\n            const dayDiv = document.createElement(\"div\");\n            dayDiv.classList.add(\"availabilityDay\")\n            \n            const label = document.createElement(\"h3\");\n            const addButton = document.createElement(\"button\");\n\n            label.innerText = `${day}`\n\n            dayDiv.appendChild(label);\n            dayDiv.appendChild(addButton);\n\n            day.forEach(function(timeBlock){\n                const blockNumber = day.indexOf(timeBlock);\n                const row = buildAvailabilityRow(day, timeBlock, blockNumber);\n                dayDiv.appendChild(row)\n            })\n            \n            gridNew.appendChild(dayDiv);\n            \n            addButton.addEventListener(\"click\", function addTimeBlock(){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"addTimeBlockClicked\", day)\n            })\n        }\n\n        const grid = document.querySelector(\"#availabilityGrid\");\n        if(grid != null){\n            grid.replaceWith(gridNew)\n        }else{\n            return gridNew\n        }\n        \n        \n    }\n\n    function buildAvailabilityRow(day, timeBlock, blockNumber){\n        const template = document.querySelector(\"#availabilityGridRowTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const availabilitySelectors = content.querySelectorAll(\".selector\")\n        const deleteButton = content.querySelector(\".availabilityDeleteButton\");\n        \n\n        availabilitySelectors.forEach(function(selection){\n            const primaryClass = Array.from(selection.classList)[0];\n            \n            const selectionNew = selectorNodes[`${primaryClass}`].cloneNode(true);\n            selectionNew.addEventListener(\"change\", publishAvailabilitySelectionChange)\n            \n            const selectedOption = selectionNew.querySelector(`option[value = ${selectionNew.value}]`);\n            selectedOption.selected = true; \n            if(selectedOption.value != \"default\"){\n                selectionNew.firstChild.disabled = true;\n            }\n\n            selection.replaceWith(selectionNew)   \n\n            function publishAvailabilitySelectionChange(){\n                const selector = primaryClass;\n                const value = selectionNew.value\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifySelectorValue\", {blockNumber, day, selector, value})\n            }\n        });\n\n        if(timeBlock.admin == \"yes\"){\n            deleteButton.remove()\n        }\n\n        deleteButton.addEventListener(\"click\", deleteTimeBlock); \n\n        return content\n        \n        function deleteTimeBlock(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteTimeBlockClicked\", {day, blockNumber})\n        }\n    }\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/availabilityPageDOM.js?");

/***/ }),

/***/ "./src/DOMBuilders/mainPageDOM.js":
/*!****************************************!*\
  !*** ./src/DOMBuilders/mainPageDOM.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mainPageDOM\": () => (/* binding */ mainPageDOM)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n/* harmony import */ var _timeConverter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../timeConverter */ \"./src/timeConverter.js\");\n\n\n\n/*action: user interface for observing teams and availability\n\nuserMainPageData object is modeled as such:\n\nobj = {\n    name,\n    myTeams: \n        [{ \n            teamName,\n            teamSize, \n            rank:\n                {\n                    myTeams,\n                    allTeams\n                },\n            allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n            coach,\n        }, {etc}, {etc}]\n\n    availability:\n        {day: [{start, stop}, {start, stop}], day: [{start, stop}, {start, stop}]}, all days already input, make sure empties don't screw anything up\n\n    season,\n    lastVerified,\n}\n\npublishes:\n    page render requests FOR pageRenderer\n    season change requests FOR (?)\n    add team requests FOR teamRequestModel\n    edit/delete/modify team order requests FOR myTeamsModel\n    \n\nsubscribes to: \n    userMainPageModel builds FROM mainPageModel\n    \n*/\n\nconst mainPageDOM = (function(){\n    \n    let season; \n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", setSeason)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", publishMainPageRender);\n\n    function setSeason(mainPageData){ //make sure this happens before publishMainPageRender, it should\n        season = mainPageData.season\n    }\n\n    function publishMainPageRender(mainPageData){\n        const mainPageDOM = buildMainPageDOM(mainPageData)\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageRenderRequested\", mainPageDOM)\n    }\n    //find database subscribers for changeSeason/verifyUpToDate\n    function buildMainPageDOM(mainPageData){ \n        const template = document.querySelector(\"#mainPageTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const seasonButtons = content.querySelector(\"#seasonButtons\");\n        const mainPageAvailability = content.querySelector(\"#userAvailability\");\n        const mainPageMyTeams = content.querySelector(\"#teamGridContainer\");\n        const verifyInfo = content.querySelector(\"#verifyInfo\");\n        const verifyButton = content.querySelector(\"#verifyButton\");\n\n        const mainPageAvailabilityNew = renderMainPageAvailability(mainPageAvailability, mainPageData.availability);\n        const mainPageMyTeamsNew = renderMainPageMyTeams(mainPageMyTeams, mainPageData.teams); \n        \n        mainPageAvailability.replaceWith(mainPageAvailabilityNew);\n        mainPageMyTeams.replaceWith(mainPageMyTeamsNew);\n        \n        verifyInfo.innerText = `The last time you verified all teams were up-to-date was ${mainPageData.lastVerified}`\n\n        seasonButtons.children.forEach(function(child){\n            if(child.id == `${season}Button`){\n                child.disabled = true;\n            }else{\n                child.addEventListener(\"click\", changeSeason)\n               \n            }\n        })\n\n        verifyButton.addEventListner(\"click\", publishTeamsUpToDateVerification);\n    \n        return content\n    \n        function changeSeason(){\n            let string = \"Button\";\n            const seasonButtonId = this.id;\n            const truncateIndex = seasonButtonId.indexOf(string);\n            const seasonName = seasonButtonId.slice(0, truncateIndex);\n            \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userSeasonChangeRequested\", seasonName) \n        }\n\n        function publishTeamsUpToDateVerification(){\n            const date = new Date().toLocaleString();\n            \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"verifyUpToDateClicked\", date)\n        }\n    }\n    //no obvious issues here or with dataModel or availabilityDOM\n    function renderMainPageAvailability(availabilityDOM, availabilityData){\n        const availabilityDisplay = availabilityDOM.querySelector(\"#availabilityDisplay\");\n        const editAvailability = availabilityDOM.querySelector(\"#editAvailability\");\n\n        const availabilityDisplayNew = buildAvailabilityDisplay(availabilityData);\n        availabilityDisplay.replaceWith(availabilityDisplayNew);\n\n        editAvailability.addEventListener(\"click\", getAvailabilityModel);\n\n        return availabilityDOM\n        \n        function getAvailabilityModel(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"availabilityModelRequested\")\n        }\n    }\n\n    function buildAvailabilityDisplay(availabilityData){\n        const availabilityDisplayNew = document.createElement(\"div\");\n        for(let day in availabilityData){\n            const dayDiv = document.createElement(\"div\");\n            const label = document.createElement(\"h3\");\n\n            label.innerText = `${day}`;\n            day.forEach(function(timeBlock){\n                const timeBlockDiv = document.createElement(\"div\");\n                const startTime = document.createElement(\"p\");\n                const endTime = document.createElement(\"p\");\n\n                startTime.innerText = `Start Time: ${availabilityData[day][timeBlock].startTime}`;\n                endTime.innerText = `End Time: ${availabilityData[day][timeBlock].endTime}`;\n\n                timeBlockDiv.appendChild(startTime);\n                timeBlockDiv.appendChild(endTime);\n                dayDiv.appendChild(timeBlockDiv)\n            })\n            availabilityDisplayNew.appendChild(dayDiv)\n        }\n        return availabilityDisplayNew\n    }\n\n    function renderMainPageMyTeams(teamsDOM, teamArray){\n        \n        const teamGrid = teamsDOM.querySelector(\"#teamGrid\"); \n        const addButton = teamsDOM.querySelector(\"#teamGridAddTeam\");\n    \n        teamArray.forEach(function(team){\n            const teamElement = buildTeam(team, teamArray); \n            teamGrid.appendChild(teamElement)\n        })\n\n        addButton.addEventListener(\"click\", addTeam); //follow this\n        \n        return teamsDOM\n        \n        function addTeam(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"addTeam\")\n        }\n    }\n\n    //set CSS/class values for up/down buttons\n    function buildTeam(team, teamArray){\n        const template = document.querySelector(\"#mainPageTeamTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const teamName = content.querySelector(\".teamGridTeamName\");\n        const teamSize = content.querySelector(\".teamGridTeamSize\");\n        const optionContainer = content.querySelector(\".teamGridTeamOptionContainer\");\n        const editButton = content.querySelector(\".teamGridTeamEditButton\");\n        const deleteButton = content.querySelector(\".teamGridTeamDeleteButton\");\n\n        teamName.innerText = team.teamName;\n        teamSize.innerText = team.teamSize;\n\n        team.allOpts.forEach(function(optionDetails){\n            const optNum = team.allOpts.indexOf(optionDetails)+1;\n            const option = buildTeamOption(optionDetails, optNum);\n            optionContainer.appendChild(option);\n        })\n\n        const upButton = document.createElement(\"button\");\n        const downButton = document.createElement(\"button\");\n\n        if(teamArray.length >1 && team.rank.myTeams != 0 && team.rank.myTeams != teamArray.length -1){\n            upButton.addEventListener(\"click\", moveMyTeamUp);\n            downButton.addEventListener(\"click\", moveMyTeamDown);\n            \n            content.insertBefore(upButton, editButton);\n            content.insertBefore(downButton, editButton);\n        }else if(teamArray.length >1 && team.rank.myTeams == teamArray.length-1){\n            upButton.addEventListener(\"click\", moveMyTeamUp);\n            \n            content.insertBefore(upButton, editButton);\n        }else if(teamArray.length >1 && team.rank.myTeams == 0){\n            downButton.addEventListener(\"click\", moveMyTeamDown);\n            \n            content.insertBefore(downButton, editButton);\n        }\n\n        editButton.addEventListener(\"click\", editTeam);\n        deleteButton.addEventListener(\"click\", deleteTeam);\n\n        return content\n\n        function editTeam(){ \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"editTeam\", team); //follow these\n        }\n    \n        function deleteTeam(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteTeam\", team);\n        }\n\n        function moveMyTeamUp(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyMyTeamOrder\", {index: team.rank.myTeams, modifier:-1});\n        }\n\n        function moveMyTeamDown(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyMyTeamOrder\", {index: team.rank.myTeams, modifier:1});\n        }\n    }\n\n    function buildTeamOption(optionDetails, optNum){\n        const template = document.querySelector(\"#mainPageTeamOptionTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const option = content.querySelector(\".teamGridTeamOption\");\n        const dayContainer = content.querySelector(\".teamGridTeamDayContainer\");\n\n        option.innerText = `Option ${optNum}`;\n\n        optionDetails.forEach(function(day){\n            const dayDetails = buildTeamDayDetails(day);\n            dayContainer.appendChild(dayDetails);\n        })\n        \n        return content\n    }\n    \n    function buildTeamDayDetails(day){\n        const template = document.querySelector(\"#mainPageTeamDayTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const dayOfWeek = content.querySelector(\".teamGridTeamDayOfWeek\");\n        const startTime = content.querySelector(\".teamGridTeamStartTime\");\n        const endTime = content.querySelector(\".teamGridTeamEndTime\");\n        const inWeiss = content.querySelector(\".teamGridTeamInWeiss\");\n\n        dayOfWeek.innerText = day.dayOfWeek;\n        startTime.innerText = _timeConverter__WEBPACK_IMPORTED_MODULE_1__.timeValueConverter.runConvertTotalMinutesToTime(day.startTime).toString();\n        endTime.innerText = _timeConverter__WEBPACK_IMPORTED_MODULE_1__.timeValueConverter.runConvertTotalMinutesToTime(day.endTime).toString();\n        inWeiss.innerText = day.inWeiss;\n\n        return content\n    }\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/mainPageDOM.js?");

/***/ }),

/***/ "./src/DOMBuilders/requestFormDOM.js":
/*!*******************************************!*\
  !*** ./src/DOMBuilders/requestFormDOM.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"requestFormDOM\": () => (/* binding */ requestFormDOM)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*action: user interface creating/editing team name/size/ schedule requests\n\nteamDataModel object is modeled as such:\n\nobj = \n    { \n        teamName,\n        teamSize, \n        rank:\n            {\n                myTeams,\n                allTeams\n            },\n        allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n        coach,\n    }\n\npublishes:\n    requestForm page render requests FOR pageRenderer\n    mainPageDOM requests FOR mainPageData\n    update requests FOR teamRequestModel\n    team name/size, daySelector value changes for teamRequestModel\n    add/delete/reorder options, add/delete days for teamRequest Model\n    \nsubscribes to: \n    allTeamsList FROM mainPageData\n    teamData generation/ teamData option/day additions/removals FROM teamRequestModel\n    selectors nodes FROM selectorDOMBuilder\n    \n*/\nconst requestFormDOM = (function(){\n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"workingModelPopulated\", publishRequestFormRender)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"optionsModified\", renderAllOpts)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userSelectorsBuilt\", setSelectorNodes)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", setAllTeams);\n\n    \n    let allTeams;\n\n    const selectorNodes = {\n        startTime: null,\n        endTime: null,\n        teamSize: null,\n        dayOfWeek: null,\n        inWeiss: null\n    };\n\n    function setAllTeams(mainPageData){\n       allTeams = mainPageData.allTeams;      \n    }\n\n    function setSelectorNodes(selectorElementObj){\n        for(let selectorElement in selectorElementObj){\n            switch(selectorElement){\n                case `dayOfWeek`:\n                case `startTime`:\n                case `endTime`:\n                case `teamSize`:\n                case `inWeiss`:\n                    selectorNodes[selectorElement] = selectorElementObj[selectorElement];\n                    break;\n                default:\n                    return;\n            }  \n        }  \n    }\n\n    function publishRequestFormRender(workingModel){\n        const requestPage = renderRequestFormPage(workingModel);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageRenderRequested\", requestPage);\n    }\n\n\n    function renderRequestFormPage(workingModel){\n        const template = document.querySelector(\"#requestFormPageTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const teamName = content.querySelector(\"#formTeamName\");\n        const teamSize = content.querySelector(\"#formTeamSize\"); \n        const allOpts = content.querySelector(\"#formAllOpts\");\n        const addButton = content.querySelector(\"#addTrainingOption\");\n        const updateButton = content.querySelector(\"#updateTeamRequest\");\n        const cancelButton = content.querySelector(\"#cancelTeamRequest\");\n\n        const teamNameNew = renderTeamName(teamName, workingModel);\n        const teamSizeNew = renderTeamSizeSelection(teamSize, workingModel);\n        const allOptsNew = renderAllOpts(workingModel);\n\n        teamName.replaceWith(teamNameNew);\n        teamSize.replaceWith(teamSizeNew);\n        allOpts.replaceWith(allOptsNew);\n\n        addButton.addEventListener(\"click\", addOption);\n        updateButton.addEventListener(\"click\", updateTeamRequest);\n        cancelButton.addEventListener(\"click\", cancelTeamRequest);\n\n        return content;\n\n        function addOption(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"addOpt\")\n        }\n        \n        function updateTeamRequest(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"updateTeamRequest\")\n        }\n        \n        function cancelTeamRequest(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"mainPageDOMRequested\")\n        }    \n    }\n    \n\n    function renderTeamName(teamNameDOM, workingModel){\n        \n        teamNameDOM.value = workingModel.teamName;\n\n        teamNameDOM.addEventListener(\"blur\", function modifyTeamNameValue(){ \n            if(workingModel.teamName != teamNameDOM.value && blockTeamDuplication() == true){\n                alert(`Data already exists for ${teamNameDOM.value}. Use another team name or select edit for ${teamNameDOM.value}`);\n                teamNameDOM.value = \"\";\n                teamNameDOM.focus();\n            }else if(teamNameDOM.value == \"\"){\n                alert(\"Team name must have a value.\");\n                teamNameDOM.focus();\n            }else if(workingModel.teamName != \"\" && teamNameDOM.value != workingModel.teamName){\n                const confirmation = confirm(`If you submit changes, this will change team name from ${workingModel.teamName} to ${teamNameDOM.value}. Proceed? `);\n                if(confirmation){\n                    _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyTeamNameValue\", teamNameDOM.value)\n                }else{\n                    teamNameDOM.value = workingModel.teamName;\n                }\n            }else if(workingModel.teamname != teamNameDOM.value){\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyTeamNameValue\", teamNameDOM.value)\n            } \n        })\n\n        return teamNameDOM;\n\n        function blockTeamDuplication(){\n            const teamCheck = allTeams.some(function(thisTeam){\n                return thisTeam.teamName.toLowerCase() == teamNameDOM.value.toLowerCase();\n            })\n            return teamCheck;\n        }\n    }\n\n    \n    function renderTeamSizeSelection(teamSizeDOM, workingModel){\n        const primaryClass = Array.from(this.classList)[0];\n        \n        const selection = selectorNodes[`${primaryClass}`].cloneNode(true);  \n        selection.id = \"formTeamSize\";\n\n        const selectedOption= selection.querySelector(`option[value = ${workingModel.teamSize}]`);\n        selectedOption.selected = true;\n        if(selectedOption.value != \"default\"){\n            selection.firstChild.disabled = true;\n        }\n\n        selection.addEventListener(\"blur\", validateTeamSizeValue)\n        \n        teamSizeDOM.replaceWith(selection); //may be able to get rid of this\n\n        return selection\n\n        function validateTeamSizeValue(){\n            if(selection.value == \"default\"){\n                alert(\"Team size must have a value.\");\n                selection.focus();\n            }\n        }\n    }\n\n    \n    function renderAllOpts(workingModel){ \n        const allOptsNew = document.createElement(\"div\");\n        allOptsNew.id = \"formAllOpts\"; \n\n        workingModel.allOpts.forEach(function(optionDetails){\n            const optNum = workingModel.allOpts.indexOf(optionDetails) + 1; \n            const option = buildOption(workingModel.allopts, optionDetails, optNum);\n            allOptsNew.appendChild(option);\n        });\n        \n        const allOpts = document.querySelector(\"#formAllOpts\");\n        if(allOpts != null){\n            allOpts.replaceWith(allOptsNew);\n        }\n        else{\n            return allOptsNew\n        }  \n    }  \n\n\n    function buildOption(allOptsDetails, optionDetails, optNum){     \n        \n        _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"daysModified\", renderModifiedDayDetails)\n        \n        const template = document.querySelector(\"#optionTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const labelButtonDiv = content.querySelector(\".labelDeleteOptButton\");\n        const label = content.querySelector(\".optLabel\");\n        const allDaysDOM = content.querySelector(\".formAllDays\"); \n        const addDayButton = content.querySelector(\".addTrainingDay\");\n\n        label.innerHTML = `Option ${optNum}`;\n\n        if(allOptsDetails.length >1){\n            const deleteButton = document.createElement(\"button\");\n            const upButton = document.createElement(\"button\"); //both need class and css\n            const downButton = document.createElement(\"button\");\n            \n            deleteButton.classList.add(\"deleteOpt\");\n            upButton.classList.add(\"myTeamsMoveUpButton\");\n            downButton.classList.add(\"myTeamsMoveDownButton\");\n\n            deleteButton.addEventListener(\"click\", deleteOpt)\n            upButton.addEventListener(\"click\", moveOptionUp);\n            downButton.addEventListener(\"click\", moveOptionDown);\n\n            labelButtonDiv.appendChild(deleteButton)\n\n            if(optNum != 1 && optNum != allOptsDetails.length){\n                labelButtonDiv.appendChild(upButton)\n                labelButtonDiv.appendChild(downButton)\n            }\n            if(optNum == allOptsDetails.length){\n                labelButtonDiv.appendChild(upButton)\n            }\n            if(optNum == 1){\n                labelButtonDiv.appendChild(downButton)\n            }\n        }\n\n        addDayButton.addEventListener(\"click\", addDay);\n        \n        renderAllDaysDetails(optionDetails, optNum, allDaysDOM); \n\n        return content\n        \n        function addDay(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"addDay\", optNum)\n        }\n\n        function deleteOpt(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteOpt\", optNum)\n        }\n\n        function moveOptionUp(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyOptOrder\", {optNum, modifier:-1}) \n        }\n\n        function moveOptionDown(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyOptOrder\", {optNum, modifier:1})\n        }\n\n        function renderModifiedDayDetails(dayDetailsObj){\n            if(dayDetailsObj.publishedOptNum == optNum){\n                const allOpts = document.querySelector(\"#formAllOpts\");\n                const thisOption = Array.from(allOpts.children)[optNum-1];\n                const allDaysDOM = thisOption.querySelector(\".formAllDays\");\n\n                renderAllDaysDetails(dayDetailsObj.publishedOptionDetails, dayDetailsObj.publishedOptNum, allDaysDOM)\n            }\n        }\n    }\n\n\n    function renderAllDaysDetails(optionDetails, optNum, allDaysDOM){\n        const allDaysDOMNew = document.createElement(\"div\");  \n        allDaysDOMNew.classList.add(\"formAllDays\")\n\n        optionDetails.forEach(function(dayDetails){\n            const dayNum = optionDetails.indexOf(dayDetails) +1; \n            const day = buildDay(optionDetails, dayDetails, optNum, dayNum);\n            allDaysDOMNew.appendChild(day);\n        })\n        allDaysDOM.replaceWith(allDaysDOMNew);\n        \n    }\n\n\n    function buildDay(optionDetails, dayDetails, optNum, dayNum){     \n        const template = document.querySelector(\"#dayTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const labelButtonDiv = content.querySelector(\".labelDeleteDayButton\");\n        const label = content.querySelector(\".dayLabel\");\n        const allDaysDetails = content.querySelector(\".formAllDayDetails\");\n        \n        label.innerHTML = `Day ${dayNum}`;\n        \n        if(optionDetails.length>1){\n            const deleteButton = document.createElement(\"button\");\n            deleteButton.classList.add(\"deleteDay\");\n            \n            deleteButton.addEventListener(\"click\", deleteDay);\n            labelButtonDiv.appendChild(deleteButton)\n        }\n        \n        renderDayDetails();\n\n        return content\n        \n        function renderDayDetails(){\n            const allDayDetailsNew = buildDayDetails(dayDetails, optNum, dayNum);\n            allDayDetailsNew.classList.add(\"formAllDayDetails\")\n\n            allDaysDetails.replaceWith(allDayDetailsNew);   \n        }\n\n        function deleteDay(){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"deleteDay\", {optNum, dayNum})\n        } \n    }\n    \n\n    function buildDayDetails(dayDetails, optNum, dayNum){        \n        const template = document.querySelector(\"#dayDetailsTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const selectors = content.querySelectorAll(\".selector\")\n\n        selectors.forEach(function(selection){\n            const primaryClass = Array.from(selection.classList)[0];\n            \n            const selectionNew = selectorNodes[`${primaryClass}`].cloneNode(true);\n            selectionNew.addEventListener(\"change\", publishSelectionValueChange)\n\n            const selectedOption = selectionNew.querySelector(`option[value = ${dayDetails[primaryClass]}]`);\n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectionNew.firstChild.disabled = true;\n            }\n        \n            selection.replaceWith(selectionNew);\n\n            function publishSelectionValueChange(){\n                const selector = primaryClass;\n                const value = selectionNew.value\n                _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyTeamSelectorValue\", {optNum, dayNum, selector, value})\n            }\n        });\n\n        return content\n\n       \n    }\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/requestFormDOM.js?");

/***/ }),

/***/ "./src/DOMBuilders/selectorDOMBuilder.js":
/*!***********************************************!*\
  !*** ./src/DOMBuilders/selectorDOMBuilder.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selectorBuilder\": () => (/* binding */ selectorBuilder)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n/* harmony import */ var _timeConverter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../timeConverter */ \"./src/timeConverter.js\");\n\n\n/*\n\npurpose: creates and populates reusable select DOM elements for various pages\n\nfacilitySelector object format is as such:\n\nobj = {\n    facilityOpen,\n    facilityClose,\n    facilityMaxCapacity\n}\n\npublishes:\n    selection DOM elements FOR multiple DOM modules\n\nsubscribes:\n    admin facilitySelector data FROM mainPageModel\n    user facilitySelector data FROM mainPageModel\n\n*/\n\nconst selectorBuilder = (function(){ \n\n    //default values must be input (into database?) for facilityOpen/Close/MaxCapacity BEFORE first time running, or startTime/endTime/teamSize will have errors!\n    const selectionOptions = { \n        startTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        endTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        teamSize: {\n            start: 5,\n            end: null,\n            increment: 5\n        },\n        facilityOpen:{ //4am to 8pm, default value 6am (360)?\n            start: 240,\n            end: 1200,\n            increment: 15\n        },\n        facilityClose:{ //5am to 9pm, default value 8pm (1200)?\n            start: 300,\n            end: 1260,\n            increment: 15\n        },\n        facilityMaxCapacity:{//range 10-150, default value 120?\n            start: 10,\n            end: 150,\n            increment: 5\n        },\n        dayOfWeek: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], \n        inWeiss: [\"yes\", \"no\"],\n    };\n\n    const selectors = {}\n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminSelectorsRequested\", setAdminSelectionOptions);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userSelectorsRequested\", setUserSelectionOptions); \n\n    function setAdminSelectionOptions(selectorsModel){\n        setSelectionOptions(selectorsModel);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminSelectorsBuilt\", selectors) \n    }\n\n    function setUserSelectionOptions(selectorsModel){\n        setSelectionOptions(selectorsModel);\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userSelectorsBuilt\", selectors) \n    }\n\n    function setSelectionOptions(selectorsModel){\n        selectionOptions.startTime.start = selectorsModel.facilityOpen;\n        selectionOptions.endTime.start = selectorsModel.facilityOpen + 30;\n        selectionOptions.startTime.end = selectorsModel.facilityClose - 30;\n        selectionOptions.endTime.end = selectorsModel.facilityClose;\n        selectionOptions.teamSize.end = selectorsModel.facilityMaxCapacity;\n        \n        for(let option in selectionOptions){\n            selectors[option] = buildSelector(option);\n        }\n    }\n\n    function buildSelector(primaryClass){\n        const selection = document.createElement(\"select\");\n        selection.classList.add(primaryClass);\n        selection.classList.add(\"selector\");\n            const defaultOption = document.createElement(\"option\");\n            defaultOption.value = \"default\";\n            defaultOption.innerHTML = \"--\";\n        selection.appendChild(defaultOption);\n\n        switch(primaryClass){\n            case \"dayOfWeek\":\n            case \"inWeiss\": \n                buildArraySelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"teamSize\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                selection.addEventListener(\"change\", function modifyTeamSizeValue(){\n                    const value = selection.value \n                    _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"modifyTeamSizeValue\", value)\n                });\n                break;   \n            case \"endTime\":\n            case \"facilityClose\":\n            case \"facilityMaxCapacity\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"startTime\":\n            case \"facilityOpen\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                selection.addEventListener(\"change\", modifyEndTimeDefaultValue);\n                break;\n        }\n\n        selection.addEventListener(\"change\", disableDefaultOption) \n        selection.addEventListener(\"blur\", preventEmptySelectors)\n    }\n\n    function buildArraySelectorOptions(primaryClass, selector){\n        const optionValues = selectionOptions[primaryClass];\n        optionValues.forEach(function(optionValue){\n            const option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.innerHTML = optionValue;\n            selector.appendChild(option); \n        })\n    }\n\n    function buildRangeSelectorOptions(primaryClass, selector){\n        const optionValues = selectionOptions[primaryClass];\n        for(let i = optionValues.start; i<optionValues.end; i += optionValues.increment){\n            const option = document.createElement(\"option\");\n            option.value = i;\n            if(primaryClass == \"teamSize\" || primaryClass == \"facilityMaxCapacity\"){\n                option.innerHTML = i;\n            }else{\n                option.innerHTML = _timeConverter__WEBPACK_IMPORTED_MODULE_1__.timeValueConverter.runConvertTotalMinutesToTime(i); //toString() should not be necessary\n            }selector.appendChild(option);\n        }\n    }\n\n    function disableDefaultOption(){\n        const values = Array.from(this.children);\n        values[0].disabled = true;\n    }\n\n    function modifyEndTimeDefaultValue(){\n        const startTimeSelectedValue = Number(this.value);\n        const endTimeValuesArray = Array.from(this.parentElement.nextElementSibling.lastElementChild.children);\n        endTimeValuesArray.forEach(function(time){\n            const endTimeValue = Number(time.value);\n            if(endTimeValue < startTimeSelectedValue + 30 || endTimeValue == \"default\"){\n                time.disabled = true;\n            }else{\n                time.disabled = false;\n            }\n            if(endTimeValue == startTimeSelectedValue + 60){\n                time.selected = true;\n            }else{\n                time.selected = false;\n            }\n        })\n    }\n\n    function preventEmptySelectors(){\n        if(this.value == \"default\"){\n            const className = Array.from(this.classList)[0];\n            alert(`A non-default value must be selected for ${className}`);\n            this.focus();\n        }\n    }\n\n})();\n\n\n\n\n//# sourceURL=webpack://pennschedule/./src/DOMBuilders/selectorDOMBuilder.js?");

/***/ }),

/***/ "./src/dataModels/adminAllUsersDataModel.js":
/*!**************************************************!*\
  !*** ./src/dataModels/adminAllUsersDataModel.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminAllUsersDataModel\": () => (/* binding */ adminAllUsersDataModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for selecting individual user from allUsers to add/edit/delete\n\nadminAllUsers array is modeled as such:\n\nallUsers = \n\t[\n\t\t{\n            name,\n            color,\n            privilegeLevel,\n            teams:{},\n            availability:{},\n            lastVerified,\n\t\t\tadminPageSet,\n            season\n        }, \n\t\t{etc}, {etc}\n\t]\n\n\tteamOrderObj obj is modeled as follows: {index, modifier}\n\npublishes:\n    user data FOR adminUserDataModel edits /adminUserGenerator DOM display\n\tverified user addition/edits or deletions FOR database\n\nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    userData change validations FROM userValidator\n\trequests to edit/delete a user FROM adminMainPageDOM\n*/\n\nconst adminAllUsersDataModel = (function(){ //continue REVIEW HERE\n\t//no obvious issues, find database update listeners for delete/modify/add allUsers, make sure password does not get passed to front-end\n\tlet allUsers;\n\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", populateAllUsers)\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"editUser\", editUser);\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"deleteUser\", deleteUserForDatabaseUpdate);\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userDataValidated\", addEditUserForDatabaseUpdate)\n\n\tfunction populateAllUsers(adminAllUsers){\n\t\tallUsers = adminAllUsers.allUsers.concat(); //should not need deeper recursive copying\n\t}\n\n\tfunction editUser(userData){\n\t\tconst thisUser = allUsers.filter(function(user){\n\t\t\treturn userData.userName = user.userName\n\t\t})[0];\n\n\t\t_events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userEditDataLoaded\", thisUser);\n\t}\n\n\tfunction deleteUserForDatabaseUpdate(userData){\n\t\tconst allUsersSlice = allUsers.concat();\n\t\tconst existingUserIndex = allUsersSlice.findIndex(function(users){\n\t\t\treturn users.userName = userData.userName\n\t\t})\n\n\t\tallUsersSlice.splice(existingUserIndex, 1);\n\n\t\t_events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"allUsersDataUpdated\", allUsersSlice); //find database listener for this\n\t}\n\n\tfunction addEditUserForDatabaseUpdate(validatedUserData){\n\t\tconst allUsersSlice = allUsers.concat();\n\t\tconst existingUserIndex = findExistingUser()\n\n\t\tif(existingUserIndex != -1){\n\t\t\tallUsersSlice.splice(existingUserIndex, 1, validatedUserData.newData)\n\t\t}else{\n\t\t\tallUsersSlice.push(validatedUserData.newData)\n\t\t}\n\t\t\n\t\t_events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"allUsersDataUpdated\", allUsersSlice) //find database listener for this\n\n\t\tfunction findExistingUser(){\n\t\t\tconst existingUser = allUsersSlice.findIndex(function(users){\n\t\t\t\treturn validatedUserData.existingData.name == users.name\n\t\t\t})\n\t\t\treturn existingUser;\n\t\t}\n\t}\n\n\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/adminAllUsersDataModel.js?");

/***/ }),

/***/ "./src/dataModels/adminMainPageAdminTimeBlockModel.js":
/*!************************************************************!*\
  !*** ./src/dataModels/adminMainPageAdminTimeBlockModel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminMainPageAdminTimeBlockModel\": () => (/* binding */ adminMainPageAdminTimeBlockModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for modifying/saving adminTimeBlock content for adminMainPage\n\ndatabase object is modeled as such:\n\nobj = {\n    day: [\n        {startTime, stopTime, admin}, {startTime, stopTime, admin}\n    ],\n    day: [\n        {startTime, stopTime, admin}, {startTime, stopTime, admin}\n    ]\n}\n\npublishes:\n    adminTimeBlockDOM renders FOR adminMainPageDOM\n    save requests FOR database\n   \nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    add timeBlock, deleteTimeBlock, and time modification changes FROM adminMainPageDOM\n    save change and cancel change requests FROM adminMainPageDOM\n*/\n\nconst adminMainPageAdminTimeBlockModel = (function(){\n    //find subscriber to databse update\n    //updates here would need to pushed to all users, should this publish to allUsers here, or do this on backEnd before DB save? Look at Node/Mongo scripts to determine how viable this is one way or another\n    let adminAvailabilityModel;\n    let adminAvailabilityModelCopy;\n    let timeBlockDefault = {\n        startTime:\"default\",\n        endTime:\"default\",\n        admin:\"yes\"\n    };\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", setAdminAvailabilityModel);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"deleteAdminTimeBlockClicked\", deleteAdminAvailabilityRow);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"addAdminTimeBlockClicked\", addAdminAvailabilityRow);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyAdminTimeBlockSelectorValue\", modifyAdminAvailabilityValue);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"updateAdminAvailabilityClicked\", validateAdminAvailability);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminAvailabilityDataValidated\", updateAdminAvailability)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"cancelAdminAvailabilityChangesClicked\", cancelAdminAvailabilityChanges)\n\n    function setAdminAvailabilityModel(adminData){\n        adminAvailabilityModel = adminData.adminTimeBlocks;\n        setAdminAvailabilityModelCopy()\n    }\n\n    function setAdminAvailabilityModelCopy(){\n        adminAvailabilityModelCopy = Object.assign({}, adminAvailabilityModel);\n        for(let day in adminAvailabilityModelCopy){\n            adminAvailabilityModelCopy[day] = adminAvailabilityModel[day].concat();\n            day.forEach(function(timeBlock){\n                adminAvailabilityModelCopy[day][timeBlock] = Object.assign({}, adminAvailabilityModel[day][timeBlock])\n            });\n        }\n    }\n\n    function addAdminAvailabilityRow(obj){\n        adminAvailabilityModelCopy[obj.day].push(Object.assign({}, timeBlockDefault));\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityModelModified\", {adminTimeBlockDiv : obj.adminTimeBlockDiv, adminMainPageData: adminAvailabilityModelCopy});\n    }\n\n    function deleteAdminAvailabilityRow(rowObj){\n        const blockIndex = rowObj.blockNumber;\n        adminAvailabilityModelCopy[rowObj.day].splice(blockIndex, 1);\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityModelModified\", {adminTimeBlockDiv: rowObj.adminTimeBlockDiv, adminMainPageData: adminAvailabilityModelCopy});\n    }\n\n    function modifyAdminAvailabilityValue(rowObj){\n        const blockIndex = rowObj.blockNumber;\n        adminAvailabilityModelCopy[rowObj.day][blockIndex][rowObj.selector] = rowObj.value\n    }\n\n    function validateAdminAvailability(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityValidationRequested\", adminAvailabilityModelCopy)\n    }\n\n    function updateAdminAvailability(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityDataUpdated\", adminAvailabilityModelCopy) //find subscriber \n    }\n\n    function cancelAdminAvailabilityChanges(adminTimeBlockDiv){\n        setAdminAvailabilityModelCopy();\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityModelModified\", {adminTimeBlockDiv, adminMainPageData: adminAvailabilityModel})\n    }\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/adminMainPageAdminTimeBlockModel.js?");

/***/ }),

/***/ "./src/dataModels/adminMainPageAllTeamsDataModel.js":
/*!**********************************************************!*\
  !*** ./src/dataModels/adminMainPageAllTeamsDataModel.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminMainPageAllTeamsData\": () => (/* binding */ adminMainPageAllTeamsData)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for modifying/saving allTeams content for adminMainPage\n\nadminAllTeams array is modeled as such:\n\nallTeams = \n\t[\n\t\t{ \n\t\t\tteamName,\n\t\t\tteamSize, \n\t\t\trank:\n\t\t\t\t{\n\t\t\t\t\tmyTeams,\n\t\t\t\t\tallTeams\n\t\t\t\t},\n\t\t\tallOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n\t\t\tcoach\n\t\t}, \n\t\t{etc}, {etc}\n\t]\n\n\tteamOrderObj obj is modeled as follows: {index, modifier}\n\npublishes:\n    allTeams order changes FOR database update\n   \nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    allTeams order updates FROM adminMainPageDOM\n*/\n\nconst adminMainPageAllTeamsData = (function(){\n\t//no obvious work to be done here except connect teamOrder change to database, have changes written to EVERY TEAM and ensure recursion is necessary\n\tlet allTeams;\n\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", populateAllTeams)\n\t_events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyAdminTeamOrder\", modifyTeamOrder);\n\n\tfunction populateAllTeams(adminAllTeams){\n\t\tallTeams = adminAllTeams.allTeams.concat(); //does this need recursive copying? depth should be sufficient if so\n\t\tfor(let team in adminAllTeams.allTeams){\n\t\t\tallTeams[team] = Object.assign({}, adminAllTeams.allTeams[team])\n\t\t\tallTeams[team].rank = Object.assign({}, adminAllTeams.allTeams[team].rank)\n\t\t}\n\t}\n\n\tfunction modifyTeamOrder(teamOrderObj){\n\t\tconst {teamIndex, modifier} = teamOrderObj;\n\n\t\tconst allTeamsSlice = allTeams.concat();\n\t\tfor(let team in allTeams){\n\t\t\tallTeamsSlice[team] = Object.assign({}, allTeams[team])\n\t\t\tallTeamsSlice[team].rank = Object.assign({}, allTeams[team].rank)\n\t\t}\n\n\t\tconst team = allTeamsSlice.splice(teamIndex, 1)[0];\n\t\tallTeamsSlice.splice(teamIndex + modifier, 0, team);\n\t\tallTeamsSlice.forEach(function(team){\n\t\t\tteam.rank.allTeams = allTeamsSlice.findIndex(function(thisTeam){\n\t\t\t\treturn thisTeam.teamName == team.teamName\n\t\t\t})\n\t\t})\n\t\t_events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAllTeamsDataUpdated\", allTeamsSlice); //find listener\n\t}\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/adminMainPageAllTeamsDataModel.js?");

/***/ }),

/***/ "./src/dataModels/adminMainPageFacilityDataModel.js":
/*!**********************************************************!*\
  !*** ./src/dataModels/adminMainPageFacilityDataModel.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminMainPageFacilityDataModel\": () => (/* binding */ adminMainPageFacilityDataModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for modifying/saving facilityData content for adminMainPage\n\ndatabase object is modeled as such:\n\nobj = {\n    facilityOpen, \n    facilityClose, \n    facilityMaxCapacity\n}\n\npublishes:\n    facilityDataDOM renders FOR adminMainPageDOM\n    save requests FOR databse\n   \nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    data modification changes FROM adminMainPageDOM\n    save change and cancel change requests FROM adminMainPageDOM\n*/\n\nconst adminMainPageFacilityDataModel = (function(){\n    //no obvious issues, find database listener for data update\n    let adminFacilityDataModel;\n    let adminFacilityDataModelCopy;\n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\", setAdminFacilityDataModel);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyFacilitySelectorValue\", modifyFacilitySelectorValue);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"updateFacilityDataClicked\", validateFacilityData);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminFacilityDataValidated\", updateFacilityData);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"cancelFacilityDataChangesClicked\", cancelFacilityDataChanges);\n\n    function setAdminFacilityDataModel(adminData){\n        adminFacilityDataModel = adminData.facilitySelectors\n        setAdminFacilityDataModelCopy()\n    }\n\n    function setAdminFacilityDataModelCopy(){\n        adminFacilityDataModelCopy = Object.assign({}, adminFacilityDataModel);\n        \n    }\n    function modifyFacilitySelectorValue(facilityDataObj){\n        adminFacilityDataModelCopy[facilityDataObj.selector] = facilityDataObj.value;\n    }\n\n    function validateFacilityData(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminFacilityDataValidationRequested\", adminFacilityDataModelCopy)\n    }\n\n    function updateFacilityData(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminFacilityDataUpdated\", adminFacilityDataModelCopy);\n    }\n    function cancelFacilityDataChanges(adminFacilityDataContainer){\n        setAdminFacilityDataModelCopy();\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminFacilityModelModified\", {adminFacilityDataContainer, adminMainPageData: adminFacilityDataModel})\n    }\n\n\n\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/adminMainPageFacilityDataModel.js?");

/***/ }),

/***/ "./src/dataModels/adminUserDataModel.js":
/*!**********************************************!*\
  !*** ./src/dataModels/adminUserDataModel.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"adminUserDataModel\": () => (/* binding */ adminUserDataModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for creating/modifying individual user data \n\nuserObject is modeled as such:\n\n    {\n        name,\n        color,\n        privilegeLevel,\n        teams:{},\n        availability:{},\n        lastVerified,\n        adminPageSet,\n        season\n    }, \n\npublishes:\n    userModel data FOR adminUserGeneratorDOM\n    validation requests to save data FOR userValidator\n   \nsubscribes to: \n    addUser requests FROM adminMainPageModel\n    editUser data FROM adminAllUsersDataModel\n\tuserData save requests FROM adminUserGeneratorDOM\n    data modifications for name/password/color/privelege FROM adminUserGeneratorDOM\n*/\n\nconst adminUserDataModel = (function(){\n    //no obvious issues, ensure that password does not come to front-end\n    let userModel;\n    let userModelCopy;\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyUserNameValue\", setName);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyUserPrivilegeLevelValue\", setPrivilegeLevel)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyUserColorValue\", setColor)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userEditDataLoaded\", populateUserModel);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"addUser\", createNewUser);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"saveUserDataClicked\", validateChanges);\n    \n    \n    function populateUserModel(userData){\n        userModel = Object.assign({}, userData);\n        userModelCopy = Object.assign({}, userModel)\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userModelPopulated\", userModel)\n    }\n    \n    function createNewUser(){\n        userModel = {\n            name: \"\",\n            color: \"#000000\",\n            privilegeLevel: false,\n            teams:[], \n            availability:{Sun:[], Mon:[], Tue: [], Wed: [], Thu: [], Fri: [], Sat: []}, \n            lastVerified: null,\n            adminPageSet: null,\n            season: \"fall\"\n        };\n        userModelCopy = Object.assign({}, userModel);\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userModelPopulated\", userModel)\n    }\n\n    function setName(name){\n        userModelCopy.name = name;\n    }\n\n    function setColor(color){\n        userModelCopy.color = color\n    }\n\n    function setPrivilegeLevel(privilege){\n        userModelCopy.privilege = privilege;\n        if(privilege == false){\n            userModelCopy.adminPageSet = null\n        }else{\n            userModelCopy.adminPageSet = \"admin\"\n        }\n    }\n\n    function validateChanges(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userDataValidationRequested\", {newData: userModelCopy, existingData:userModel})\n    }\n\n})()\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/adminUserDataModel.js?");

/***/ }),

/***/ "./src/dataModels/availabilityModel.js":
/*!*********************************************!*\
  !*** ./src/dataModels/availabilityModel.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"availabilityModel\": () => (/* binding */ availabilityModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n\n/*purpose: dataModel for displaying availabilityDOM and modifying userAvailability content \n\navailability object is modeled as such:\n\nobj = {\n    \n    day: \n    [\n        {start, stop, admin}, \n        {start, stop, admin}\n    ], \n    day: \n    [\n        {etc}, \n        {etc},\n    ]\n\n}\n\npublishes:\n    availabilityModel FOR availabilityPageDOM, availabilityValidator, and database updates\n\nsubscribes to: \n    edit availabilityData requests FROM mainPageDOM\n    add/delete/update availabilityData requests FROM availabilityPageDOM\n    successful validations from availabilityValidator\n*/\n\nconst availabilityModel = (function(){\n    //no obvious issues, find subscriber for database updates\n    let availabilityModel;\n    let availabilityModelCopy;\n    let timeBlockDefault = {\n        startTime:\"default\",\n        endTime:\"default\",\n        admin: \"no\"\n    };\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", setAvailabilityModel); \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"availabilityModelRequested\", publishAvailabilityModel)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"deleteTimeBlockClicked\", deleteAvailabilityRow);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"addTimeBlockClicked\", addAvailabilityRow);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyAvailabilitySelectorValues\", modifyAvailabilityValue);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"updateAvailabilityClicked\", validateAvailability);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userAvailabilityDataValidated\", updateAvailability)\n\n    \n    function setAvailabilityModel(userAvailability){\n        availabilityModel = userAvailability.availability\n    }\n\n    function setAvailabilityModelCopy(){\n        availabilityModelCopy = Object.assign({}, availabilityModel);\n        for(let day in availabilityModel){\n            availabilityModelCopy[day] = availabilityModel[day].concat();\n            day.forEach(function(timeBlock){\n                availabilityModelCopy[day][timeBlock] = Object.assign({}, availabilityModel[day][timeBlock])\n            });\n        }\n    }\n\n    function publishAvailabilityModel(){\n        setAvailabilityModelCopy();\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"availabilityDOMPageRequested\", availabilityModelCopy)\n    }\n\n\n    function addAvailabilityRow(day){\n        availabilityModelCopy[day].push(Object.assign({}, timeBlockDefault));\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"availabilityModelModified\", availabilityModelCopy);\n    }\n\n    function deleteAvailabilityRow(rowObj){\n        const blockIndex = rowObj.blockNumber;\n        availabilityModelCopy[rowObj.day].splice(blockIndex, 1);\n\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"availabilityModelModified\", availabilityModelCopy);\n    }\n\n    function modifyAvailabilityValue(rowObj){\n        const blockIndex = rowObj.blockNumber;\n        availabilityModelCopy[rowObj.day][blockIndex][rowObj.selector] = rowObj.value\n    }\n\n    function validateAvailability(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userAvailabilityValidationRequested\", availabilityModelCopy)\n    }\n\n    function updateAvailability(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"availabilityDataUpdated\", availabilityModelCopy)\n    }\n\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/availabilityModel.js?");

/***/ }),

/***/ "./src/dataModels/mainPageModel.js":
/*!*****************************************!*\
  !*** ./src/dataModels/mainPageModel.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mainPageModel\": () => (/* binding */ mainPageModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel from database for loading content for user and adminPages\n\ndatabase object is modeled as such:\n\nobj = {\n    myteams/allTeams: \n        [{ \n            teamName,\n            teamSize, \n            rank:\n                {\n                    myTeams,\n                    allTeams\n                },\n            allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n            coach,\n        }, {etc}, {etc}]\n    \n    allUsers: [user, user, user]\n\n    user:\n        {\n            name,\n            color, //for ADMIN LEVEL ONLY\n            privilegeLevel,\n            teams:{},\n            availability:{},\n            lastVerified,\n            adminPageSet,\n            season\n        }\n\n    facilitySelectors:\n        {facilityOpen, facilityClose, facilityMaxCapacity}\n\n    adminTimeBlocks:\n        {day: [{start, stop, admin}, {start, stop, admin}], day: [{start, stop, admin}, {start, stop, admin}]}  //for ADMIN LEVEL ONLY\n}\n\npublishes:\n    admin/userSelector build requests FOR selectorDOMBuilder\n    admin/userMainPageData model builds FOR admin/userMainPage DOM and all necessary dataModels\n\nsubscribes to: \n    data load FROM database\n    admin level pageChange requests from pageRenderer\n    adminMainPageDOM requests FROM adminUserGenerator cancellation AND ...\n*/\n\nconst mainPageModel = (function(){\n    //facilitySelectors/adminPageSet/season all have to have a default value in databse to start\n    //ensure proper database connection\n    //determine if recursive copying for immutability is necessary directly off database\n    //check lastVerified and season for proper execution\n\n    let userPageModel = {\n        name: null,\n        privilegeLevel: null,\n        availability: null,\n        myTeams: null,\n        lastVerified:null,\n        adminPageSet: null,\n        season: null,\n        allTeams: null,\n        facilitySelectors:null,\n    }\n\n    \n    /*{\n        name: \"Brindle\",\n        privilegeLevel:\"user\",\n        availability:{\n            Sun:[],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        myTeams:\n        [\n            {\n            name:\"basketballWomen\",\n            coach: \"Brindle\",\n            rank:{\n                myTeams: 2,\n                allTeams:6\n            },\n            size: 15,\n            allOpts:\n                \n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n            \n            {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:{\n                    myTeams: 1,\n                    allTeams:5\n                },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n        ],\n        lastVerified: null,\n        adminPageSet:null,\n        season:\"fall\",\n        allTeams:\n        [\n            {\n            name: \"football\",\n            coach:\"Rivera\",\n            rank:{\n                myTeams: 1,\n                allTeams:1\n            },\n            size: 110,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n                ]\n            \n        \n        \n        },\n    \n        {\n            name:\"basketballWomen\",\n            coach: \"Brindle\",\n            rank:{\n                myTeams: 2,\n                allTeams:6\n            },\n            size: 15,\n            allOpts:\n                \n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n            \n            {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:{\n                    myTeams: 1,\n                    allTeams:5\n                },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n    \n            {\n                name:\"sprintFootball\",\n                coach: \"Dolan\",\n                rank:{\n                    myTeams: 4,\n                    allTeams:4\n                },\n                size: 50,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n        ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:150\n        }\n\n    }*/\n    \n\n    let adminMainPageModel = {\n        name: null,\n        privilegeLevel: null,\n        season: null,\n        allTeams: null,\n        allUsers: null,\n        facilitySelectors:null,\n        adminTimeBlocks: null,\n        \n    }\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"dataLoadedFromDatabase\", populateAndDistributeDataModels);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageDOMRequested\", distributeMainPageModel);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageDOMRequested\", distributeAdminMainPageModel)\n\n    function populateAndDistributeDataModels(databaseObj){//check these for recursive immutable copying properly/necessary, if not jsut do destructuring assingment\n\n        if(databaseObj.user.adminPageSet == \"admin\"){\n            populateAdminUserModel(databaseObj);\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminSelectorsRequested\", adminMainPageModel.facilitySelectors)\n            distributeAdminMainPageModel()\n        }else{\n            populateGeneralUserModel(databaseObj);\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userSelectorsRequested\", userPageModel.facilitySelectors)\n            distributeMainPageModel();\n        }\n    }\n\n\n    function populateGeneralUserModel(databaseObj){\n        userPageModel.name = databaseObj.user.name;\n        userPageModel.privilegeLevel = databaseObj.user.privilegeLevel\n        userPageModel.availability = databaseObj.user.availability;\n        userPageModel.teams = databaseObj.user.teams; \n        userPageModel.lastVerified = databaseObj.user.lastVerified;\n        userPageModel.season = databaseObj.user.season;\n        userPageModel.adminPageSet = databaseObj.user.adminPageSet\n        \n        userPageModel.facilitySelectors = databaseObj.facilitySelectors\n        userPageModel.allTeams = databaseObj.allTeams; \n    }\n\n    function populateAdminUserModel(databaseObj){\n        adminMainPageModel.name = databaseObj.user.name\n        adminMainPageModel.privilegeLevel = databaseObj.user.privilegeLevel\n        adminMainPageModel.season = databaseObj.user.season\n\n        adminMainPageModel.allUsers = databaseObj.allUsers;\n        adminMainPageModel.allTeams = databaseObj.allTeams;\n        adminMainPageModel.facilitySelectors = databaseObj.facilitySelectors;\n        adminMainPageModel.adminTimeBlocks = databaseObj.adminTimeBlocks;\n    }\n\n    function distributeMainPageModel(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"mainPageModelBuilt\", userPageModel)\n    }\n\n    function distributeAdminMainPageModel(){\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminMainPageModelBuilt\", adminMainPageModel)\n    }\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/mainPageModel.js?");

/***/ }),

/***/ "./src/dataModels/myTeamsModel.js":
/*!****************************************!*\
  !*** ./src/dataModels/myTeamsModel.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"myTeamsModel\": () => (/* binding */ myTeamsModel)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: dataModel for loading content and editing content for array of all user's teams\n\nmyTeams object is modeled as such:\n\nobj = {\n    myTeams: \n        [\n            { \n            teamName,\n            teamSize, \n            rank:\n                {\n                    myTeams,\n                    allTeams\n                },\n            allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n            coach\n            }, \n            {etc}, \n            {etc}\n        ]\n}\n\npublishes:\n    singleTeam to-edit data FOR teamRequestModel\n    save change request FOR database\n\nsubscribes to: \n    myTeams data FROM mainPageDataModel\n    myTeams order modifications FROM mainPageDOM\n    requests to edit/delete teams FROM mainPage DOM\n    successful validations from requestValidator\n*/\n\nconst myTeamsModel = (function(){\n    // find subscribers for database updates (teamOrder, validatedTeamDataChanges, deletions)\n    let myTeams;\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"editTeam\", editTeam)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"modifyMyTeamOrder\", modifyTeamOrder) \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", populateMyTeams)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"workingModelValidated\", addEditTeamForDatabaseUpdate)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"deleteTeam\", deleteTeamForDatabaseUpdate)\n\n     function populateMyTeams(userMyTeams){ \n         myTeams = userMyTeams.teams.concat();\n         for(let team in userMyTeams.team){\n\t\t\tmyTeams[team] = Object.assign({}, userMyTeams.teams[team])\n\t\t\tmyTeams[team].rank = Object.assign({}, userMyTeams.teams[team].rank)\n\t\t} \n    }\n\n    function editTeam(teamRequest){ \n        const thisTeam = myTeams.filter(function(team){\n            teamRequest.teamName == team.teamName\n        })[0];\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"teamEditDataLoaded\", thisTeam); //follow this\n    }\n\n    function modifyTeamOrder(teamInfoObj){\n        const myTeamsSlice = myTeams.concat();\n        const team = myTeamsSlice.splice(teamInfoObj.teamIndex, 1)[0];\n        myTeamsSlice.splice(teamInfoObj.teamIndex + teamInfoObj.modifier, 0, team);\n        myTeamsSlice.forEach(function(thisTeam){\n            thisTeam.rank.myTeams = myTeamsSlice.findIndex(function(teams){\n                return teams.teamName == thisTeam.teamName\n            })\n        })     \n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"myTeamsDataUpdated\", myTeamsSlice); //send to DB for save\n    }\n\n    function addEditTeamForDatabaseUpdate(teamObject){\n        const myTeamsSlice = myTeams.concat();\n        const existingTeamIndex = findExistingTeam()\n        \n       if(existingTeamIndex != -1){\n            myTeamsSlice.splice(existingTeamIndex, 1, teamObject.workingModel)\n       }else{\n            myTeamsSlice.push(teamObject.workingModel)\n       }\n       myTeamsSlice.forEach(function(thisTeam){\n        thisTeam.rank.myTeams = myTeamsSlice.findIndex(function(teams){\n                return teams.teamName == thisTeam.teamName\n            })\n        })\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"myTeamsDataUpdated\", myTeamsSlice) //send to DB for save\n\n        function findExistingTeam(){\n            const existingTeam = myTeamsSlice.findIndex(function(teams){\n                return teamObject.teamRequest.teamName == teams.teamName\n            })\n            return existingTeam\n            \n        }\n    }\n\n    function deleteTeamForDatabaseUpdate(thisTeam){\n        const myTeamsSlice = myTeams.concat();\n        const existingTeamIndex = myTeamsSlice.findIndex(function(teams){ \n            return teams.teamName == thisTeam.teamName\n        })\n\n        myTeamsSlice.splice(existingTeamIndex, 1)\n        myTeamsSlice.forEach(function(thisTeam){\n            thisTeam.rank.myTeams = myTeamsSlice.findIndex(function(teams){ \n                return teams.teamName == thisTeam.teamName\n            })\n        })\n        _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"myTeamsDataUpdated\", myTeamsSlice) //send to DB for save\n    }\n\n\n})();\n\n\n\n\n\n\n\n//# sourceURL=webpack://pennschedule/./src/dataModels/myTeamsModel.js?");

/***/ }),

/***/ "./src/events.js":
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"events\": () => (/* binding */ events)\n/* harmony export */ });\n\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\n//# sourceURL=webpack://pennschedule/./src/events.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/events.js\");\n/* harmony import */ var _dataModels_adminAllUsersDataModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataModels/adminAllUsersDataModel */ \"./src/dataModels/adminAllUsersDataModel.js\");\n/* harmony import */ var _dataModels_adminMainPageAdminTimeBlockModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataModels/adminMainPageAdminTimeBlockModel */ \"./src/dataModels/adminMainPageAdminTimeBlockModel.js\");\n/* harmony import */ var _dataModels_adminMainPageAllTeamsDataModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataModels/adminMainPageAllTeamsDataModel */ \"./src/dataModels/adminMainPageAllTeamsDataModel.js\");\n/* harmony import */ var _dataModels_adminMainPageFacilityDataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dataModels/adminMainPageFacilityDataModel */ \"./src/dataModels/adminMainPageFacilityDataModel.js\");\n/* harmony import */ var _dataModels_adminUserDataModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataModels/adminUserDataModel */ \"./src/dataModels/adminUserDataModel.js\");\n/* harmony import */ var _dataModels_availabilityModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dataModels/availabilityModel */ \"./src/dataModels/availabilityModel.js\");\n/* harmony import */ var _dataModels_mainPageModel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dataModels/mainPageModel */ \"./src/dataModels/mainPageModel.js\");\n/* harmony import */ var _dataModels_myTeamsModel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dataModels/myTeamsModel */ \"./src/dataModels/myTeamsModel.js\");\n/* harmony import */ var _DOMBuilders_adminMainPageDOM__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DOMBuilders/adminMainPageDOM */ \"./src/DOMBuilders/adminMainPageDOM.js\");\n/* harmony import */ var _DOMBuilders_adminUserGeneratorDOM__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DOMBuilders/adminUserGeneratorDOM */ \"./src/DOMBuilders/adminUserGeneratorDOM.js\");\n/* harmony import */ var _DOMBuilders_availabilityPageDOM__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./DOMBuilders/availabilityPageDOM */ \"./src/DOMBuilders/availabilityPageDOM.js\");\n/* harmony import */ var _DOMBuilders_mainPageDOM__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DOMBuilders/mainPageDOM */ \"./src/DOMBuilders/mainPageDOM.js\");\n/* harmony import */ var _DOMBuilders_requestFormDOM__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DOMBuilders/requestFormDOM */ \"./src/DOMBuilders/requestFormDOM.js\");\n/* harmony import */ var _DOMBuilders_selectorDOMBuilder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./DOMBuilders/selectorDOMBuilder */ \"./src/DOMBuilders/selectorDOMBuilder.js\");\n/* harmony import */ var _validators_availabilityValidator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./validators/availabilityValidator */ \"./src/validators/availabilityValidator.js\");\n/* harmony import */ var _validators_facilityDataValidator__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./validators/facilityDataValidator */ \"./src/validators/facilityDataValidator.js\");\n/* harmony import */ var _validators_requestValidator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./validators/requestValidator */ \"./src/validators/requestValidator.js\");\n/* harmony import */ var _validators_userValidator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./validators/userValidator */ \"./src/validators/userValidator.js\");\n/* harmony import */ var _pageRenderer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./pageRenderer */ \"./src/pageRenderer.js\");\n/* harmony import */ var _temporaryDatabasePostSimulator__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./temporaryDatabasePostSimulator */ \"./src/temporaryDatabasePostSimulator.js\");\n/* harmony import */ var _timeConverter__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./timeConverter */ \"./src/timeConverter.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://pennschedule/./src/index.js?");

/***/ }),

/***/ "./src/pageRenderer.js":
/*!*****************************!*\
  !*** ./src/pageRenderer.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pageRenderer\": () => (/* binding */ pageRenderer)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/events.js\");\n\n/* \npurpose: renders full page contents\n\npublishes: \n\nsubscribes to: \n    pageRenderRequests FROM mainPageDOM, availabilityDOM, adminMainPageDOM, adminUserGeneratorDOM, requestFormDOM\n    mainPage/adminMainPage model builds\n*/\n\nconst pageRenderer = (function(){\n    \n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageModelBuilt\", copyNameAndAdminAccess)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminMainPageModelBuilt\",copyNameAndAdminAccess)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"pageRenderRequested\", renderPageContent);\n    \n    let name;\n    let adminAccess;\n   \n    const dropdownContent = document.querySelector(\"#dropdownContent\");\n    const logOutButton = document.querySelector(\"#logOut\");\n\n    dropdownContent.id = \"dropdownContent\";\n    logOutButton.id = \"logOutButton\";\n\n    //logOut add eventListener\n\n    function renderPageContent(page){\n        const mainContent = document.getElementsByTagName(\"main\")[0];\n        const newMainContent = document.createElement(\"main\");\n\n        newMainContent.appendChild(page);\n        mainContent.replaceWith(newMainContent);\n\n        setName();\n        setDropdownPrivilegeAccess()\n    }\n\n    function copyNameAndAdminAccess(userData){\n        name = userData.name;\n        adminAccess = userData.privilegeLevel\n    }\n\n    function setName(){\n        const nameContent = document.querySelector(\"#userNameLabel\")\n        nameContent.innerText = name;\n    }\n\n    function setDropdownPrivilegeAccess(){\n        if(adminAccess == true){\n            const userPageButton = document.createElement(\"p\");\n            const adminPageButton = document.createElement(\"p\");\n\n            userPageButton.id = \"userPageButton\";\n            adminPageButton.id = \"adminPageButton\"\n        \n            userPageButton.addEventListener(\"click\", publishPageChangeRequest);\n            adminPageButton.addEventListener(\"click\", publishPageChangeRequest);\n\n            dropdownContent.insertBefore(userPageButton,logOutButton);\n            dropdownContent.insertBefore(adminPageButton,logOutButton);\n        }\n\n        function publishPageChangeRequest(){\n            const string = \"PageButton\"\n            const truncateIndex = this.id.indexOf(string);\n            const pageIdentifier = this.id.slice(0, truncateIndex);\n            \n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"pageChangeRequested\", {name, pageIdentifier})\n        }  \n    }\n\n    return {renderPageContent}\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/pageRenderer.js?");

/***/ }),

/***/ "./src/temporaryDatabasePostSimulator.js":
/*!***********************************************!*\
  !*** ./src/temporaryDatabasePostSimulator.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"temporaryDatabasePostSimulator\": () => (/* binding */ temporaryDatabasePostSimulator)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/events.js\");\n\n\nconst temporaryDatabasePostSimulator = (function(){\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"allUsersDataUpdated\", alertAndLogCurrentObject);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminAvailabilityDataUpdated\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminAllTeamsDataUpdated\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminFacilityDataUpdated\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"availabilityDataUpdated\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"myTeamsDataUpdated\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"verifyUpToDateClicked\", alertAndLogCurrentObject)\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"pageChangeRequested\", alertAndLogCurrentObject);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userSeasonChangeRequested\", alertAndLogCurrentObject);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminSeasonChangeRequested\", alertAndLogCurrentObject);\n    \n    function alertAndLogCurrentObject(databaseBoundObject){\n        alert(databaseBoundObject);\n        console.log(databaseBoundObject)\n    }\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/temporaryDatabasePostSimulator.js?");

/***/ }),

/***/ "./src/timeConverter.js":
/*!******************************!*\
  !*** ./src/timeConverter.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"timeValueConverter\": () => (/* binding */ timeValueConverter)\n/* harmony export */ });\n//purpose: convert totalMinutes into clockTime, and clockTime into totalMinutes\n\nconst timeValueConverter = (function(){\n    //no obvious issues here\n    function convertTotalMinutesToTime(totalMins){\n        let standardTime;\n        let hour = Math.floor(totalMins/60)\n        let meridian\n            switch(hour){\n                case 0:\n                    hour += 12\n                    meridian = \"a\"\n                    break;\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                    meridian = \"a\"\n                    break;\n                case 12:\n                    meridian = \"p\"\n                    break;\n                default:\n                    hour -=12\n                    meridian = \"p\"\n                    break;\n            }\n            \n        let mins = totalMins%60\n            if(mins == 0){\n                mins = \"00\"\n            }\n        standardTime = `${hour}:${mins}${meridian}`\n        return standardTime\n    }\n\n    function runConvertTotalMinutesToTime(totalMins){\n        convertTotalMinutesToTime(totalMins)\n    }\n\n    function convertTimeToTotalMinutes(time){\n        const colonIndex = time.indexOf(\":\");\n        const meridian = time[time.length-1]\n        const meridianIndex = time.indexOf(meridian);\n        \n        let hour = Number(time.slice(0, colonIndex));\n            if(meridian == \"p\" && hour != 12){\n                hour +=12;\n            }else if(meridian == \"a\" && hour == 12){\n                hour -=12;\n            }\n        const min = Number(time.slice(colonIndex + 1, meridianIndex));\n        const totalMinutes = hour*60 + min;\n\n        return totalMinutes\n    }\n\n    function runConvertTimeToTotalMinutes(time){\n        convertTimeToTotalMinutes(time)\n    }\n\n    return {runConvertTimeToTotalMinutes, runConvertTotalMinutesToTime}\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/timeConverter.js?");

/***/ }),

/***/ "./src/validators/availabilityValidator.js":
/*!*************************************************!*\
  !*** ./src/validators/availabilityValidator.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"availabilityValidator\": () => (/* binding */ availabilityValidator)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: validator for availabiity/adminAvailability updates\n\nadminAvailbilityModel/availabilityModel is modeled as such:\n\n    {\n       day:[\n           {startTime, endTime, admin},\n           {startTime, endTime, admin}\n       ],\n\n       day:[etc]\n    }, \n\npublishes:\n    successful validations FOR adminMainPageAdminTimeBlockModel/availabiltyModel\n   \nsubscribes to: \n    validation requests FROM adminMainPageAdminTimeBlockModel/availabiltyModel\n*/\n\nconst availabilityValidator = (function(){\n    // no obvious issues\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminAvailabilityValidationRequested\", validateAllAdminAvailability);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userAvailabilityValidationRequested\", validateAllUserAvailability);\n    \n    function validateAllAdminAvailability(availabilityData){\n        if(validateAllInputs(availabilityData) == \"No conflicts\"){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminAvailabilityDataValidated\",availabilityData)\n        }\n    }\n    \n    function validateAllUserAvailability(availabilityData){\n         if(validateAllInputs(availabilityData) == \"No conflicts\"){\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userAvailabilityDataValidated\",availabilityData);\n        }\n    }\n    \n    function validateAllInputs(availabilityData){\n        const string = \"A non-default value must be selected for the following:\";\n        const emptySelectors = [];\n\n        for(let day in availabilityData){\n            let dayString = `${day}`;\n            const dayEmptySelectors = [];\n            day.ForEach(function(prop){\n                if(prop == \"default\"){\n                    dayEmptySelectors.push(prop);\n                    dayString.concat(\"; \", prop)\n                }\n            })\n\n            if(dayEmptySelectors.length > 0){\n                emptySelectors.push(dayEmptySelectors);\n                string.concat(\", \", dayString);\n            }\n        }\n\n        if(emptySelectors.length > 0){\n            alert(string)\n        }else{\n            return \"No conflicts\"\n        }\n    }\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/validators/availabilityValidator.js?");

/***/ }),

/***/ "./src/validators/facilityDataValidator.js":
/*!*************************************************!*\
  !*** ./src/validators/facilityDataValidator.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"facilityDataValidator\": () => (/* binding */ facilityDataValidator)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: validator for facilityData updates\n\nfacilityData object is modeled as such:\n\nobj = {\n    facilityOpen, \n    facilityClose, \n    facilityMaxCapacity\n}\n\npublishes:\n    successful validations FOR adminMainPageFacilityDataModel\n   \nsubscribes to: \n    validation requests FROM adminMainPageFacilityDataModel\n*/\n\nconst facilityDataValidator = (function(){\n    //no obvious issues here\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"adminFacilityDataValidationRequested\", validateAdminFacilityData);\n    \n    function validateAdminFacilityData(facilityData){\n        const string = \"A non-default value must be selected for the following:\";\n        const emptySelectors = [];\n  \n        facilityData.ForEach(function(prop){\n            if(prop == \"default\"){\n                emptySelectors.push(prop);\n            string.concat(\", \", prop);\n            }\n        })\n\n        if(emptySelectors.length > 0){\n            alert(string)\n        }else{\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"adminFacilityDataValidated\", facilityData)\n        }\n    }\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/validators/facilityDataValidator.js?");

/***/ }),

/***/ "./src/validators/requestValidator.js":
/*!********************************************!*\
  !*** ./src/validators/requestValidator.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"requestValidator\": () => (/* binding */ requestValidator)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: validator for single team dataModel updates\n\nuserObject is modeled as such:\nobj = { \n    teamName,\n    teamSize, \n    rank:\n        {\n            myTeams,\n            allTeams\n        },\n    allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n    coach           \n}\n\npublishes:\n    successful validations FOR myTeamsModel\n   \nsubscribes to: \n    validation requests FROM teamRequestModel\n*/\n\n\nconst requestValidator = (function(){\n\n    let facilityData\n\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"validateTeamRequest\", validateAllInputs);\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"mainPageDataBuilt\", setFacilityData)\n\n    function setFacilityData(mainPageModel){\n        facilityData = mainPageModel.facilitySelectors\n    }\n\n    function validateAllInputs(teamDataObj){\n        const errorArray = [];\n\n        validateName(teamDataObj.workingModel, errorArray);\n        validateSize(teamDataObj.workingModel, errorArray);\n        validateSchedulePreferences(teamDataObj.workingModel, errorArray);\n\n        if(errorArray.length > 0){\n            const errorAlert = errorArray.join(\" \");\n            alert(errorAlert);\n        }else{\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"workingModelValidated\", {workingModel : teamDataObj.workingModel, teamRequest : teamDataObj.teamRequest});\n        }\n    }\n\n    function validateName(workingModel, array){\n        const name = workingModel.teamName;\n        const nameRegex = /[^A-Za-z0-9]/;\n        try{\n            if(nameRegex.test(name)){\n                throw(\"Team names can only include letters and numbers (no spaces or symbols).\");\n            }else if(name == \"\"){\n                throw(\"Team name must have a value.\");\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n\n    function validateSize(workingModel,array){\n        const size = workingModel.teamSize;\n        try{\n            if(size == \"default\"){\n                throw(\"Team size must have a value.\")\n            }else if(size > facilityData.facilityMaxCapacity){\n                throw(\"Team size is greater than max size value. Discuss max size value changes with administrator.\")\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n\n    function validateSchedulePreferences(workingModel,array){\n        workingModel.allOpts.forEach(function(option){\n            const optNum = workingModel.allOpts.indexOf(option) + 1;\n            const validatedDayArray = [];\n\n            option.forEach(function(day){\n                const dayNum = option.indexOf(day)+1;\n                catchInvalidInputs();\n                catchConflictingDays();\n\n                function catchInvalidInputs(){\n                    for(const prop in day){\n                        try{\n                            if(day[prop] == \"default\"){\n                                throw(`Option${optNum} Day${dayNum} ${prop} must have a value.`);\n                            }else if((prop == \"startTime\" || prop == \"endTime\") && (day[prop] < facilityData.facilityOpen || day[prop] > facilityData.facilityClose)){\n                                throw(`Option${optNum} Day ${dayNum} ${prop} is outside operating hours. Discuss operating hour changes with administrator.`);\n                            }\n                        }catch(err){\n                            array.push(err)\n                        }  \n                    }\n                }\n\n                function catchConflictingDays(){\n                    try{\n                        validatedDayArray.forEach(function(validatedDay){\n                            const validatedNum = validatedDayArray.indexOf(validatedDay) + 1 ;\n                            if(validatedDay.dayOfWeek == day.dayOfWeek && validatedDay.startTime == day.startTime && validatedDay.inWeiss == day.inWeiss){\n                                throw(`Option${optNum} Day${validatedNum} and Day${dayNum} are duplicates.`);\n                            }else if(validatedDay.dayOfWeek == day.dayOfWeek && day.startTime < validatedDay.startTime && day.endTime > validatedDay.endTime){\n                                throw(`Option${optNum} Day${dayNum}'s session runs through Day${validatedDay}'s session.`);\n                            }else if(validatedDay.dayOfWeek == day.dayOfWeek && day.startTime > validatedDay.startTime && day.startTime < validatedDay.endTime){\n                                throw(`Option${optNum} Day${dayNum}'s start time is in the middle of  Day${validatedDay}'s session.`);\n                            }else if(validatedDay.dayOfWeek == day.dayOfWeek && day.endTime < validatedDay.endTime && day.endTime > validatedDay.startTime){\n                                throw(`Option${optNum} Day${dayNum}'s end time is in the middle of  Day${validatedDay}'s session.`);\n                            }   \n                        })\n                        validatedDayArray.push(day)\n                    }catch(err){\n                        array.push(err)\n                    }\n                }\n            })\n        })\n    }\n\n})();\n\n\n\n//# sourceURL=webpack://pennschedule/./src/validators/requestValidator.js?");

/***/ }),

/***/ "./src/validators/userValidator.js":
/*!*****************************************!*\
  !*** ./src/validators/userValidator.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"userValidator\": () => (/* binding */ userValidator)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ \"./src/events.js\");\n\n\n/*purpose: validator for user dataModel updates\n\nuserObject is modeled as such:\n\n    {\n        name,\n        color,\n        privilegeLevel,\n        teams:{},\n        availability:{},\n        lastVerified\n    }, \n\npublishes:\n    successful validations FOR adminAllUsersDataModel\n   \nsubscribes to: \n    validation requests FROM adminUserDataModel\n*/\n\nconst userValidator = (function(){\n    //no obvious issues\n    _events__WEBPACK_IMPORTED_MODULE_0__.events.subscribe(\"userDataValidationRequested\", validateAllInputs);\n    \n    function validateAllInputs(adminUserData){\n        const errorArray = [];\n\n        validateUserName(adminUserData.newData, errorArray); \n        validateColor(adminUserData.newData, errorArray)\n\n        if(errorArray.length > 0){\n            const errorAlert = errorArray.join(\" \");\n            alert(errorAlert);\n        }else{\n            _events__WEBPACK_IMPORTED_MODULE_0__.events.publish(\"userDataValidated\", adminUserData);\n        }\n    }\n\n    function validateUserName(userModel, array){\n        const userName = userModel.name;\n        const userNameRegex = /[^A-Za-z0-9]/;\n        try{\n            if(userNameRegex.test(userName)){\n                throw(\"User names can only include letters and numbers (no spaces or symbols).\");\n            }else if(userName == \"\"){\n                throw(\"User name must have a value.\");\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n\n    function validateColor(userModel, array){\n        const color = userModel.color;\n        try{\n            if(color == \"#000000\"){\n                throw(\"Color must have a value not equal to black. Black is default value, and must be changed.\")\n            }\n        }catch(err){\n            array.push(err)\n        }\n\n    }\n\n\n})()\n\n\n\n//# sourceURL=webpack://pennschedule/./src/validators/userValidator.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;