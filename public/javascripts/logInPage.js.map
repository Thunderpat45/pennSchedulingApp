{"version":3,"file":"logInPage.js","mappings":"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","sources":["webpack://pennschedule/./src/events.js","webpack://pennschedule/./src/login.js","webpack://pennschedule/./src/databasePost.js","webpack://pennschedule/./src/loginPage/loginPageRender.js"],"sourcesContent":["\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\nexport {events}","import {events} from \"../src/events\"\n\nimport { databasePost } from \"../src/databasePost\";\nimport { loginPageRender } from \"../src/loginPage/loginPageRender\";\n\nwindow.onload = setScriptData\nasync function setScriptData(){ \n    try{\n        const mediaQuery = window.matchMedia('(max-width: 485px)');\n        checkWidth(mediaQuery);\n        mediaQuery.addEventListener('change', checkWidth)\n    }catch(err){\n        console.log(err)\n    }\n}\n\nfunction checkWidth(e){//mobile devices don't always have xlsx reader, so attempting to restrict viewport, but not having success\n    if(e.matches){\n        const body = document.querySelector('body');\n        const newText = document.createElement('p');\n        newText.innerText = 'This program is designed for PCs, laptops and tablets, due to general support for XLSX documents on those platforms. Please use one of the recommended devices for best experience.'\n        const children = Array.from(document.querySelectorAll('body *'));\n        if(children.length >0){\n            children.forEach(function(child){\n                child.remove();\n            })\n        }\n\n        body.appendChild(newText)\n        throw('Window size not appropriate')\n    }\n}","import {events} from \"../src/events\"\n\nconst databasePost = (function(){\n\n    events.subscribe(\"userUpdateRequested\", updateUserData);\n    events.subscribe(\"newUserAdditionRequested\", addUserData);\n    events.subscribe(\"deleteUserRequested\", deleteUserData);\n    events.subscribe('adminBlockUpdateRequested', updateAdminBlockData);\n    events.subscribe('newAdminBlockAdditionRequested', addAdminBlockData)\n    events.subscribe('adminBlockDeleteRequested', deleteAdminBlockData);\n    events.subscribe('availabilityBlockUpdateRequested', updateUserBlockData);\n    events.subscribe('newAvailabilityBlockAdditionRequested', addUserBlockData)\n    events.subscribe('availabilityBlockDeleteRequested', deleteUserBlockData);\n    events.subscribe('teamUpdateRequested', updateTeamData);\n    events.subscribe('newTeamAdditionRequested', addTeamData)\n    events.subscribe('teamDataDeleteRequested', deleteTeamData)\n    events.subscribe('teamVerificationUpdateRequested', updateTeamVerificationData);\n    events.subscribe('userAllTeamsVerificationUpdateRequested', updateUserVerificationData);\n    events.subscribe(\"adminFacilityDataUpdateRequested\", updateFacilityData);\n    events.subscribe('teamEnabledUpdateRequested', updateTeamEnabledStatus)\n\n    events.subscribe('myTeamsOrderDataUpdateRequested', updateMyTeamsOrder)\n    events.subscribe('allTeamsOrderDataUpdateRequested', updateAllTeamsOrder);\n\n    events.subscribe('scheduleBuildRequested', buildSchedule)\n    \n\n    async function updateFacilityData(databaseBoundObject){ \n        try{\n            await fetch('adminHome/facilitySettings', {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n            events.publish(\"facilityDataSaved\")\n        }catch(err){\n            console.log(err)\n        }\n       \n    }\n\n    async function updateUserData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${_id}`, {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){ \n                events.publish(\"editUserDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function addUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){\n                const newUser = await userDataResponse.json();  \n                events.publish(\"newUserDataSaved\", newUser)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserData(userId){\n        const idObj = {_id: userId}\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${userId}`, {\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(userDataResponse.status == 404){\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                alert(errors);\n            }else if(userDataResponse.status == 303){\n                const {userId, season} = await userDataResponse.json();\n                const pseudoAnchor = document.createElement('a');\n                pseudoAnchor.href = `/user/${userId}/${season}/adminHome`;\n                pseudoAnchor.click();\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAdminBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${_id}`, {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAdminBlockDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function addAdminBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('adminHome/timeBlock', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAdminBlockDataSaved\", newAdminBlock)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteAdminBlockData(blockData){\n        const idObj = {_id: blockData._id}\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${blockData._id}`, {\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"adminBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateUserBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${_id}`, {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n               \n                const errors = await blockDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAvailabilityBlockDataSaved\") \n            }\n           \n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function addUserBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('home/timeBlock', { \n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAvailabilityBlockDataSaved\", newAdminBlock)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserBlockData(blockData){\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${blockData._id}`, {\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(blockData)\n    \n            });\n\n            if(blockDataResponse.status == 404){\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"availabilityBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const teamDataResponse = await fetch(`home/team/${_id}`, {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"teamDataValidationFailed\", {errors, origin})\n            }else if(teamDataResponse.status == 200){ \n                events.publish(\"editTeamDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function addTeamData(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch('home/team', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"teamDataValidationFailed\", {errors, origin})\n            }else if(teamDataResponse.status == 200){\n                const newTeam = await teamDataResponse.json();  \n                events.publish(\"newTeamDataSaved\", newTeam)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteTeamData(teamId){\n        const idObj = {_id: teamId}\n        try{\n            const teamDataResponse = await fetch(`home/team/${teamId}`, {\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json();\n                alert(errors);\n            }else if(teamDataResponse.status == 303){\n                const {userId, season} = await teamDataResponse.json();\n                const pseudoAnchor = document.createElement('a');\n                pseudoAnchor.href = `/user/${userId}/${season}/home`;\n                pseudoAnchor.click();\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamVerificationData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const teamDataResponse = await fetch(`home/team/${_id}/verification`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"teamVerificationSaved\", databaseBoundObject)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateUserVerificationData(timeData){\n        const timeDataObj = {lastVerified: timeData}\n        try{\n            const teamDataResponse = await fetch(`home/allTeamsVerification`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(timeDataObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"allTeamsVerificationSaved\", timeData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateMyTeamsOrder(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch(`home/allTeamsOrder`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"myTeamsOrderChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAllTeamsOrder(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch(`adminHome/allTeamsOrder`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"allTeamsOrderChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamEnabledStatus(_id){\n        const idObj = {_id}\n        try{\n            const teamDataResponse = await fetch(`adminHome/team/${_id}/enabledStatus`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"teamEnableStatusChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function buildSchedule(){\n        try{\n            const scheduleResponse = await fetch(`adminHome/schedule`, {\n                method:'GET',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n            });\n\n            if(scheduleResponse.status == 404){\n                throw('404 error!')\n            }else if(scheduleResponse.status == 400){\n                throw('400 error!')\n            }else if(scheduleResponse.status == 200){  \n                const data = await scheduleResponse.blob();\n                const anchor = document.createElement('a');\n                anchor.href = window.URL.createObjectURL(data);\n                anchor.download = 'schedule.xlsx';\n                anchor.click();\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n})();\n\nexport {databasePost}","\nconst loginPageRender = (function(){\n\n    const form = document.querySelector('#logInForm')\n    const userNameEntry = document.querySelector('#logInUserName');\n    const passWordEntry = document.querySelector('#logInPassword');\n    const submitButton = document.querySelector('#loginAttemptButton');\n    const userDemoButton = document.querySelector('#userDemoLoginButton');\n    const adminDemoButton = document.querySelector('#adminDemoLoginButton')\n    const errorList = document.querySelector('#errorList')\n\n    setEventListeners();\n\n    function setEventListeners(){\n\n        submitButton.addEventListener('click', submitLogInAttempt)\n        userDemoButton.addEventListener('click', logInDemoUser);\n        adminDemoButton.addEventListener('click', logInAdminUser)\n    }\n\n    async function logInDemoUser(e){\n        unrenderErrorList()\n\n        userNameEntry.value = \"user1\";\n        passWordEntry.value = \"usero1\";\n\n        const errors = testSubmitInput()\n        if(errors.length > 0){\n            e.preventDefault();\n            errors.forEach(function(error){\n                const errorNode = document.createElement('li');\n                errorNode.innerText = error\n                errorList.appendChild(errorNode)\n            })\n        }else{\n            try{\n                form.submit();\n            }catch(err){\n                if(err.status == 404){\n                    throw('404 error!')\n                }else if(err.status == 400){\n                    throw('400 error!')\n                }else if(err.status == 401){\n                    const errorMessage = await err.json();\n                    const errorArray = [errorMessage]\n                    renderLoginPage(errorArray)\n                }\n            }\n        }\n    }\n    \n\n    async function logInAdminUser(e){\n        unrenderErrorList()\n\n        userNameEntry.value = \"admin2\";\n        passWordEntry.value = \"admino2\";\n\n        const errors = testSubmitInput()\n        if(errors.length > 0){\n            e.preventDefault();\n            errors.forEach(function(error){\n                const errorNode = document.createElement('li');\n                errorNode.innerText = error\n                errorList.appendChild(errorNode)\n            })\n        }else{\n            try{\n                form.submit();\n            }catch(err){\n                if(err.status == 404){\n                    throw('404 error!')\n                }else if(err.status == 400){\n                    throw('400 error!')\n                }else if(err.status == 401){\n                    const errorMessage = await err.json();\n                    const errorArray = [errorMessage]\n                    renderLoginPage(errorArray)\n                }\n            }\n        }\n    }\n\n\n    async function submitLogInAttempt(e){\n        unrenderErrorList()\n\n        const errors = testSubmitInput()\n        if(errors.length > 0){\n            e.preventDefault();\n            errors.forEach(function(error){\n                const errorNode = document.createElement('li');\n                errorNode.innerText = error\n                errorList.appendChild(errorNode)\n            })\n        }else{\n            try{\n                form.submit();\n            }catch(err){\n                if(err.status == 404){\n                    throw('404 error!')\n                }else if(err.status == 400){\n                    throw('400 error!')\n                }else if(err.status == 401){\n                    const errorMessage = await err.json();\n                    const errorArray = [errorMessage]\n                    renderLoginPage(errorArray)\n                }\n            }\n        }\n    }\n\n\n\n    function testSubmitInput(){\n        const errorArray = []\n    \n        const regex = /[^A-Za-z0-9]/;\n        if(regex.test(userNameEntry.value) || regex.test(passWordEntry.value)){\n                const errorText = 'Invalid username/password combination';\n                errorArray.push(errorText)\n        }\n\n        if(!userNameEntry.value){\n                const errorText = 'Username must have value';\n                errorArray.push(errorText)\n        }\n\n        if(!passWordEntry.value){\n                const errorText = 'Password must have value';\n                errorArray.push(errorText)\n        }\n\n        return errorArray\n    }   \n\n    function renderLoginPage(errors){\n        userNameEntry.value = \"\";\n        passWordEntry.value = \"\";\n\n        unrenderErrorList()\n\n        if(errors.length>0){\n            errors.forEach(function(error){\n                const errorNode = document.createElement('li');\n                errorNode.innerText = error\n                errorList.appendChild(errorNode)\n            })\n        }\n    }\n\n    function unrenderErrorList(){\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n    }\n})()\n\nexport {loginPageRender}"],"names":["events","subscribe","eventName","fn","this","push","unsubscribe","i","length","splice","publish","data","forEach","checkWidth","e","matches","body","document","querySelector","newText","createElement","innerText","children","Array","from","querySelectorAll","child","remove","appendChild","async","databaseBoundObject","_id","userDataResponse","fetch","method","headers","JSON","stringify","status","errors","json","origin","err","console","log","newUser","userId","idObj","alert","season","pseudoAnchor","href","click","blockDataResponse","newAdminBlock","blockData","teamDataResponse","newTeam","teamId","timeData","timeDataObj","lastVerified","scheduleResponse","blob","anchor","window","URL","createObjectURL","download","form","userNameEntry","passWordEntry","submitButton","userDemoButton","adminDemoButton","errorList","testSubmitInput","errorArray","regex","test","value","errorText","renderLoginPage","unrenderErrorList","error","errorNode","firstChild","removeChild","addEventListener","preventDefault","submit","onload","mediaQuery","matchMedia"],"sourceRoot":""}