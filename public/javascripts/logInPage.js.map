{"version":3,"file":"logInPage.js","mappings":";;;;;;;;;;;;;;;AAAoC;;AAEpC;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,YAAY,uDAAc;AAC1B,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,mEAAmE,IAAI,KAAK;AAC5E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,mEAAmE,OAAO,KAAK;AAC/E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,yEAAyE,IAAI,KAAK;AAClF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,yEAAyE,cAAc,KAAK;AAC5F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA,oEAAoE,IAAI,KAAK;AAC7E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,oEAAoE,cAAc,KAAK;AACvF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,8DAA8D,IAAI,KAAK;AACvE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,8DAA8D,OAAO,KAAK;AAC1E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,mEAAmE,IAAI;AACvE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;;AAEhB,uDAAuD;AACvD;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;ACtgBD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3BA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,iBAAiB;AACjB,2CAA2C;AAC3C;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;UC1FD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNoC;;AAEe","sources":["webpack://pennschedule/./src/databasePost.js","webpack://pennschedule/./src/events.js","webpack://pennschedule/./src/loginPage/loginPageRender.js","webpack://pennschedule/webpack/bootstrap","webpack://pennschedule/webpack/runtime/define property getters","webpack://pennschedule/webpack/runtime/hasOwnProperty shorthand","webpack://pennschedule/webpack/runtime/make namespace object","webpack://pennschedule/./src/login.js"],"sourcesContent":["import {events} from \"../src/events\"\n\nconst databasePost = (function(){\n\n    events.subscribe(\"userUpdateRequested\", updateUserData);\n    events.subscribe(\"newUserAdditionRequested\", addUserData);\n    events.subscribe(\"deleteUserRequested\", deleteUserData);\n    events.subscribe('adminBlockUpdateRequested', updateAdminBlockData);\n    events.subscribe('newAdminBlockAdditionRequested', addAdminBlockData)\n    events.subscribe('adminBlockDeleteRequested', deleteAdminBlockData);\n    events.subscribe('availabilityBlockUpdateRequested', updateUserBlockData);\n    events.subscribe('newAvailabilityBlockAdditionRequested', addUserBlockData)\n    events.subscribe('availabilityBlockDeleteRequested', deleteUserBlockData);\n    events.subscribe('teamUpdateRequested', updateTeamData);\n    events.subscribe('newTeamAdditionRequested', addTeamData)\n    events.subscribe('teamDataDeleteRequested', deleteTeamData)\n    events.subscribe('teamVerificationUpdateRequested', updateTeamVerificationData);\n    events.subscribe('userAllTeamsVerificationUpdateRequested', updateUserVerificationData);\n    events.subscribe(\"adminFacilityDataUpdateRequested\", updateFacilityData);\n    events.subscribe('teamEnabledUpdateRequested', updateTeamEnabledStatus)\n\n    events.subscribe('myTeamsOrderDataUpdateRequested', updateMyTeamsOrder)\n    events.subscribe('allTeamsOrderDataUpdateRequested', updateAllTeamsOrder);\n\n    //events.subscribe('loginAttemptRequested', postLoginAttempt)\n   \n\n    async function updateFacilityData(databaseBoundObject){ \n        try{\n            await fetch('adminHome/facilitySettings', {\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n            events.publish(\"facilityDataSaved\")\n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n       \n    }\n\n    async function updateUserData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${_id}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){ \n                events.publish(\"editUserDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){\n                const newUser = await userDataResponse.json();  \n                events.publish(\"newUserDataSaved\", newUser)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserData(userId){\n        const idObj = {_id: userId}\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${userId}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                alert(errors);\n            }else if(userDataResponse.status == 200){\n                events.publish(\"userDataDeleted\", userId)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAdminBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${_id}`, { //change the path\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAdminBlockDataSaved\") //find receiver\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addAdminBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('adminHome/timeBlock', {  //get rid of hard coded season as soon as possible\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAdminBlockDataSaved\", newAdminBlock) //find listener\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteAdminBlockData(blockData){\n        const idObj = {_id: blockData._id}\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${blockData._id}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"adminBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    ///\n    async function updateUserBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${_id}`, { //change the path\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n               \n                const errors = await blockDataResponse.json();\n                console.log(errors)\n                const origin = \"edit\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAvailabilityBlockDataSaved\") \n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('home/timeBlock', { \n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAvailabilityBlockDataSaved\", newAdminBlock)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserBlockData(blockData){\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${blockData._id}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(blockData)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"availabilityBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const teamDataResponse = await fetch(`home/team/${_id}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'PUT',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"teamDataValidationFailed\", {errors, origin})\n            }else if(teamDataResponse.status == 200){ \n                events.publish(\"editTeamDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addTeamData(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch('home/team', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"teamDataValidationFailed\", {errors, origin})\n            }else if(teamDataResponse.status == 200){\n                const newTeam = await teamDataResponse.json();  \n                events.publish(\"newTeamDataSaved\", newTeam)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteTeamData(teamId){\n        const idObj = {_id: teamId}\n        try{\n            const teamDataResponse = await fetch(`home/team/${teamId}`, { //change the hard-coded id's into userspecific id's SOON\n                method:'DELETE',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                const errors = await teamDataResponse.json();\n                alert(errors);\n            }else if(teamDataResponse.status == 200){\n                events.publish(\"teamDataDeleted\", teamId)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamVerificationData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const teamDataResponse = await fetch(`home/team/${_id}/verification`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"teamVerificationSaved\", databaseBoundObject)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateUserVerificationData(timeData){\n        const timeDataObj = {lastVerified: timeData}\n        try{\n            const teamDataResponse = await fetch(`home/allTeamsVerification`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(timeDataObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"allTeamsVerificationSaved\", timeData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateMyTeamsOrder(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch(`home/allTeamsOrder`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"myTeamsOrderChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAllTeamsOrder(databaseBoundObject){\n        try{\n            const teamDataResponse = await fetch(`adminHome/allTeamsOrder`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"allTeamsOrderChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateTeamEnabledStatus(_id){\n        const idObj = {_id}\n        try{\n            const teamDataResponse = await fetch(`adminHome/team/${_id}/enabledStatus`, {\n                method:'PATCH',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(teamDataResponse.status == 404){\n                throw('404 error!')\n            }else if(teamDataResponse.status == 400){\n                throw('400 error!')\n            }else if(teamDataResponse.status == 200){  \n                events.publish(\"teamEnableStatusChangeSaved\")\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    // async function postLoginAttempt(databaseBoundObject){\n    //     try{\n    //         const logInAttemptResponse = await fetch(`/logIn`, {\n    //             method:'POST',\n    //             headers:{\n    //                 'Content-Type': 'application/json'\n          \n    //             },\n    //             body: JSON.stringify(databaseBoundObject)\n    \n    //         });\n\n    //         if(logInAttemptResponse.status == 404){ //check these\n    //             throw('404 error!')\n    //         }else if(logInAttemptResponse.status == 400){\n    //             throw('400 error!')\n    //         }else if(logInAttemptResponse.status == 401){\n    //             const errorMessage = await logInAttemptResponse.json();\n    //             const errorArray = [errorMessage]\n    //             events.publish('renderLoginPageRequested', errorArray)\n    //         }\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n    // }\n\n})();\n\nexport {databasePost}","\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\nexport {events}","\nconst loginPageRender = (function(){\n\n    const form = document.querySelector('#logInForm')\n    const userNameEntry = document.querySelector('#logInUserName');\n    const passWordEntry = document.querySelector('#logInPassword');\n    const submitButton = document.querySelector('#loginAttemptButton');\n    const errorList = document.querySelector('#errorList')\n\n    setEventListeners();\n\n    function setEventListeners(){\n\n        submitButton.addEventListener('click', submitLogInAttempt)\n\n        async function submitLogInAttempt(e){\n            unrenderErrorList()\n\n            const errors = testSubmitInput()\n            if(errors.length > 0){\n                e.preventDefault();\n                errors.forEach(function(error){\n                    const errorNode = document.createElement('li');\n                    errorNode.innerText = error\n                    errorList.appendChild(errorNode)\n                })\n            }else{\n                try{\n                    form.submit();\n                }catch(err){\n                    if(err.status == 404){ //check these\n                        throw('404 error!')\n                    }else if(err.status == 400){\n                        throw('400 error!')\n                    }else if(err.status == 401){\n                        const errorMessage = await err.json();\n                        const errorArray = [errorMessage]\n                        renderLoginPage(errorArray)\n                    }\n                }\n            }\n        }\n    }\n\n    function testSubmitInput(){\n        const errorArray = []\n    \n        const regex = /[^A-Za-z0-9]/;\n        if(regex.test(userNameEntry.value) || regex.test(passWordEntry.value)){\n                const errorText = 'Invalid username/password combination';\n                errorArray.push(errorText)\n        }\n\n        if(!userNameEntry.value){\n                const errorText = 'Username must have value';\n                errorArray.push(errorText)\n        }\n\n        if(!passWordEntry.value){\n                const errorText = 'Password must have value';\n                errorArray.push(errorText)\n        }\n\n        return errorArray\n    }   \n\n    function renderLoginPage(errors){\n        userNameEntry.value = \"\";\n        passWordEntry.value = \"\";\n\n        unrenderErrorList()\n\n        if(errors.length>0){\n            errors.forEach(function(error){\n                const errorNode = document.createElement('li');\n                errorNode.innerText = error\n                errorList.appendChild(errorNode)\n            })\n        }\n\n    }\n\n    function unrenderErrorList(){\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n    }\n\n})()\n\nexport {loginPageRender}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {events} from \"../src/events\"\n\nimport { databasePost } from \"../src/databasePost\";\nimport { loginPageRender } from \"../src/loginPage/loginPageRender\";"],"names":[],"sourceRoot":""}