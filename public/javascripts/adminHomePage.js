(()=>{"use strict";const e={events:{},subscribe:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){if(this.events[e])for(let i=0;i<this.events[e].length;i++)if(this.events[e][i]===t){this.events[e].splice(i,1);break}},publish:function(e,t){this.events[e]&&this.events[e].forEach((function(e){e(t)}))}},t=(e.subscribe("adminDataSet",(function(){document.querySelector("#adminMainPageFacilitySelectorsEditButton").addEventListener("click",(function(){e.publish("editFacilityDataClicked")})),function(){const t=document.querySelector("#adminUsersGridAddUser"),i=Array.from(document.querySelectorAll(".adminUserGridUser"));i.length>0&&i.forEach((function(t){const i=t.dataset.userid,a=t.querySelector(".adminUserGridUserEditButton"),n=t.querySelector(".adminUserGridUserDeleteButton");a.addEventListener("click",(function(){e.publish("editUserClicked",i)})),n.addEventListener("click",(function(){confirm("Delete this user?")&&e.publish("deleteUserRequested",i)}))})),t.addEventListener("click",(function(){e.publish("addUserClicked")}))}(),Array.from(document.querySelector("#adminMainPageAddAvailabilityBlockAllUsersGrid").children).forEach((function(t){const i=t.querySelector("h3").innerText;t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockAddButton").addEventListener("click",(function(){e.publish("addAdminTimeBlockClicked",i)}));const a=Array.from(t.querySelectorAll(".adminMainPageAddAvailabilityBlockAllUsersAllBlocks > div"));a.length>0&&a.forEach((function(t){const a=t.dataset.timeblockid,n=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton"),o=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton");n.addEventListener("click",(function(){e.publish("editAdminAvailabilityClicked",{day:i,_id:a})})),o.addEventListener("click",(function(){confirm("Delete this time block?")&&e.publish("deleteAdminAvailabilityClicked",{day:i,_id:a})}))}))})),Array.from(document.querySelectorAll("#adminMainPageTeamGrid > div")).forEach((function(t){const i=t.dataset.teamid;t.querySelector(".adminMainPageTeamGridTeamDisableButton").addEventListener("click",(function(){e.publish("enabledStatusChangeClicked",i)}))})),document.querySelector("#modifyAdminRanksButton").addEventListener("click",(function(){e.publish("adminTeamOrderChangeClicked")})),document.querySelector("#runScheduleBuilderButton").addEventListener("click",(function(){e.publish("scheduleBuildRequested")}))})),{runConvertTimeToTotalMinutes:function(e){return function(e){const t=e.indexOf(":"),i=e[e.length-1],a=e.indexOf(i);let n=Number(e.slice(0,t));return"p"==i&&12!=n?n+=12:"a"==i&&12==n&&(n-=12),60*n+Number(e.slice(t+1,a))}(e)},runConvertTotalMinutesToTime:function(e){return function(e){let t,i,a=Math.floor(e/60);a>0&&a<12?i="a":0==a?(a+=12,i="a"):(12==a||(a-=12),i="p");let n=e%60;return 0==n&&(n="00"),t=`${a}:${n}${i}`,t}(e)}}),i=(e.subscribe("renderUpdatedFacilityData",(function(e){!function(e,i){e.main.dataset.facilityDataId=i._id,e.openTimeText.innerText=`Open Time: ${t.runConvertTotalMinutesToTime(i.facilityOpen)}`,e.closeTimeText.innerText=`Close Time: ${t.runConvertTotalMinutesToTime(i.facilityClose)}`,e.maxCapacityText.innerText=`Max Capacity: ${i.facilityMaxCapacity}`}({main:document.querySelector("#facilityDataGrid"),openTimeText:document.querySelector("#adminMainPageFacilityHoursSelectorsOpen > p"),closeTimeText:document.querySelector("#adminMainPageFacilityHoursSelectorsClose > p"),maxCapacityText:document.querySelector("#adminMainPageFacilityCapacitySelectorsMax > p")},e)})),function(){const i={startTime:{start:null,end:null,increment:15},endTime:{start:null,end:null,increment:15},teamSize:{start:5,end:null,increment:5},facilityOpen:{start:240,end:1200,increment:15},facilityClose:{start:300,end:1260,increment:15},facilityMaxCapacity:{start:10,end:150,increment:5},dayOfWeek:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],inWeiss:["yes","no"]};function a(e){let t;t=Object.prototype.hasOwnProperty.call(e,"facilityData")?e.facilityData:e,i.startTime.start=t.facilityOpen,i.endTime.start=t.facilityOpen+30,i.startTime.end=t.facilityClose-30,i.endTime.end=t.facilityClose,i.teamSize.end=t.facilityMaxCapacity}function n(e,a){const n=i[e];for(let i=n.start;i<=n.end;i+=n.increment){const n=document.createElement("option");n.value=i,n.innerText="teamSize"==e||"facilityMaxCapacity"==e?i:t.runConvertTotalMinutesToTime(i),a.appendChild(n)}}function o(){const e=Number(this.value);Array.from(this.parentElement.nextElementSibling.lastElementChild.children).forEach((function(t){const i=Number(t.value);t.disabled=i<e+30||"default"==i}))}function r(){Array.from(this.children)[0].disabled=!0}return e.subscribe("adminDataFetched",a),e.subscribe("userDataFetched",a),e.subscribe("setNewSelectorRanges",a),{runBuildSelector:function(e){return function(e){const t=document.createElement("select");t.classList.add(e),t.classList.add("selector");const a=document.createElement("option");switch(a.value="default",a.innerText="--",t.appendChild(a),e){case"dayOfWeek":case"inWeiss":!function(e,t){i[e].forEach((function(e){const i=document.createElement("option");i.value=e,i.innerText=e,t.appendChild(i)}))}(e,t);break;case"teamSize":case"endTime":case"facilityClose":case"facilityMaxCapacity":n(e,t);break;case"startTime":case"facilityOpen":n(e,t),t.addEventListener("change",o)}return t.addEventListener("change",r),t}(e)}}}());function a(e){if(e.matches){const e=document.querySelector("body"),t=document.createElement("p");t.innerText="This program is designed for PCs, laptops and tablets, due to general support for XLSX documents on those platforms. Please use one of the recommended devices for best experience.";const i=Array.from(document.querySelectorAll("body *"));throw i.length>0&&i.forEach((function(e){e.remove()})),e.appendChild(t),"Window size not appropriate"}}(function(){e.subscribe("adminFacilityDataEditRequested",s),e.subscribe("adminFacilityDataChangesCancelled",l),e.subscribe("facilityDataSaved",l),e.subscribe("renderFacilityDataValidationErrors",(function(e){l(),s(e);const t=document.querySelector("#adminMainPageFacilityGeneralErrorList");if(t.firstChild)for(;t.firstChild;)t.removeChild(t.firstChild);e.errors.forEach((function(e){const i=document.createElement("li");i.innerText=e,t.appendChild(i)}))}));const t=document.querySelector("body"),a=document.querySelector("#adminMainPage"),n=document.querySelector("#entryFormDiv"),o=document.querySelector("#entryForm"),r=document.createElement("div");function s(s){const l=function(){const e=document.querySelector("#adminFacilityDataFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelectorAll(".selector"),a=t.querySelector("#adminMainPageFacilitySelectorsSaveButton"),n=t.querySelector("#adminMainPageFacilitySelectorsCancelButton");return{content:t,facilitySelectors:i,saveButton:a,cancelButton:n}}();var c;!function(t,a){t.facilitySelectors.forEach((function(t){const n=Array.from(t.classList)[0],o=i.runBuildSelector(n),r=o.querySelector(`option[value = "${a.facilityData[n]}"]`);r.selected=!0,"default"!=r.value&&(o.firstChild.disabled=!0),o.addEventListener("change",(function(){const t=n,i=Number(o.value);e.publish("modifyFacilitySelectorValue",{modifiedSelector:t,value:i})})),t.replaceWith(o)}))}(l,s),(c=l).saveButton.addEventListener("click",(function(){confirm("Changing facility settings from a longer to a shorter day can create bugs if other users are not informed to adjust. Please speak to other users to notify them of changes before running the schedule builder. Continue?")?e.publish("updateFacilityDataClicked"):e.publish("cancelFacilityDataChangesClicked")})),c.cancelButton.addEventListener("click",(function(){e.publish("cancelFacilityDataChangesClicked")})),o.appendChild(l.content),n.classList.toggle("formHidden"),a.appendChild(r),r.appendChild(n),t.style.overflowY="hidden"}function l(){if(o.firstChild)for(;o.firstChild;)o.removeChild(o.firstChild);n.classList.toggle("formHidden"),r.replaceWith(...r.childNodes),t.style.overflowY="scroll"}r.id="overlayDiv"})(),function(){let t,i;e.subscribe("adminDataFetched",(function(e){t=structuredClone(e.facilityData),i=structuredClone(t)})),e.subscribe("facilityDataSaved",(function(){t=structuredClone(i),e.publish("setNewSelectorRanges",i),e.publish("renderUpdatedFacilityData",i),e.publish("facilityDataAvailabiltyUpdateComparisonRequested",i)})),e.subscribe("editFacilityDataClicked",(function(){e.publish("adminFacilityDataEditRequested",{facilityData:i})})),e.subscribe("modifyFacilitySelectorValue",(function(e){const{modifiedSelector:t,value:a}=e;i[t]=Number(a)})),e.subscribe("updateFacilityDataClicked",(function(){e.publish("adminFacilityDataValidationRequested",i)})),e.subscribe("adminFacilityDataValidated",(function(){e.publish("adminFacilityDataUpdateRequested",i)})),e.subscribe("cancelFacilityDataChangesClicked",(function(){i=structuredClone(t),e.publish("adminFacilityDataChangesCancelled")})),e.subscribe("facilityDataValidationFailed",(function(t){const a=t;e.publish("renderFacilityDataValidationErrors",{facilityData:i,errors:a})}))}(),e.subscribe("adminFacilityDataValidationRequested",(function(t){const i=[];for(let e in t)if("default"==t[e]){const t="A non-default value must be selected for: ";t.concat(e),i.push(t)}t.facilityOpen>=t.facilityClose&&i.push("Start time overlaps with end time!"),i.length>0?e.publish("facilityDataValidationFailed",i):e.publish("adminFacilityDataValidated",t)})),e.subscribe("renderUpdatedUserData",(function(t){const i=document.querySelector("#adminUsersGrid"),a=document.createElement("div");a.id="adminUsersGrid",t.forEach((function(t){const i=function(t){const i=function(){const e=document.querySelector("#adminMainPageUserGridUserTemplate"),t=document.importNode(e.content,!0),i=t.querySelector(".adminUserGridUser"),a=t.querySelector(".adminUserGridUserName"),n=t.querySelector(".adminUserGridUserPrivilege"),o=t.querySelector(".adminUserGridUserLastVerified"),r=t.querySelector(".adminUserColor"),s=t.querySelector(".adminUserGridUserEditButton"),l=t.querySelector(".adminUserGridUserDeleteButton");return{content:t,div:i,name:a,privilege:n,lastVerified:o,colorBlock:r,editButton:s,deleteButton:l}}();return function(e,t){e.div.setAttribute("data-userId",t._id),e.name.innerText=`Name: ${t.name}`,t.privilegeLevel?e.privilege.innerText="Privilege: Admin":e.privilege.innerText="Privilege: User",e.lastVerified.innerText=`Last Verified: ${t.lastVerified}`,e.colorBlock.style.backgroundColor=t.color}(i,t),function(t,i){t.editButton.addEventListener("click",(function(){e.publish("editUserClicked",i._id)})),t.deleteButton.addEventListener("click",(function(){confirm("Delete this user?")&&e.publish("deleteUserRequested",i._id)}))}(i,t),i.content}(t);a.appendChild(i)})),i.replaceWith(a)})),function(){e.subscribe("userDataLoaded",r),e.subscribe("newUserModelBuilt",r),e.subscribe("userDataChangesCancelled",s),e.subscribe("editUserDataSaved",s),e.subscribe("newUserDataSaved",s),e.subscribe("renderUserValidationErrors",(function(e){const{data:t,origin:i}=e,a={userData:t,origin:i};s(),r(a);const n=document.querySelector("#userGeneratorGeneralErrorList");if(n.firstChild)for(;n.firstChild;)n.removeChild(n.firstChild);e.errors.forEach((function(e){const t=document.createElement("li");t.innerText=e,n.appendChild(t)}))}));const t=document.querySelector("body"),i=document.querySelector("#adminMainPage"),a=document.querySelector("#entryFormDiv"),n=document.querySelector("#entryForm"),o=document.createElement("div");function r(r){const s=function(){const e=document.querySelector("#adminUserGeneratorTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("#userGeneratorName"),a=t.querySelector("#userGeneratorPrivilege"),n=t.querySelector("#userGeneratorColor"),o=t.querySelector("#userGeneratorPassword"),r=t.querySelector("#userGeneratorPasswordDiv"),s=t.querySelector("#userGeneratorSaveButton"),l=t.querySelector("#userGeneratorCancelButton");return{content:t,name:i,privilege:a,color:n,saveButton:s,cancelButton:l,password:o,passwordDiv:r}}();!function(e,t){e.name.value=t.name,1==t.privilegeLevel&&(e.privilege.checked=!0),e.color.value=t.color}(s,r.userData),function(t,i){const a=i.userData,n=i.origin;"edit"==n&&t.passwordDiv.remove(),t.saveButton.addEventListener("click",(function(){0!=function(){try{if(""!=a.name&&t.name.value!=a.name){if(!confirm(`If you submit changes, this will change the user name from ${a.name} to ${t.name.value}. Proceed? `))throw t.name.value=a.name,!1;e.publish("modifyUserNameValue",t.name.value)}else a.name!=t.name.value&&e.publish("modifyUserNameValue",t.name.value)}catch(e){return e}}()&&(a.color!=t.color.value&&e.publish("modifyUserColorValue",t.color.value.toUpperCase()),t.privilege.checked!=a.privilegeLevel&&e.publish("modifyUserPrivilegeLevelValue",t.privilege.checked),document.querySelector("#userGeneratorPassword")&&e.publish("modifyUserPasswordValue",t.password.value),e.publish("updateUserDataClicked",n))})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelUserDataChangesClicked")}))}(s,r),n.appendChild(s.content),a.classList.toggle("formHidden"),i.appendChild(o),o.appendChild(a),t.style.overflowY="hidden"}function s(){if(n.firstChild)for(;n.firstChild;)n.removeChild(n.firstChild);a.classList.toggle("formHidden"),o.replaceWith(...o.childNodes),t.style.overflowY="scroll"}o.id="overlayDiv"}(),function(){let t,i;e.subscribe("adminDataFetched",(function(e){t=structuredClone(e.allUsers),i=structuredClone(t)})),e.subscribe("updateAllUsersModel",(function(a){const n=i.findIndex((function(e){return e._id==a._id}));-1!=n?i[n]=a:i.push(a),t=structuredClone(i),e.publish("renderUpdatedUserData",i)})),e.subscribe("deleteUserClicked",(function(t){const a=i.filter((function(e){return t==e._id}))[0];e.publish("deleteUser",a)})),e.subscribe("editUserClicked",(function(t){const a=i.filter((function(e){return t==e._id}))[0];e.publish("userDataEditRequested",a)})),e.subscribe("userDataDeleted",(function(a){const n=i.filter((function(e){return a!=e._id}));i=n,t=structuredClone(i),e.publish("renderUpdatedUserData",i)}))}(),function(){const t={name:"",color:"#000000",privilegeLevel:!1,teams:[],availability:{Sun:[],Mon:[],Tue:[],Wed:[],Thu:[],Fri:[],Sat:[]},lastVerified:null};let i,a;e.subscribe("modifyUserNameValue",(function(e){a.name=e})),e.subscribe("modifyUserPrivilegeLevelValue",(function(e){a.privilegeLevel=e})),e.subscribe("modifyUserColorValue",(function(e){a.color=e})),e.subscribe("modifyUserPasswordValue",(function(e){a.password=e})),e.subscribe("userDataEditRequested",(function(t){i=structuredClone(t),a=structuredClone(i),e.publish("userDataLoaded",{userData:a,origin:"edit"})})),e.subscribe("addUserClicked",(function(){i=structuredClone(t),a=structuredClone(i),e.publish("newUserModelBuilt",{userData:a,origin:"add"})})),e.subscribe("updateUserDataClicked",(function(t){e.publish("userDataValidationRequested",{userData:a,origin:t})})),e.subscribe("cancelUserDataChangesClicked",(function(){a=structuredClone(i),e.publish("userDataChangesCancelled")})),e.subscribe("editUserDataSaved",(function(){e.publish("updateAllUsersModel",a)})),e.subscribe("newUserDataSaved",(function(t){a._id=t,e.publish("updateAllUsersModel",a)})),e.subscribe("userDataValidationFailed",(function(t){const{errors:i,origin:n}=t;e.publish("renderUserValidationErrors",{data:a,errors:i,origin:n})})),e.subscribe("userDataValidated",(function(t){"edit"==t.origin?e.publish("userUpdateRequested",t.userData):e.publish("newUserAdditionRequested",t.userData)}))}(),e.subscribe("userDataValidationRequested",(function(t){const i=document.querySelector("#userGeneratorPassword"),{userData:a,origin:n}=t,o=[];(function(e,t){const i=e.name,a=/[^A-Za-z0-9]/;try{if(a.test(i))throw"User names can only include letters and numbers (no spaces or symbols).";if(""==i)throw"User name must have a value."}catch(e){t.push(e)}})(a,o),function(e,t){const i=e.color;try{if("#000000"==i)throw"Color must have a value not equal to black. Black is default value, and must be changed."}catch(e){t.push(e)}}(a,o),i&&function(e,t){const i=e.password,a=/[^A-Za-z0-9]/;try{if(a.test(i))throw"Passwords can only include letters and numbers (no spaces or symbols).";if(""==i)throw"Password must have a value."}catch(e){t.push(e)}}(a,o),o.length>0?e.publish("userDataValidationFailed",{errors:o,origin:n}):e.publish("userDataValidated",t)})),e.subscribe("renderUpdatedAdminBlockData",(function(i){const{day:a,blocks:n}=i,o=document.querySelector("#adminMainPageAddAvailabilityBlockAllUsersGrid"),r=Array.from(o.querySelectorAll("div")).find((function(e){return e.firstElementChild.innerText==a})).querySelector(".adminMainPageAddAvailabilityBlockAllUsersAllBlocks"),s=document.createElement("div");if(s.classList.add("adminMainPageAddAvailabilityBlockAllUsersAllBlocks"),n.length>0)n.forEach((function(i){const n=function(i,a){const{_id:n}=a,o=function(){const e=document.querySelector("#adminMainPageAddAvailabilityBlockAllUsersBlockTemplate"),t=document.importNode(e.content,!0),i=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlock"),a=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockStart > p"),n=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockEnd > p"),o=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton"),r=t.querySelector(".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton");return{main:i,content:t,startTimeText:a,endTimeText:n,editButton:o,deleteButton:r}}();return function(e,i){e.main.setAttribute("dataTimeBlockId",i._id),0==isNaN(Number(i.availability.startTime))?e.startTimeText.innerText+=t.runConvertTotalMinutesToTime(i.availability.startTime):e.startTimeText.innerText=i.availability.startTime,0==isNaN(Number(i.availability.endTime))?e.endTimeText.innerText+=t.runConvertTotalMinutesToTime(i.availability.endTime):e.endTimeText.innerText=i.availability.endTime}(o,a),function(t,i){t.editButton.addEventListener("click",(function(){e.publish("editAdminAvailabilityClicked",i)})),t.deleteButton.addEventListener("click",(function(){confirm("Delete this time block?")&&e.publish("deleteAdminAvailabilityClicked",i)}))}(o,{day:i,_id:n}),o.content}(a,i);s.appendChild(n)}));else{const e=document.createElement("p");e.innerText="No timeblocks",s.appendChild(e)}r.replaceWith(s)})),function(){e.subscribe("adminAvailabilityBlockAddRequested",l),e.subscribe("adminBlockDataLoaded",l),e.subscribe("adminAvailabilityDataChangesCancelled",c),e.subscribe("renderAdminBlockValidationErrors",(function(e){c(),l(e);const t=document.querySelector("#adminDayTimeBlockGeneralErrorList");if(t.firstChild)for(;t.firstChild;)t.removeChild(t.firstChild);e.errors.forEach((function(e){const i=document.createElement("li");i.innerText=e,t.appendChild(i)}))})),e.subscribe("editAdminBlockDataSaved",c),e.subscribe("newAdminBlockDataSaved",c);const a=document.querySelector("body"),n=document.querySelector("#adminMainPage"),o=document.querySelector("#entryFormDiv"),r=document.querySelector("#entryForm"),s=document.createElement("div");function l(l){const c=function(){const e=document.querySelector("#adminDayTimeBlockFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("h3"),a=t.querySelectorAll(".selector"),n=t.querySelector("#adminDayTimeBlockSelectorsStart"),o=t.querySelector("#adminDayTimeBlockSelectorsEnd"),r=t.querySelector("#adminDayTimeBlockFormSaveButton"),s=t.querySelector("#adminDayTimeBlockFormCancelButton");return{content:t,dayLabel:i,timeBlockSelectors:a,saveButton:r,cancelButton:s,startDiv:n,endDiv:o}}();var d,u;u=l,(d=c).dayLabel.innerText=`Day: ${u.timeBlock.day}`,d.timeBlockSelectors.forEach((function(a){const n=Array.from(a.classList)[0],o=i.runBuildSelector(n);let s;if(null!=o.querySelector(`option[value = "${u.timeBlock.availability[n]}"]`))s=o.querySelector(`option[value = "${u.timeBlock.availability[n]}"]`);else{s=o.querySelector("option[value = 'default']");const e=function(e,i){const a=document.createElement("p");return a.innerText=`Your selected value of ${t.runConvertTotalMinutesToTime(e[i])} for ${i} has been invalidated by a change to the opening/closing times for the facility. Speak with your supervisor to address this or change this value.`,a}(u.timeBlock.availability,n);"startTime"==n?d.startDiv.appendChild(e):d.endDiv.appendChild(e)}s.selected=!0,"default"!=s.value&&(o.firstChild.disabled=!0),o.addEventListener("change",(function(){const t=n;let i;i="startTime"==n||"endTime"==n?Number(o.value):o.value,e.publish("modifyAdminTimeBlockSelectorValue",{modifiedSelector:t,value:i});const a=r.querySelectorAll(".selector"),s=r.querySelector("#adminDayTimeBlockFormSaveButton");0==Array.from(a).filter((function(e){return"default"==e[e.selectedIndex].value})).length&&(s.disabled=!1)})),a.replaceWith(o)})),function(t,i){t.saveButton.addEventListener("click",(function(){e.publish("updateAdminBlockClicked",i.origin)})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelAdminBlockChangesClicked")}))}(c,l),r.appendChild(c.content);const m=r.querySelectorAll(".selector"),f=r.querySelector("#adminDayTimeBlockFormSaveButton");Array.from(m).filter((function(e){return"default"==e[e.selectedIndex].value})).length>0&&(f.disabled=!0),n.appendChild(s),s.appendChild(o),o.classList.toggle("formHidden"),a.style.overflowY="hidden"}function c(){if(r.firstChild)for(;r.firstChild;)r.removeChild(r.firstChild);o.classList.toggle("formHidden"),s.replaceWith(...s.childNodes),a.style.overflowY="scroll"}s.id="overlayDiv"}(),function(){let i={},a={};e.subscribe("adminDataFetched",(function(e){i=structuredClone(e.adminTimeBlocks),a=structuredClone(i)})),e.subscribe("updateAllAdminBlocksModel",(function(t){const n=a[t.day].findIndex((function(e){return e._id==t._id}));-1!=n?a[t.day][n]=t:a[t.day].push(t),i=structuredClone(a),e.publish("renderUpdatedAdminBlockData",{day:t.day,blocks:a[t.day]})})),e.subscribe("editAdminAvailabilityClicked",(function(t){const{day:i,_id:n}=t,o=a[i].filter((function(e){return e._id==n}))[0];e.publish("adminAvailabilityBlockEditRequested",o)})),e.subscribe("deleteAdminAvailabilityClicked",(function(t){const{day:i,_id:n}=t,o=a[i].filter((function(e){return e._id==n}))[0];e.publish("adminBlockDeleteRequested",o)})),e.subscribe("facilityDataAvailabiltyUpdateComparisonRequested",(function(i){const n=structuredClone(a);for(let a in n)n[a].forEach((function(e){const o=n[a].indexOf(e);(e.availability.startTime<i.facilityOpen||e.availability.startTime>i.facilityClose)&&(e.availability.endTime<i.facilityOpen||e.availability.endTime>i.facilityClose)?(n[a][o].availability.startTime=`Start time ${t.runConvertTotalMinutesToTime(n[a][o].availability.startTime)} is outside facility hours. Speak to supervisor about time changes.`,n[a][o].availability.endTime=`End time ${t.runConvertTotalMinutesToTime(n[a][o].availability.endTime)} is outside facility hours. Speak to supervisor about time changes.`):e.availability.startTime<i.facilityOpen||e.availability.startTime>i.facilityClose?n[a][o].availability.startTime=`Start time ${t.runConvertTotalMinutesToTime(n[a][o].availability.startTime)} is outside facility hours. Speak to supervisor about time changes.`:(e.availability.endTime<i.facilityOpen||e.availability.endTime>i.facilityClose)&&(n[a][o].availability.endTime=`End time ${t.runConvertTotalMinutesToTime(n[a][o].availability.endTime)} is outside facility hours. Speak to supervisor about time changes.`)})),e.publish("renderUpdatedAdminBlockData",{day:a,blocks:n[a]})})),e.subscribe("adminBlockDataDeleted",(function(t){const{day:n,_id:o}=t,r=a[n].filter((function(e){return o!=e._id}));a[n]=r,i=structuredClone(a),e.publish("renderUpdatedAdminBlockData",{day:n,blocks:a[n]})}))}(),function(){let t,i;const a={admin:!0,season:null,day:null,availability:{startTime:"default",endTime:"default"}};e.subscribe("adminDataFetched",(function(e){a.season=e.season})),e.subscribe("addAdminTimeBlockClicked",(function(n){t=structuredClone(a),i=structuredClone(t),i.day=n,e.publish("adminAvailabilityBlockAddRequested",{timeBlock:i,origin:"add"})})),e.subscribe("modifyAdminTimeBlockSelectorValue",(function(e){const{modifiedSelector:t,value:a}=e;i.availability[t]=a})),e.subscribe("adminAvailabilityBlockEditRequested",(function(a){t=structuredClone(a),i=structuredClone(t),e.publish("adminBlockDataLoaded",{timeBlock:i,origin:"edit"})})),e.subscribe("cancelAdminBlockChangesClicked",(function(){t={},e.publish("adminAvailabilityDataChangesCancelled")})),e.subscribe("updateAdminBlockClicked",(function(t){e.publish("adminBlockDataValidationRequested",{timeBlock:i,origin:t})})),e.subscribe("adminAvailabilityDataValidated",(function(t){"edit"==t.origin?e.publish("adminBlockUpdateRequested",t.timeBlock):e.publish("newAdminBlockAdditionRequested",t.timeBlock)})),e.subscribe("adminAvailabilityDataValidationFailed",(function(t){const{errors:a,origin:n}=t;e.publish("renderAdminBlockValidationErrors",{timeBlock:i,errors:a,origin:n})})),e.subscribe("editAdminBlockDataSaved",(function(){e.publish("updateAllAdminBlocksModel",i)})),e.subscribe("newAdminBlockDataSaved",(function(t){i._id=t,e.publish("updateAllAdminBlocksModel",i)}))}(),function(){function t(e,t){try{for(let t in e.availability)if("default"==e.availability[t])throw`Value for ${t} cannot be default`;if(e.availability.startTime>=e.availability.endTime)throw"Start time overlaps with end time!"}catch(e){t.push(e)}}e.subscribe("adminBlockDataValidationRequested",(function(i){const{timeBlock:a,origin:n}=i,o=[];t(a,o),0==o.length?e.publish("adminAvailabilityDataValidated",i):e.publish("adminAvailabilityDataValidationFailed",{errors:o,origin:n})})),e.subscribe("availabilityValidationRequested",(function(i){const{timeBlock:a,origin:n}=i,o=[];t(a,o),0==o.length?e.publish("userAvailabilityDataValidated",i):e.publish("userAvailabilityValidationFailed",{errors:o,origin:n})}))}(),e.subscribe("modifyTeamGrid",(function(t){const i=document.querySelector("#adminMainPageTeamGrid"),a=document.createElement("div");a.id="adminMainPageTeamGrid",t.forEach((function(t){const i=function(t){const i=function(){const e=document.querySelector("#adminMainPageTeamTemplate"),t=document.importNode(e.content,!0),i=t.querySelector(".adminMainPageTeamGridTeam"),a=t.querySelector(".adminMainPageTeamGridTeamName"),n=t.querySelector(".adminMainPageTeamGridTeamCoach"),o=t.querySelector(".adminMainPageTeamGridTeamSize"),r=t.querySelector(".adminMainPageTeamGridTeamRank"),s=t.querySelector(".adminMainPageTeamGridTeamDisableButton");return{content:t,div:i,name:a,coach:n,size:o,rank:r,disableButton:s}}();return function(e,t){e.div.setAttribute("data-teamId",t._id),e.name.innerText=t.name,e.coach.innerText=t.coach.name,e.size.innerText=`${t.size}`,e.rank.innerText=t.rank.allTeams+1}(i,t),function(t,i){const{_id:a}=i;t.disableButton.addEventListener("click",(function(){e.publish("enabledStatusChangeClicked",a)}))}(i,t),0==t.enabled&&(i.div.classList.toggle("toggleDisable"),i.disableButton.innerText="Enable"),i.content}(t);a.appendChild(i)})),i.replaceWith(a)})),function(){let t,i;e.subscribe("adminDataFetched",(function(e){t=structuredClone(e.teams),i=structuredClone(t)})),e.subscribe("allTeamsOrderChangeSaved",(function(){t=structuredClone(i),e.publish("modifyTeamGrid",i)})),e.subscribe("cancelAllTeamsOrderChangesClicked",(function(){i=structuredClone(t),e.publish("allTeamsDataChangesCancelled")})),e.subscribe("updateAllTeamsOrderClicked",(function(){e.publish("allTeamsOrderDataUpdateRequested",i)})),e.subscribe("modifyAllTeamsOrderClicked",(function(t){const a=i.findIndex((function(e){return e._id==t.team._id})),n=i.splice(a,1)[0];i.splice(a+t.modifier,0,n),i.forEach((function(e){e.rank.allTeams=i.findIndex((function(t){return t._id==e._id}))})),e.publish("allTeamsOrderDataUpdated",i)})),e.subscribe("enabledStatusChangeClicked",(function(t){const a=i.filter((function(e){return e._id==t}))[0];a.enabled=!a.enabled,e.publish("teamEnabledUpdateRequested",t)})),e.subscribe("teamEnableStatusChangeSaved",(function(){t=structuredClone(i),e.publish("modifyTeamGrid",i)})),e.subscribe("adminTeamOrderChangeClicked",(function(){e.publish("allTeamsOrderChangeRequested",i)}))}(),function(){e.subscribe("allTeamsOrderChangeRequested",r),e.subscribe("allTeamsDataChangesCancelled",s),e.subscribe("allTeamsOrderChangeSaved",s),e.subscribe("allTeamsOrderDataUpdated",(function(e){s(),r(e)}));const t=document.querySelector("body"),i=document.querySelector("#adminMainPage"),a=document.querySelector("#entryFormDiv"),n=document.querySelector("#entryForm"),o=document.createElement("div");function r(r){const s=function(){const e=document.querySelector("#adminTeamOrderFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("#adminTeamOrderForm"),a=t.querySelector("#adminTeamOrderFormTeams"),n=t.querySelector("#saveAdminTeamOrderButton"),o=t.querySelector("#cancelAdminTeamOrderChangesButton");return{content:t,form:i,teamList:a,saveButton:n,cancelButton:o}}();!function(t,i){i.length>=1?i.forEach((function(a){const n=document.querySelector("#adminTeamOrderFormTeamTemplate"),o=document.importNode(n.content,!0),r=o.querySelector(".adminTeamOrderFormTeamName"),s=o.querySelector(".adminTeamOrderFormTeamSize"),l=o.querySelector(".moveOptionUpButton"),c=o.querySelector(".moveOptionDownButton");r.innerText=`Team: ${a.name}`,s.innerText=`Size: ${a.size}`,l.addEventListener("click",(function(){e.publish("modifyAllTeamsOrderClicked",{team:a,modifier:-1})})),c.addEventListener("click",(function(){e.publish("modifyAllTeamsOrderClicked",{team:a,modifier:1})})),i.length>1&&0==a.rank.allTeams?l.remove():i.length>1&&a.rank.allTeams==i.length-1?c.remove():1==i.length&&(l.remove(),c.remove()),t.teamList.appendChild(o)})):(t.teamList.innerText="No teams here!",t.saveButton.disabled=!0)}(s,r),function(t){t.saveButton.addEventListener("click",(function(){e.publish("updateAllTeamsOrderClicked")})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelAllTeamsOrderChangesClicked")}))}(s),n.appendChild(s.content),i.appendChild(o),o.appendChild(a),a.classList.toggle("formHidden"),s.form.classList.toggle("toggleScrollBarOn"),t.style.overflowY="hidden"}function s(){if(n.firstChild)for(;n.firstChild;)n.removeChild(n.firstChild);a.classList.add("formHidden"),t.style.overflowY="scroll",o.replaceWith(...o.childNodes)}o.id="overlayDiv"}(),e.subscribe("userUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`adminHome/user/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("userDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editUserDataSaved")}catch(e){console.log(e)}})),e.subscribe("newUserAdditionRequested",(async function(t){try{const i=await fetch("adminHome/user",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("userDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newUserDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("deleteUserRequested",(async function(e){const t={_id:e};try{const i=await fetch(`adminHome/user/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else if(303==i.status){const{userId:e,season:t}=await i.json(),a=document.createElement("a");a.href=`/user/${e}/${t}/adminHome`,a.click()}}catch(e){console.log(e)}})),e.subscribe("adminBlockUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`adminHome/timeBlock/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("adminAvailabilityDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editAdminBlockDataSaved")}catch(e){console.log(e)}})),e.subscribe("newAdminBlockAdditionRequested",(async function(t){try{const i=await fetch("adminHome/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("adminAvailabilityDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newAdminBlockDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("adminBlockDeleteRequested",(async function(t){const i={_id:t._id};try{const a=await fetch(`adminHome/timeBlock/${t._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json();alert(e)}else 200==a.status&&e.publish("adminBlockDataDeleted",t)}catch(e){console.log(e)}})),e.subscribe("availabilityBlockUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/timeBlock/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("userAvailabilityValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editAvailabilityBlockDataSaved")}catch(e){console.log(e)}})),e.subscribe("newAvailabilityBlockAdditionRequested",(async function(t){try{const i=await fetch("home/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("userAvailabilityValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newAvailabilityBlockDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("availabilityBlockDeleteRequested",(async function(t){try{const i=await fetch(`home/timeBlock/${t._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else 200==i.status&&e.publish("availabilityBlockDataDeleted",t)}catch(e){console.log(e)}})),e.subscribe("teamUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/team/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("teamDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editTeamDataSaved")}catch(e){console.log(e)}})),e.subscribe("newTeamAdditionRequested",(async function(t){try{const i=await fetch("home/team",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("teamDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newTeamDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("teamDataDeleteRequested",(async function(e){const t={_id:e};try{const i=await fetch(`home/team/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else if(303==i.status){const{userId:e,season:t}=await i.json(),a=document.createElement("a");a.href=`/user/${e}/${t}/home`,a.click()}}catch(e){console.log(e)}})),e.subscribe("teamVerificationUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/team/${i}/verification`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("teamVerificationSaved",t)}catch(e){console.log(e)}})),e.subscribe("userAllTeamsVerificationUpdateRequested",(async function(t){const i={lastVerified:t};try{const a=await fetch("home/allTeamsVerification",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("allTeamsVerificationSaved",t)}catch(e){console.log(e)}})),e.subscribe("adminFacilityDataUpdateRequested",(async function(t){try{await fetch("adminHome/facilitySettings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),e.publish("facilityDataSaved")}catch(e){console.log(e)}})),e.subscribe("teamEnabledUpdateRequested",(async function(t){const i={_id:t};try{const a=await fetch(`adminHome/team/${t}/enabledStatus`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("teamEnableStatusChangeSaved")}catch(e){console.log(e)}})),e.subscribe("myTeamsOrderDataUpdateRequested",(async function(t){try{const i=await fetch("home/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status)throw"400 error!";200==i.status&&e.publish("myTeamsOrderChangeSaved")}catch(e){console.log(e)}})),e.subscribe("allTeamsOrderDataUpdateRequested",(async function(t){try{const i=await fetch("adminHome/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status)throw"400 error!";200==i.status&&e.publish("allTeamsOrderChangeSaved")}catch(e){console.log(e)}})),e.subscribe("scheduleBuildRequested",(async function(){try{const e=await fetch("adminHome/schedule",{method:"GET",headers:{"Content-Type":"application/json"}});if(404==e.status)throw"404 error!";if(400==e.status)throw"400 error!";if(200==e.status){const t=await e.blob(),i=document.createElement("a");i.href=window.URL.createObjectURL(t),i.download="schedule.xlsx",i.click()}}catch(e){console.log(e)}})),window.onload=async function(){try{const t=window.matchMedia("(max-width: 485px)");a(t),t.addEventListener("change",a);const i=await fetch("adminHome/adminData"),n=await i.json();e.publish("adminDataFetched",n),e.publish("adminDataSet")}catch(e){console.log(e)}}})();
//# sourceMappingURL=adminHomePage.js.map