{"version":3,"file":"adminHomePage.js","mappings":";;;;;;;;;;;;;;;;AAAgC;AACmB;;AAEnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;AACA;AACA,SAAS;AACT,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,aAAa;AACb,mCAAmC,2FAA+C,KAAK;AACvF,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;AAEsB;;;;;;;;;;;;;;;;ACnJsB;;AAE7C,WAAW,YAAY;AACvB,WAAW,YAAY;;AAEvB;;AAEA,IAAI,yDAAgB;;AAEpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,uDAAc;AAClC;AACA;AACA;AACA;AACA,wBAAwB,uDAAc;AACtC;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,uDAAc,kCAAkC,mBAAmB;AAC3F;;AAEA;AACA;AACA;AACA,4BAA4B,uDAAc,oCAAoC,mBAAmB;AACjG;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;;AAEA,CAAC;;AAEqB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oIAAoI;AACpM,gEAAgE,yHAAyH;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzJgD;AACgC;AACb;;;AAGnE;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;;;AAIpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA,sDAAsD,4BAA4B;;AAElF;AACA;AACA;AACA,gCAAgC,iGAAgC;AAChE;AACA;AACA,4DAA4D,mDAAmD;AAC/G,8EAA8E,mDAAmD;AACjI,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,uCAAuC,wBAAwB;;AAE7F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA,wDAAwD,+FAA+C,kBAAkB,MAAM,UAAU;AACzI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;;;;AAIuC;;;;;;;;;;;;;;;;;;AC1JQ;AACyB;;AAEzE;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,6FAAgC;AAChE;AACA,gFAAgF,2CAA2C;AAC3H;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,iCAAiC,wBAAwB;AACvF;;AAEA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uDAAc;AAC9B,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAEiC;;;;;;;;;;;;;;;;;;;;;AC7Gc;;AAEhD;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc;AAC9B;AACA;;AAEA;AACA,YAAY,uDAAc;AAC1B;;AAEA;AACA;AACA;AACA,+GAA+G,eAAe,KAAK,wBAAwB;AAC3J;AACA,wBAAwB,uDAAc;AACtC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,oBAAoB,uDAAc;AAClC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2GAA2G,eAAe,KAAK,wBAAwB;AACvJ;AACA,oBAAoB,uDAAc;AAClC,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uDAAc;AAC9B;AACA;;AAEA;AACA;AACA,gBAAgB,uDAAc;AAC9B;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAE6B;;;;;;;;;;;;;;;;;;AClJW;AACiB;;AAE1D;;AAEA,IAAI,qDAAgB;;AAEpB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oDAAoD,2FAA+C;AAC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CA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,mEAAmE,OAAO,iBAAiB;AAC3F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,yEAAyE,IAAI,iBAAiB;AAC9F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,yEAAyE,cAAc,iBAAiB;AACxG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA,oEAAoE,IAAI,iBAAiB;AACzF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,oEAAoE,cAAc,iBAAiB;AACnG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;;AAGA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAA6D;AAC1F,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC3yBD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,GAAG,KAAK,EAAE,SAAS;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;;;;;;;;;;;;;;;;ACtEkC;;AAEnC;AACA;AACA,IAAI,qDAAgB;AACpB,IAAI,qDAAgB;AACpB;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAc;AAC1B,SAAS;AACT,YAAY,mDAAc,2CAA2C,2BAA2B;AAChG;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA,YAAY,mDAAc;AAC1B,SAAS;AACT,YAAY,mDAAc,sCAAsC,2BAA2B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC/CkC;;AAEnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,mDAAc;AAC1B,SAAS;AACT,YAAY,mDAAc;AAC1B;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC9CyC;;AAE1C;AACA;AACA,IAAI,yDAAgB;AACpB;AACA;AACA;AACA,eAAe,kBAAkB;;AAEjC;;AAEA;AACA;;AAEA;AACA,YAAY,uDAAc,8BAA8B,2BAA2B;AACnF,SAAS;AACT,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,CAAC;;;;;;;;UC/CD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNoC;AAC2C;;AAE8B;AACZ;AAC3B;AACO;;AAEqB;AACd;AACf;AACR;AACI;;AAEwD;AACd;AAClB;AACN;AACJ;;AAE/B;;AAEhD;;AAEA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB;AACA,KAAK;AACL;AACA;AACA","sources":["webpack://pennschedule/./src/DOMBuilders/selectorDOMBuilder.js","webpack://pennschedule/./src/adminHomePage/components/adminHomeRender.js","webpack://pennschedule/./src/adminHomePage/components/forms/adminTimeBlockForm.js","webpack://pennschedule/./src/adminHomePage/components/forms/facilityDataForm.js","webpack://pennschedule/./src/adminHomePage/components/forms/userForm.js","webpack://pennschedule/./src/adminHomePage/components/mainModulesRenders/adminTimeBlocksGrid.js","webpack://pennschedule/./src/adminHomePage/components/mainModulesRenders/facilityDataGrid.js","webpack://pennschedule/./src/adminHomePage/components/mainModulesRenders/userGrid.js","webpack://pennschedule/./src/adminHomePage/models/allAdminTimeBlocksData.js","webpack://pennschedule/./src/adminHomePage/models/allUsersData.js","webpack://pennschedule/./src/adminHomePage/models/facilityData.js","webpack://pennschedule/./src/adminHomePage/models/timeBlockData.js","webpack://pennschedule/./src/adminHomePage/models/userData.js","webpack://pennschedule/./src/databasePost.js","webpack://pennschedule/./src/events.js","webpack://pennschedule/./src/timeConverter.js","webpack://pennschedule/./src/validators/availabilityValidator.js","webpack://pennschedule/./src/validators/facilityDataValidator.js","webpack://pennschedule/./src/validators/userValidator.js","webpack://pennschedule/webpack/bootstrap","webpack://pennschedule/webpack/runtime/define property getters","webpack://pennschedule/webpack/runtime/hasOwnProperty shorthand","webpack://pennschedule/webpack/runtime/make namespace object","webpack://pennschedule/./src/adminHomePage.js"],"sourcesContent":["import {events} from \"../events\"\nimport {timeValueConverter} from \"../timeConverter\"\n\nconst selectorBuilder = (function(){ \n\n    //default values must be input (into database?) for facilityOpen/Close/MaxCapacity BEFORE first time running, or startTime/endTime/teamSize will have errors!\n    const selectionRanges = { \n        startTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        endTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        teamSize: {\n            start: 5,\n            end: null,\n            increment: 5\n        },\n        facilityOpen:{ //4am to 8pm, default value 6am (360)?\n            start: 240,\n            end: 1200,\n            increment: 15\n        },\n        facilityClose:{ //5am to 9pm, default value 8pm (1200)?\n            start: 300,\n            end: 1260,\n            increment: 15\n        },\n        facilityMaxCapacity:{//range 10-150, default value 120?\n            start: 10,\n            end: 150,\n            increment: 5\n        },\n        dayOfWeek: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], \n        inWeiss: [\"yes\", \"no\"],\n    };\n    \n    events.subscribe(\"adminDataFetched\", setSelectorRanges);\n    events.subscribe('userDataFetched', setSelectorRanges)\n    \n    function setSelectorRanges(dBdata){\n        let facilityData\n        if(Object.prototype.hasOwnProperty.call(dBdata, 'facilityData')){\n            facilityData = dBdata.facilityData\n        }else{\n            facilityData = dBdata\n        }\n        selectionRanges.startTime.start = facilityData.facilityOpen;\n        selectionRanges.endTime.start = facilityData.facilityOpen + 30;\n        selectionRanges.startTime.end = facilityData.facilityClose - 30;\n        selectionRanges.endTime.end = facilityData.facilityClose;\n        selectionRanges.teamSize.end = facilityData.facilityMaxCapacity;\n    }\n\n    function runBuildSelector(primaryClass){\n        return buildSelector(primaryClass)\n    }\n\n    \n\n    function buildSelector(primaryClass){\n        const selection = document.createElement(\"select\");\n        selection.classList.add(primaryClass);\n        selection.classList.add(\"selector\");\n            const defaultOption = document.createElement(\"option\");\n            defaultOption.value = \"default\";\n            defaultOption.innerText = \"--\";\n        selection.appendChild(defaultOption);\n\n        switch(primaryClass){\n            case \"dayOfWeek\":\n            case \"inWeiss\": \n                buildArraySelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"teamSize\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;   \n            case \"endTime\":\n            case \"facilityClose\":\n            case \"facilityMaxCapacity\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"startTime\":\n            case \"facilityOpen\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                selection.addEventListener(\"change\", modifyEndTimeDefaultValue);\n                break;\n        }\n\n        selection.addEventListener(\"change\", disableDefaultOption)\n\n        return selection\n    }\n\n    function buildArraySelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        optionValues.forEach(function(optionValue){\n            const option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.innerText = optionValue;\n            selector.appendChild(option); \n        })\n    }\n\n    function buildRangeSelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        for(let i = optionValues.start; i<=optionValues.end; i += optionValues.increment){\n            const option = document.createElement(\"option\");\n            option.value = i;\n            if(primaryClass == \"teamSize\" || primaryClass == \"facilityMaxCapacity\"){\n                option.innerText = i;\n            }else{\n                option.innerText = timeValueConverter.runConvertTotalMinutesToTime(i); //toString() should not be necessary\n            }selector.appendChild(option);\n        }\n    }\n\n        //these are all not working, may need to use event delegation within the modules themselves\n\n    function modifyEndTimeDefaultValue(){\n        const startTimeSelectedValue = Number(this.value);\n        const endTimeValuesArray = Array.from(this.parentElement.nextElementSibling.lastElementChild.children);\n        endTimeValuesArray.forEach(function(time){\n            const endTimeValue = Number(time.value);\n            if(endTimeValue < startTimeSelectedValue + 30 || endTimeValue == \"default\"){\n                time.disabled = true;\n            }else{\n                time.disabled = false;\n            }\n        })\n    }\n\n    function disableDefaultOption(){ //these are all not working, may need to use event delegation within the modules themselves\n        const values = Array.from(this.children);\n        values[0].disabled = true;\n    }\n\n    return {runBuildSelector}\n\n})();\n\nexport{selectorBuilder}\n","import { events } from \"../../../src/events\";\n\n// import {adminTeams} from \"./components/teamGrid\";\n// import {adminUsers} from \"./components/userGrid\";\n\nconst adminHomeMain = (function(){\n\n    events.subscribe(\"adminDataSet\", setAdminEventListeners);\n\n    function setAdminEventListeners(){\n        setFacilityDataListeners()\n        setUserDataListeners();\n        setAdminTimeBlocksEventListeners();\n    }\n\n    function setFacilityDataListeners(){\n        const facilityEditButton = document.querySelector(\"#adminMainPageFacilitySelectorsEditButton\");\n        facilityEditButton.addEventListener(\"click\", requestAdminDataEdit);\n    \n        function requestAdminDataEdit(){\n            events.publish(\"editFacilityDataClicked\");\n        }\n    }\n\n    function setUserDataListeners(){\n        const addUserButton = document.querySelector(\"#adminUsersGridAddUser\");\n        \n        const allUsers = Array.from(document.querySelectorAll(\".adminUserGridUser\"));\n        if(allUsers.length >0){\n            allUsers.forEach(function(user){\n                const _id = user.dataset.userid;\n                const editButton = user.querySelector(\".adminUserGridUserEditButton\");\n                const deleteButton = user.querySelector(\".adminUserGridUserDeleteButton\")\n\n                editButton.addEventListener(\"click\", editUser);\n                deleteButton.addEventListener(\"click\", deleteUser);\n\n                function editUser(){\n                    events.publish(\"editUserClicked\", _id)\n                }\n                function deleteUser(){\n                    const confirmation = confirm(\"Delete this user?\");\n                    if(confirmation){\n                        events.publish(\"deleteUserRequested\", _id)\n                    }\n                }\n            })\n        }\n\n        addUserButton.addEventListener(\"click\", addUser)\n\n        function addUser(){\n            events.publish(\"addUserClicked\")\n        }\n    }\n\n    function setAdminTimeBlocksEventListeners(){\n        const adminTimeBlockDays = Array.from(document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\").children);\n\n        adminTimeBlockDays.forEach(function(day){\n            const dayString = day.querySelector(\"h3\").innerText;\n            const addBlockButton = day.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockAddButton\");\n\n            addBlockButton.addEventListener(\"click\", addTimeBlock);\n\n            const dayAllBlocks = Array.from(day.querySelectorAll(\".adminMainPageAddAvailabilityBlockAllUsersAllBlocks > div\"));\n            if(dayAllBlocks.length > 0 ){\n                dayAllBlocks.forEach(function(timeBlock){\n                    const _id = timeBlock.dataset.timeblockid\n                    const editBlockButton = timeBlock.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton\");\n                    const deleteBlockButton = timeBlock.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton\")\n\n                    editBlockButton.addEventListener(\"click\", editTimeBlock);\n                    deleteBlockButton.addEventListener(\"click\", deleteTimeBlock);\n\n                    function editTimeBlock(){\n                        events.publish(\"editAdminAvailabilityClicked\", {day:dayString, _id})\n                    }\n\n                    function deleteTimeBlock(){\n                        const confirmation = confirm(\"Delete this time block?\");\n                        if(confirmation){\n                            events.publish(\"deleteAdminAvailabilityClicked\", {day:dayString, _id})\n                        }\n                    }\n                })\n            }\n\n            function addTimeBlock(){\n                events.publish(\"addAdminTimeBlockClicked\", dayString)\n            }\n        })\n    }\n\n})()\n\nexport {adminHomeMain}\n\n  // let season //?\n    \n    // events.subscribe(\"adminMainPageModelBuilt\", setSeason)\n    // events.subscribe(\"adminMainPageModelBuilt\", ANOTHERFUNCTIONHERE?);\n    // events.subscribe(\"adminAvailabilityModelModified\", renderAdminAllTimeBlocks);\n    // events.subscribe(\"adminFacilityModelModified\", renderFacilityDataGrid)\n    \n    // function setSeason(adminMainPageData){\n    //     season = adminMainPageData.season\n    // }\n\n    // function changeSeason(){\n            \n    // }\n\n    // function runScheduler(){\n    //     events.publish(\"runSchedulerRequested\") \n    // }\n\n    // //find subscribers to changeSeasons and runScheduler, issue NOT TO BE ADDRESSED:  scheduler could be run with unsaved modifications to adminAvail and facilityData\n    // function buildAdminMainPageDOM(adminMainPageData){\n       \n        \n    \n     \n        \n    //     const adminFacilityData = content.querySelector(\"#facilityDataGridContainer\");\n    //     const adminAddTimeBlock = content.querySelector(\"#setAllUsersAvailabilityGridContainer\");\n        \n    \n    //     const adminAllUsersNew = renderAdminAllUsersGrid(adminAllUsers, adminMainPageData.allUsers);\n    //     const adminFacilityDataNew = renderFacilityDataGrid({adminFacilityDataContainer: adminFacilityData, adminMainPageData: adminMainPageData.facilitySelectors, pageRenderOrigin: \"template\"});\n    //     const adminAddTimeBlockNew = renderAdminTimeBlocker({adminTimeBlockDiv: adminAddTimeBlock, adminMainPageData: adminMainPageData.adminTimeBlocks, pageRenderOrigin: \"template\"});\n    \n    //     adminAllUsers.replaceWith(adminAllUsersNew); \n    //     adminFacilityData.replaceWith(adminFacilityDataNew);\n    //     adminAddTimeBlock.replaceWith(adminAddTimeBlockNew);\n    \n    //     seasonButtons.forEach(function(button){\n    //         if(!button.disabled){\n    //             button.addEventListener(\"click\", changeSeason)\n    //         }else{\n                \n               \n    //         }\n    //     })\n\n    //     schedulerButton.addEventListener(\"click\", runScheduler)   \n    // }\n\n    // function setElements(){\n        \n        \n    //     const seasonButtons = Array.from(content.querySelectorAll(\"#adminSeasonButtons > button\"));\n    //     const schedulerButton = content.querySelector(\"#runScheduleBuilderButton\");\n    // }","import { events } from \"../../../../src/events\";\nimport { selectorBuilder } from \"../../../../src/DOMBuilders/selectorDOMBuilder\"\nimport { timeValueConverter } from \"../../../../src/timeConverter\";\n\n\nconst adminTimeBlockDataFormComponent = (function(){\n\n    events.subscribe('adminAvailabilityBlockAddRequested', renderTimeBlockDataForm);\n    events.subscribe('adminBlockDataLoaded', renderTimeBlockDataForm);\n    events.subscribe('adminAvailabilityDataChangesCancelled', unrenderTimeBlockDataForm);\n    events.subscribe(\"renderAdminBlockValidationErrors\", renderAdminBlockDataValidationErrors)\n    events.subscribe(\"editAdminBlockDataSaved\", unrenderTimeBlockDataForm);\n    events.subscribe('newAdminBlockDataSaved', unrenderTimeBlockDataForm)\n\n\n\n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\");\n    \n\n    function renderTimeBlockDataForm(adminTimeBlockDayData){\n        \n    \n        const elements = setElements();\n        populateContent(elements, adminTimeBlockDayData);\n        setEventListeners(elements, adminTimeBlockDayData);\n    \n        formDiv.appendChild(elements.content);\n\n        const selectors = formDiv.querySelectorAll('.selector');\n        const saveButton = formDiv.querySelector('#adminDayTimeBlockFormSaveButton')\n        if(Array.from(selectors).filter(function(selector){\n            return selector[selector.selectedIndex].value == \"default\"\n        }).length > 0){\n            saveButton.disabled = true;\n        }\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n    function unrenderTimeBlockDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n    \n    \n    function setElements(){\n        const template = document.querySelector(\"#adminDayTimeBlockFormTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const dayLabel = content.querySelector('h3');\n        const timeBlockSelectors = content.querySelectorAll(\".selector\");  \n        const startDiv = content.querySelector(\"#adminDayTimeBlockSelectorsStart\")\n        const endDiv =   content.querySelector(\"#adminDayTimeBlockSelectorsEnd\")              \n        const saveButton = content.querySelector(\"#adminDayTimeBlockFormSaveButton\");\n        const cancelButton = content.querySelector(\"#adminDayTimeBlockFormCancelButton\");\n    \n        return {content, dayLabel, timeBlockSelectors, saveButton, cancelButton, startDiv, endDiv}\n    }\n    \n    function populateContent(selectorElements, timeBlockData){\n\n        selectorElements.dayLabel.innerText = `Day: ${timeBlockData.timeBlock.day}`;\n\n        selectorElements.timeBlockSelectors.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n    \n            const selectorNew = selectorBuilder.runBuildSelector(primaryClass);\n            let selectedOption\n            \n            if(selectorNew.querySelector(`option[value = \"${timeBlockData.timeBlock.availability[primaryClass]}\"]`) != null){\n                selectedOption = selectorNew.querySelector(`option[value = \"${timeBlockData.timeBlock.availability[primaryClass]}\"]`)\n            }else{\n                selectedOption = selectorNew.querySelector(\"option[value = 'default']\");\n                const errorText = createErrorText(timeBlockData.timeBlock.availability, primaryClass);\n                if(primaryClass == \"startTime\"){\n                    selectorElements.startDiv.appendChild(errorText)\n                }else{\n                    selectorElements.endDiv.appendChild(errorText)\n                }\n            }\n            \n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectorNew.firstChild.disabled = true;\n            }\n    \n            selectorNew.addEventListener(\"change\", publishSelectionValueChange);\n            \n            function publishSelectionValueChange(){\n                const modifiedSelector = primaryClass\n                const value = selectorNew.value;\n                events.publish(\"modifyAdminTimeBlockSelectorValue\", {modifiedSelector, value})\n\n                const selectors = formDiv.querySelectorAll('.selector');\n                const saveButton = formDiv.querySelector('#adminDayTimeBlockFormSaveButton')\n                if(Array.from(selectors).filter(function(selector){\n                    return selector[selector.selectedIndex].value == \"default\"\n                }).length == 0){\n                    saveButton.disabled = false;\n                }\n            }\n    \n            selector.replaceWith(selectorNew)\n        })\n    }\n    \n    function setEventListeners(selectorElements, timeBlockData){\n    \n        selectorElements.saveButton.addEventListener(\"click\", updateTimeBlockData);\n        selectorElements.cancelButton.addEventListener(\"click\", cancelTimeBlockChanges);\n    \n        function updateTimeBlockData(){\n            events.publish(\"updateAdminBlockClicked\", timeBlockData.origin);\n        }\n        function cancelTimeBlockChanges(){\n            events.publish(\"cancelAdminBlockChangesClicked\")\n        }\n    }\n    \n    function createErrorText(data, selector){\n        const errorText = document.createElement(\"p\");\n        errorText.innerText = `Your selected value of ${timeValueConverter.runConvertTotalMinutesToTime(data[selector])} for ${selector} has been invalidated by a change to the opening/closing times for the facility. Speak with your supervisor to address this or change this value.`;\n        return errorText;\n    }\n\n    function renderAdminBlockDataValidationErrors(blockData){\n        \n        unrenderTimeBlockDataForm();\n        renderTimeBlockDataForm(blockData);\n        \n        const errorList = document.querySelector(\"#adminDayTimeBlockGeneralErrorList\");\n\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n\n        blockData.errors.forEach(function(error){\n            const bullet = document.createElement(\"li\");\n            bullet.innerText = error;\n            errorList.appendChild(bullet);\n        })\n    }\n\n})()\n\n\n\nexport {adminTimeBlockDataFormComponent}\n\n","import { events } from \"../../../../src/events\";\nimport { selectorBuilder } from \"../../../DOMBuilders/selectorDOMBuilder\"\n\nconst facilityDataFormComponent = (function(){\n\n    events.subscribe(\"adminFacilityDataEditRequested\", renderFacilityDataForm);\n    events.subscribe(\"adminFacilityDataChangesCancelled\", unrenderFacilityDataForm);\n    events.subscribe(\"facilityDataSaved\", unrenderFacilityDataForm)\n    events.subscribe(\"renderFacilityDataValidationErrors\", renderFacilityDataValidationErrors)\n    \n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\")\n\n    function renderFacilityDataForm(facilityDataObj){\n        \n        const elements = setElements();\n        populateSelectors(elements, facilityDataObj);\n        setEventListeners(elements);\n\n        formDiv.appendChild(elements.content);\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n    function unrenderFacilityDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n\n    function setElements(){\n        const template = document.querySelector(\"#adminFacilityDataFormTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const facilitySelectors = content.querySelectorAll(\".selector\");                  \n        const saveButton = content.querySelector(\"#adminMainPageFacilitySelectorsSaveButton\");\n        const cancelButton = content.querySelector(\"#adminMainPageFacilitySelectorsCancelButton\");\n\n        return {content, facilitySelectors, saveButton, cancelButton}\n    }\n\n    function populateSelectors(selectorElements, facilityDataObj){\n        \n        selectorElements.facilitySelectors.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n\n            const selectorNew = selectorBuilder.runBuildSelector(primaryClass);\n            \n            const selectedOption = selectorNew.querySelector(`option[value = \"${facilityDataObj.facilityData[primaryClass]}\"]`);\n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectorNew.firstChild.disabled = true;\n            }\n\n            selectorNew.addEventListener(\"change\", publishSelectionValueChange);\n            \n            function publishSelectionValueChange(){\n                const modifiedSelector = primaryClass\n                const value = selectorNew.value;\n                events.publish(\"modifyFacilitySelectorValue\", {modifiedSelector, value})\n            }\n\n            selector.replaceWith(selectorNew)\n        })\n    }\n\n    function setEventListeners(selectorElements){\n\n        selectorElements.saveButton.addEventListener(\"click\", updateFacilityData);\n        selectorElements.cancelButton.addEventListener(\"click\", cancelFacilityDataChanges);\n\n        function updateFacilityData(){\n            const confirmation = confirm(\"Changing facility settings from a longer to a shorter day can create bugs if other users are not informed to adjust. Please speak to other users to notify them of changes before running the schedule builder. Continue?\")\n            if(confirmation){\n                events.publish(\"updateFacilityDataClicked\");\n            }else{\n                events.publish(\"cancelFacilityDataChangesClicked\")\n            }\n           \n        }\n        function cancelFacilityDataChanges(){\n            events.publish(\"cancelFacilityDataChangesClicked\") //check this path\n        }\n    }\n\n    function renderFacilityDataValidationErrors(facilityDataObj){\n        \n        unrenderFacilityDataForm();\n        renderFacilityDataForm(facilityDataObj);\n        \n        const errorList = document.querySelector(\"#adminMainPageFacilityGeneralErrorList\");\n\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n\n        facilityDataObj.errors.forEach(function(error){\n            const bullet = document.createElement(\"li\");\n            bullet.innerText = error;\n            errorList.appendChild(bullet);\n        })\n    }\n})()\n\nexport {facilityDataFormComponent}\n\n\n\n\n\n","import { events } from \"../../../../src/events\";\n\nconst userDataFormComponent = (function(){\n\n    events.subscribe(\"userDataLoaded\", renderUserDataForm); \n    events.subscribe(\"newUserModelBuilt\", renderUserDataForm)\n    events.subscribe(\"userDataChangesCancelled\", unrenderUserDataForm);\n    events.subscribe(\"editUserDataSaved\", unrenderUserDataForm)\n    events.subscribe(\"newUserDataSaved\", unrenderUserDataForm);\n    events.subscribe(\"renderUserValidationErrors\", renderUserDataValidationErrors)\n\n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\");\n\n    function renderUserDataForm(userData){\n\n        const elements = setElements();\n        populateFields(elements, userData.userData);\n        setEventListeners(elements, userData);\n\n        formDiv.appendChild(elements.content);\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n    function unrenderUserDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n\n    function setElements(){\n        const template = document.querySelector(\"#adminUserGeneratorTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const name = content.querySelector(\"#userGeneratorName\");                  \n        const privilege = content.querySelector(\"#userGeneratorPrivilege\");\n        const color = content.querySelector(\"#userGeneratorColor\");\n\n        const saveButton = content.querySelector(\"#userGeneratorSaveButton\");\n        const cancelButton = content.querySelector(\"#userGeneratorCancelButton\"); \n\n        return {content, name, privilege, color, saveButton, cancelButton}\n    }\n\n    function populateFields(userElements, userData){\n        userElements.name.value = userData.name;\n        if(userData.privilegeLevel == true){\n            userElements.privilege.checked = true;\n        }\n        userElements.color.value = userData.color;\n    }\n\n    function setEventListeners(userElements, userValues){\n        const userData = userValues.userData;\n        const origin = userValues.origin\n       \n        userElements.saveButton.addEventListener(\"click\", saveUserData);\n        userElements.cancelButton.addEventListener(\"click\", cancelUserChanges);\n\n        //extract these functions to outer level, as to not recreate them each time\n        function saveUserData(){\n            \n            if(modifyUserNameValue() == false){\n                return\n            }else{\n                verifyColorChange();\n                updateUserPrivilege();\n                events.publish(\"updateUserDataClicked\", origin)   \n            }       \n        }\n\n        function cancelUserChanges(){\n            events.publish(\"cancelUserDataChangesClicked\")\n        }\n\n        function modifyUserNameValue(){ \n            try{\n                if(userData.name != \"\" && userElements.name.value != userData.name){\n                    const confirmation = confirm(`If you submit changes, this will change the user name from ${userData.name} to ${userElements.name.value}. Proceed? `);\n                    if(confirmation){\n                        events.publish(\"modifyUserNameValue\", userElements.name.value)\n                    }else{\n                        userElements.name.value = userData.name;\n                        throw false \n                    }\n                }else if(userData.name != userElements.name.value){\n                    events.publish(\"modifyUserNameValue\", userElements.name.value)\n                } \n            }catch(err){\n                return err\n            }\n            \n            if(userData.name != \"\" && userElements.name.value != userData.name){\n                const confirmation = confirm(`If you submit changes, this will change the user name from ${userData.name} to ${userElements.name.value}. Proceed? `);\n                if(confirmation){\n                    events.publish(\"modifyUserNameValue\", userElements.name.value)\n                }else{\n                    userElements.name.value = userData.name;\n                    return false \n                }\n            }else if(userData.name != userElements.name.value){\n                events.publish(\"modifyUserNameValue\", userElements.name.value)\n            } \n        }\n\n        function updateUserPrivilege(){\n            \n            if(userElements.privilege.checked != userData.privilegeLevel){\n                events.publish(\"modifyUserPrivilegeLevelValue\", userElements.privilege.checked)\n            } \n        }\n\n        function verifyColorChange(){\n            if(userData.color != userElements.color.value){\n                events.publish(\"modifyUserColorValue\", userElements.color.value)\n            }\n        }\n    }\n\n    function renderUserDataValidationErrors(userData){\n        const {data, origin} = userData\n        const renderData = {userData: data, origin}\n        \n        unrenderUserDataForm();\n        renderUserDataForm(renderData);\n        \n        const errorList = document.querySelector(\"#userGeneratorGeneralErrorList\");\n\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n\n        userData.errors.forEach(function(error){\n            const bullet = document.createElement(\"li\");\n            bullet.innerText = error;\n            errorList.appendChild(bullet);\n        })\n    }\n})()\n\nexport {userDataFormComponent}\n\n","import { events } from \"../../../events\";\nimport {timeValueConverter} from \"../../../timeConverter\";\n\nconst adminTimeBlockDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedAdminBlockData\", renderAdminTimeBlockDay)\n\n    function renderAdminTimeBlockDay(adminTimeBlockDayData){\n        const {day, blocks} = adminTimeBlockDayData\n    \n        const adminBlocksDiv = document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\");\n        const dayDiv = Array.from(adminBlocksDiv.querySelectorAll(\"div\")).find(function(div){\n            return div.firstElementChild.innerText == day;\n        });\n        const dayAllBlocksDiv = dayDiv.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersAllBlocks\");\n        const dayAllBlocksDivNew = document.createElement(\"div\");\n        dayAllBlocksDivNew.classList.add(\"adminMainPageAddAvailabilityBlockAllUsersAllBlocks\")\n    \n        if(blocks.length > 0){\n            blocks.forEach(function(timeBlockData){\n                const row = buildBlockRow(day, timeBlockData);\n                dayAllBlocksDivNew.appendChild(row)\n            })\n        }else{\n            const defaultText = document.createElement('p');\n            defaultText.innerText = \"No timeblocks\";\n            dayAllBlocksDivNew.appendChild(defaultText);\n        }\n        \n    \n        dayAllBlocksDiv.replaceWith(dayAllBlocksDivNew);\n    }\n     \n    function buildBlockRow(day, blockData){ \n        const {_id} = blockData\n        const elements = setTemplateElements()\n        setElementsContent(elements, blockData);\n        setEventListeners(elements, {day, _id});\n        \n        return elements.content \n    }\n    \n    function setTemplateElements(){\n        const template = document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersBlockTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const main = content.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlock\");\n        const startTimeText = content.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockStart > p\")\n        const endTimeText = content.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockEnd > p\")\n        \n        const editButton = content.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton\");\n        const deleteButton = content.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton\");\n        \n        return {main, content, startTimeText, endTimeText, editButton, deleteButton}\n    }\n    \n    function setElementsContent(blockElement, blockData){\n        blockElement.main.setAttribute(\"dataTimeBlockId\", blockData._id)\n        if(isNaN(Number(blockData.availability.startTime)) == false){\n            blockElement.startTimeText.innerText += timeValueConverter.runConvertTotalMinutesToTime(blockData.availability.startTime);\n        }else{\n            blockElement.startTimeText.innerText = blockData.availability.startTime;\n        }\n        if(isNaN(Number(blockData.availability.endTime)) == false){\n            blockElement.endTimeText.innerText += timeValueConverter.runConvertTotalMinutesToTime(blockData.availability.endTime);\n        }else{\n            blockElement.endTimeText.innerText =blockData.availability.endTime;\n        }\n        \n    }\n    \n    function setEventListeners(timeBlockElement, timeBlockData){\n        timeBlockElement.editButton.addEventListener(\"click\", editAdminTimeBlock);\n        timeBlockElement.deleteButton.addEventListener(\"click\", deleteAdminTimeBlock);\n    \n        function editAdminTimeBlock(){\n            events.publish(\"editAdminAvailabilityClicked\", timeBlockData)\n        }\n        function deleteAdminTimeBlock(){\n            const confirmation = confirm(\"Delete this time block?\");\n            if(confirmation){\n                events.publish(\"deleteAdminAvailabilityClicked\", timeBlockData)\n            }\n            \n        }\n    }\n\n})()\n\nexport {adminTimeBlockDataGridComponent}","import {events} from \"../../../../src/events\";\nimport {timeValueConverter} from \"../../../timeConverter\";\n\nconst facilityDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedFacilityData\", renderFacilityDataGrid); //add prompt about successful save\n\n    function renderFacilityDataGrid(facilityData){\n        const elements = setElements();\n        setContent(elements, facilityData);\n    }\n\n    function setElements(){\n        const main = document.querySelector(\"#facilityDataGrid\")\n        const openTimeText = document.querySelector(\"#adminMainPageFacilityHoursSelectorsOpen > p\");\n        const closeTimeText = document.querySelector(\"#adminMainPageFacilityHoursSelectorsClose > p\");\n        const maxCapacityText = document.querySelector(\"#adminMainPageFacilityCapacitySelectorsMax > p\");\n        \n        return {main, openTimeText, closeTimeText, maxCapacityText}\n    }\n\n    function setContent(facilityElements, facilityData){\n        facilityElements.main.dataset.facilityDataId = facilityData._id;\n        facilityElements.openTimeText.innerText = `Open Time: ${timeValueConverter.runConvertTotalMinutesToTime(facilityData.facilityOpen)}`; //adjust the semi-colon distance for these in original render\n        facilityElements.closeTimeText.innerText = `Close Time: ${timeValueConverter.runConvertTotalMinutesToTime(facilityData.facilityClose)}`\n        facilityElements.maxCapacityText.innerText = `Max Capacity: ${facilityData.facilityMaxCapacity}`\n    }\n})()\n\nexport {facilityDataGridComponent}\n","import { events } from \"../../../../src/events\";\n\nconst userDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedUserData\", renderAdminUsers)\n\n    function renderAdminUsers(adminMainPageData){\n\n        const userGrid = document.querySelector(\"#adminUsersGrid\");\n        const userGridNew = document.createElement(\"div\");\n        userGridNew.id = \"adminUsersGrid\";\n\n        adminMainPageData.forEach(function(user){\n            const userRow = buildUserRow(user);\n            userGridNew.appendChild(userRow);\n        })\n\n        userGrid.replaceWith(userGridNew); \n    }\n\n    function buildUserRow(userData){   \n        const elements = setTemplateElements();\n        setElementsContent(elements, userData);\n        setEventListeners(elements, userData)\n\n        return elements.content  \n    }\n\n    function setTemplateElements(){\n        const template = document.querySelector(\"#adminMainPageUserGridUserTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const div = content.querySelector(\".adminUserGridUser\")\n\n        const name = content.querySelector(\".adminUserGridUserName\");\n        const privilege = content.querySelector(\".adminUserGridUserPrivilege\");\n        const lastVerified = content.querySelector(\".adminUserGridUserLastVerified\");\n        const colorBlock = content.querySelector(\".adminUserColor\");\n\n        const editButton = content.querySelector(\".adminUserGridUserEditButton\");\n        const deleteButton = content.querySelector(\".adminUserGridUserDeleteButton\");\n\n        return {content, div, name, privilege, lastVerified, colorBlock, editButton, deleteButton}\n    }\n\n    function setElementsContent(userElement, userData){\n        userElement.div.setAttribute(\"data-userId\", userData._id)\n        userElement.name.innerText = `Name: ${userData.name}`;\n        if(userData.privilegeLevel){\n            userElement.privilege.innerText = `Privilege: Admin`\n        }else{\n            userElement.privilege.innerText = `Privilege: User`\n        }\n        userElement.lastVerified.innerText = `Last Verified: ${userData.lastVerified}`;\n        userElement.colorBlock.style.backgroundColor = userData.color\n    }\n\n    function setEventListeners(userElement, userData){\n        userElement.editButton.addEventListener(\"click\", editUser);\n        userElement.deleteButton.addEventListener(\"click\", deleteUser);\n\n        function editUser(){\n            events.publish(\"editUserClicked\", userData._id)\n        }\n        function deleteUser(){\n            const confirmation = confirm(\"Delete this user?\");\n            if(confirmation){\n                events.publish(\"deleteUserRequested\", userData._id)\n            }\n        }\n    }\n})()\n \nexport {userDataGridComponent}\n","import {events} from \"../../../src/events\"\nimport { timeValueConverter } from \"../../timeConverter\";\n\nconst allAdminMainPageAdminTimeBlockModel = (function(){\n   \n    let allAdminAvailabilityDataStable = {};\n    let allAdminAvailabilityDataMutable = {};\n    \n    events.subscribe(\"adminDataFetched\", setDataNewPageRender);\n    events.subscribe(\"updateAllAdminBlocksModel\", setDataNewDatabasePost)\n    events.subscribe(\"editAdminAvailabilityClicked\", editAdminAvailabilityBlock)\n    events.subscribe(\"deleteAdminAvailabilityClicked\", deleteAdminAvailabilityBlock);\n    events.subscribe(\"facilityDataAvailabiltyUpdateComparisonRequested\", renderAllDays)\n    events.subscribe('adminBlockDataDeleted', setDataBlockDataDeleted)\n\n    function setDataNewPageRender(adminData){\n        allAdminAvailabilityDataStable = adminData.adminTimeBlocks;\n        createAdminAvailabilityDeepCopy(allAdminAvailabilityDataMutable, allAdminAvailabilityDataStable);\n    }\n\n    function createAdminAvailabilityDeepCopy(newObj, copyObj){\n        for(let prop in newObj){\n            delete newObj[prop]\n        }\n\n        for(let day in copyObj){\n            newObj[day] = [];\n            copyObj[day].forEach(function(timeBlock){\n                const {admin, day, season, _id} = timeBlock\n                const timeBlockCopy = Object.assign({}, {admin, day, season, _id});\n                timeBlockCopy.availability = Object.assign({}, timeBlock.availability)\n                newObj[day].push(timeBlockCopy);\n                \n\n            });\n        }\n    }\n\n    function editAdminAvailabilityBlock(timeBlockObj){\n        const {day, _id} = timeBlockObj;\n        const block = allAdminAvailabilityDataMutable[day].filter(function(timeBlock){\n            return timeBlock._id == _id;\n        })[0]\n\n        events.publish(\"adminAvailabilityBlockEditRequested\", block); //add publish that sends to form, need _id/day?\n    }\n\n    function deleteAdminAvailabilityBlock(timeBlockObj){\n        const {day, _id} = timeBlockObj;\n        const block = allAdminAvailabilityDataMutable[day].filter(function(timeBlock){\n            return timeBlock._id == _id;\n        })[0];\n\n        events.publish(\"adminBlockDeleteRequested\", block); //send this to database, change to deleteRequested?\n    }\n\n    function setDataNewDatabasePost(blockData){\n\t\tconst thisBlockIndex = allAdminAvailabilityDataMutable[blockData.day].findIndex(function(block){\n\t\t\treturn block._id == blockData._id\n\t\t});\n\t\tif(thisBlockIndex != -1){\n\t\t\tallAdminAvailabilityDataMutable[blockData.day][thisBlockIndex] = blockData\n\t\t}else{\n\t\t\tallAdminAvailabilityDataMutable[blockData.day].push(blockData);\n\t\t}\n\t\t\n        createAdminAvailabilityDeepCopy(allAdminAvailabilityDataStable, allAdminAvailabilityDataMutable);\n\t\tevents.publish(\"renderUpdatedAdminBlockData\", {day: blockData.day, blocks: allAdminAvailabilityDataMutable[blockData.day]})\n    }\n\n    function renderAllDays(facilityData){\n        const tempObj = {};\n        createAdminAvailabilityDeepCopy(tempObj, allAdminAvailabilityDataMutable)\n        for(let day in tempObj){\n            tempObj[day].forEach(function(timeBlock){\n                const index = tempObj[day].indexOf(timeBlock)\n                if((timeBlock.availability.startTime < facilityData.facilityOpen || \n                    timeBlock.availability.startTime > facilityData.facilityClose)&&\n                    (timeBlock.availability.endTime < facilityData.facilityOpen || \n                        timeBlock.availability.endTime > facilityData.facilityClose)){\n                        tempObj[day][index].availability.startTime = `Start time ${timeValueConverter.runConvertTotalMinutesToTime( tempObj[day][index].availability.startTime)} is outside facility hours. Speak to supervisor about time changes.`\n                        tempObj[day][index].availability.endTime = `End time ${timeValueConverter.runConvertTotalMinutesToTime( tempObj[day][index].availability.endTime)} is outside facility hours. Speak to supervisor about time changes.`\n                }else if(timeBlock.availability.startTime < facilityData.facilityOpen || \n                    timeBlock.availability.startTime > facilityData.facilityClose){\n                        tempObj[day][index].availability.startTime = `Start time ${timeValueConverter.runConvertTotalMinutesToTime( tempObj[day][index].availability.startTime)} is outside facility hours. Speak to supervisor about time changes.`\n                }else if(timeBlock.availability.endTime < facilityData.facilityOpen || \n                        timeBlock.availability.endTime > facilityData.facilityClose){\n                            tempObj[day][index].availability.endTime = `End time ${timeValueConverter.runConvertTotalMinutesToTime( tempObj[day][index].availability.endTime)} is outside facility hours. Speak to supervisor about time changes.`\n                }     \n            })\n\n            events.publish(\"renderUpdatedAdminBlockData\", {day, blocks: tempObj[day]})\n        }\n    }\n    function setDataBlockDataDeleted(blockData){\n        const {day, _id} = blockData\n\t\tconst newBlocksList = allAdminAvailabilityDataMutable[day].filter(function(block){\n\t\t\treturn _id != block._id\n\t\t})\n\n\t\tallAdminAvailabilityDataMutable[day] = newBlocksList;\n\t\tcreateAdminAvailabilityDeepCopy(allAdminAvailabilityDataStable, allAdminAvailabilityDataMutable);\n\t\tevents.publish(\"renderUpdatedAdminBlockData\", {day, blocks: allAdminAvailabilityDataMutable[day]})\n\t}\n\n})()\n\nexport {allAdminMainPageAdminTimeBlockModel}","import {events} from \"../../../src/events\"\n\nconst allUsersData = (function(){\n\n\tlet allUsersDataStable;\n\tlet allUsersDataMutable;\n\n\tevents.subscribe(\"adminDataFetched\", setDataNewPageRender);\n\tevents.subscribe(\"updateAllUsersModel\", setDataNewDatabasePost)\n\tevents.subscribe(\"deleteUserClicked\", deleteUser)\n\tevents.subscribe(\"editUserClicked\", editUser);\n\tevents.subscribe(\"userDataDeleted\", setDataUserDataDeleted);\n\t\n\n\tfunction setDataNewPageRender(adminAllUsers){\n        allUsersDataStable = adminAllUsers.allUsers;\n\t\tallUsersDataMutable = [];\n        createAllUsersDeepCopy(allUsersDataMutable, allUsersDataStable)\n    }\n\n    function setDataNewDatabasePost(userData){\n\t\tconst thisUserIndex = allUsersDataMutable.findIndex(function(user){\n\t\t\treturn user._id == userData._id\n\t\t});\n\t\tif(thisUserIndex != -1){\n\t\t\tallUsersDataMutable[thisUserIndex] = userData\n\t\t}else{\n\t\t\tallUsersDataMutable.push(userData);\n\t\t}\n\t\t\n        createAllUsersDeepCopy(allUsersDataStable, allUsersDataMutable);\n\t\tevents.publish(\"renderUpdatedUserData\", allUsersDataMutable)\n    }\n\n    function createAllUsersDeepCopy(newArr, copyArr){\n\t\tcopyArr.forEach(function(user){\n\t\t\tnewArr.push(Object.assign({}, user));\n\t\t})\n    }\n\n\tfunction deleteUser(userId){\n\t\tconst thisUser = allUsersDataMutable.filter(function(user){\n\t\t\treturn userId == user._id\n\t\t})[0];\n\n\t\tevents.publish(\"deleteUser\", thisUser)\n\t}\n\n\tfunction editUser(userId){\n\t\tconst thisUser = allUsersDataMutable.filter(function(user){\n\t\t\treturn userId == user._id\n\t\t})[0];\n\t\t\n\t\tevents.publish(\"userDataEditRequested\", thisUser);\n\t}\n\n\tfunction setDataUserDataDeleted(userId){\n\t\tconst newUsersList = allUsersDataMutable.filter(function(user){\n\t\t\treturn userId != user._id\n\t\t})\n\n\t\tallUsersDataMutable = newUsersList;\n\t\tcreateAllUsersDeepCopy(allUsersDataStable, allUsersDataMutable);\n\t\tevents.publish(\"renderUpdatedUserData\", allUsersDataMutable)\n\t}\n\n\t\n})()\n\nexport {allUsersData}","import {events} from \"../../../src/events\"\n\nconst adminMainPageFacilityDataModel = (function(){\n  \n    let adminFacilityDataStable;\n    let adminFacilityDataMutable;\n\n    events.subscribe(\"adminDataFetched\", setDataNewPageRender);\n    events.subscribe(\"facilityDataSaved\", setDataNewDatabasePost); \n    events.subscribe(\"editFacilityDataClicked\", editFacilityData) \n\n    events.subscribe(\"modifyFacilitySelectorValue\", modifyFacilitySelectorValue);\n    events.subscribe(\"updateFacilityDataClicked\", validateFacilityData);\n    events.subscribe(\"adminFacilityDataValidated\", updateFacilityData);\n    events.subscribe(\"cancelFacilityDataChangesClicked\", cancelFacilityDataChanges);\n    events.subscribe('facilityDataValidationFailed', renderFacilityDataValidationErrors)\n\n    function setDataNewPageRender(adminData){\n        adminFacilityDataStable = adminData.facilityData; \n        adminFacilityDataMutable = Object.create({});\n        createFacilityDataDeepCopy(adminFacilityDataMutable, adminFacilityDataStable);\n    }\n\n    function setDataNewDatabasePost(){\n        createFacilityDataDeepCopy(adminFacilityDataStable, adminFacilityDataMutable);\n        events.publish(\"setNewSelectorRanges\", adminFacilityDataMutable)\n        events.publish(\"renderUpdatedFacilityData\", adminFacilityDataMutable);\n        events.publish(\"facilityDataAvailabiltyUpdateComparisonRequested\", adminFacilityDataMutable)\n    }\n\n    function createFacilityDataDeepCopy(newObj, copyObj){\n        for(let prop in copyObj){\n            newObj[prop] = copyObj[prop]\n        }\n    }\n\n    function editFacilityData(){\n        events.publish(\"adminFacilityDataEditRequested\", {facilityData: adminFacilityDataMutable})\n    }\n\n    function modifyFacilitySelectorValue(facilityDataObj){\n        const {modifiedSelector, value} = facilityDataObj\n        adminFacilityDataMutable[modifiedSelector] = Number(value);\n    }\n\n    function validateFacilityData(){\n        events.publish(\"adminFacilityDataValidationRequested\", adminFacilityDataMutable)\n    }\n\n    function updateFacilityData(){\n        events.publish(\"adminFacilityDataUpdateRequested\", adminFacilityDataMutable);\n    }\n    \n    function cancelFacilityDataChanges(){\n        createFacilityDataDeepCopy(adminFacilityDataMutable, adminFacilityDataStable);\n        events.publish(\"adminFacilityDataChangesCancelled\")\n    }\n\n    function renderFacilityDataValidationErrors(validationErrorData){\n        const errors = validationErrorData\n        events.publish(\"renderFacilityDataValidationErrors\", {facilityData: adminFacilityDataMutable, errors})\n    }\n})()\n\nexport {adminMainPageFacilityDataModel}","import {events} from \"../../../src/events\"\n\nconst singleAdminTimeBlockModel = (function(){\n\n    let adminAvailabilityDataStable \n    let adminAvailabilityDataMutable \n\n    const timeBlockDefault = {\n        admin:true,\n        season:null,\n        day:null,\n        availability:{startTime: \"default\", endTime: \"default\"}\n    };\n    \n    events.subscribe('adminDataFetched', setSeason)\n    events.subscribe(\"addAdminTimeBlockClicked\", addAdminAvailabilityBlock);\n    events.subscribe(\"modifyAdminTimeBlockSelectorValue\", modifyAdminAvailabilityValue);\n    events.subscribe(\"adminAvailabilityBlockEditRequested\", setAdminAvailabilityDataEditRequest);\n    events.subscribe(\"cancelAdminBlockChangesClicked\", setAdminAvailabilityDataCancelRequest);\n    events.subscribe(\"updateAdminBlockClicked\", validateChanges);\n    events.subscribe(\"adminAvailabilityDataValidated\", updateBlockData);\n    events.subscribe(\"adminAvailabilityDataValidationFailed\", renderBlockValidationErrors);\n    events.subscribe(\"editAdminBlockDataSaved\", publishBlockUpdatesToAllBlocks);\n    events.subscribe(\"newAdminBlockDataSaved\", addBlockDataToAllBlocks);\n    \n    function setSeason(adminData){\n        timeBlockDefault.season = adminData.season\n    }\n\n    function addAdminAvailabilityBlock(day){\n        adminAvailabilityDataStable = Object.assign({}, timeBlockDefault);\n        adminAvailabilityDataStable.day = day;\n\n        adminAvailabilityDataMutable = Object.assign({}, adminAvailabilityDataStable);\n        adminAvailabilityDataMutable.availability = Object.assign({}, adminAvailabilityDataStable.availability)\n\n        events.publish(\"adminAvailabilityBlockAddRequested\", {timeBlock: adminAvailabilityDataMutable, origin: \"add\"});\n    }\n\n    function setAdminAvailabilityDataEditRequest(timeBlock){\n        adminAvailabilityDataStable =  timeBlock;\n        adminAvailabilityDataMutable = Object.assign({}, adminAvailabilityDataStable)\n        adminAvailabilityDataMutable.availability = Object.assign({}, adminAvailabilityDataStable.availability)\n\n        events.publish(\"adminBlockDataLoaded\", {timeBlock: adminAvailabilityDataMutable, origin:\"edit\"})\n    }\n\n    function setAdminAvailabilityDataCancelRequest(){\n        adminAvailabilityDataStable = {};\n\n        events.publish(\"adminAvailabilityDataChangesCancelled\")\n    }\n\n    function modifyAdminAvailabilityValue(timeBlockObj){\n        const {modifiedSelector, value} = timeBlockObj;\n        \n        adminAvailabilityDataMutable.availability[modifiedSelector] = value;\n    }\n\n    function validateChanges(origin){\n        events.publish(\"adminBlockDataValidationRequested\", {timeBlock: adminAvailabilityDataMutable, origin})\n    }\n\n    function updateBlockData(validatedBlockData){\n\t\tif(validatedBlockData.origin == \"edit\"){\n\t\t\tevents.publish(\"adminBlockUpdateRequested\", validatedBlockData.timeBlock) \n\t\t}else{\n\t\t\tevents.publish(\"newAdminBlockAdditionRequested\", validatedBlockData.timeBlock)\n\t\t}\n\t}\n\n    function renderBlockValidationErrors(validationErrorData){\n        const {errors, origin} = validationErrorData\n        events.publish(\"renderAdminBlockValidationErrors\", {timeBlock: adminAvailabilityDataMutable, errors, origin})\n    }\n\n    function publishBlockUpdatesToAllBlocks(){\n        events.publish(\"updateAllAdminBlocksModel\", adminAvailabilityDataMutable)\n    }\n\n    function addBlockDataToAllBlocks(_id){\n        adminAvailabilityDataMutable._id = _id;\n        events.publish(\"updateAllAdminBlocksModel\", adminAvailabilityDataMutable);\n    }\n\n})()\n\nexport {singleAdminTimeBlockModel}","import { events } from \"../../../src/events\";\n\nconst userData = (function(){\n\n    const userModel = {\n        name: \"\",\n        //password: coming soon\n        color: \"#000000\",\n        privilegeLevel: false,\n        teams:[], \n        availability:{Sun:[], Mon:[], Tue: [], Wed: [], Thu: [], Fri: [], Sat: []}, \n        lastVerified: null,\n\n        //both of the below properties were checkign to see which page/data was last used , cookies/sessionStorage?\n\n        // adminPageSet: null,\n        // season: \"fall\"\n    };\n\n    let userModelStable;\n    let userModelMutable;\n\n    events.subscribe(\"modifyUserNameValue\", setName);\n    events.subscribe(\"modifyUserPrivilegeLevelValue\", setPrivilegeLevel)\n    events.subscribe(\"modifyUserColorValue\", setColor)\n    events.subscribe(\"userDataEditRequested\", setUserModelEditRequest);\n    events.subscribe(\"addUserClicked\", createNewUser);\n    events.subscribe(\"updateUserDataClicked\", validateChanges);\n    events.subscribe(\"cancelUserDataChangesClicked\", setUserModelCancelRequest )\n    events.subscribe(\"editUserDataSaved\", publishUserUpdatesToAllUsers);\n    events.subscribe(\"newUserDataSaved\", addUserDataToAllUsers);\n    events.subscribe(\"userDataValidationFailed\", renderUserValidationErrors);\n    events.subscribe(\"userDataValidated\", updateUserData)\n        //USE ARRAY.MAP AND OBJ EQUIVALENT (?) IN DATAMODElS FOR DEEP COPIES?\n    \n    function setUserModelEditRequest(userData){\n        userModelStable = userData\n        userModelMutable = Object.assign({}, userModelStable)\n\n        events.publish(\"userDataLoaded\", {userData: userModelMutable, origin:\"edit\"})\n    }\n\n    function setUserModelCancelRequest(){\n        userModelMutable = Object.assign({}, userModelStable);\n\n        events.publish(\"userDataChangesCancelled\")\n    }\n\n    function publishUserUpdatesToAllUsers(){\n        events.publish(\"updateAllUsersModel\", userModelMutable)\n    }\n\n    function addUserDataToAllUsers(_id){\n        userModelMutable._id = _id;\n        events.publish(\"updateAllUsersModel\", userModelMutable);\n    }\n    \n    function createNewUser(){\n        userModelStable = Object.assign({}, userModel);\n        userModelMutable = Object.assign({}, userModelStable);\n\n        events.publish(\"newUserModelBuilt\", {userData: userModelMutable, origin:\"add\"})\n    }\n\n    function setName(name){\n        userModelMutable.name = name;\n    }\n\n    function setColor(color){\n        userModelMutable.color = color\n    }\n\n    function setPrivilegeLevel(privilege){\n        userModelMutable.privilegeLevel = privilege;\n    }\n\n    function validateChanges(origin){\n        events.publish(\"userDataValidationRequested\", {userData: userModelMutable, origin})\n    }\n\n    function renderUserValidationErrors(validationErrorData){\n        const {errors, origin} = validationErrorData\n        events.publish(\"renderUserValidationErrors\", {data: userModelMutable, errors, origin})\n    }\n\n    function updateUserData(validatedUserData){\n\t\tif(validatedUserData.origin == \"edit\"){\n\t\t\tevents.publish(\"userUpdateRequested\", validatedUserData.userData) \n\t\t}else{\n\t\t\tevents.publish(\"newUserAdditionRequested\", validatedUserData.userData)\n\t\t}\n\t}\n})()\n\nexport {userData}\n\n","import {events} from \"../src/events\"\n\nconst databasePost = (function(){\n\n    events.subscribe(\"userUpdateRequested\", updateUserData);\n    events.subscribe(\"newUserAdditionRequested\", addUserData);\n    events.subscribe(\"deleteUserRequested\", deleteUserData);\n    events.subscribe('adminBlockUpdateRequested', updateAdminBlockData);\n    events.subscribe('newAdminBlockAdditionRequested', addAdminBlockData)\n    events.subscribe('adminBlockDeleteRequested', deleteAdminBlockData);\n    events.subscribe('availabilityBlockUpdateRequested', updateUserBlockData);\n    events.subscribe('newAvailabilityBlockAdditionRequested', addUserBlockData)\n    events.subscribe('availabilityBlockDeleteRequested', deleteUserBlockData)\n   \n    // events.subscribe(\"adminAllTeamsDataUpdated\", changeAllTeamsData)\n    events.subscribe(\"adminFacilityDataUpdateRequested\", updateFacilityData)\n   \n    // events.subscribe(\"myTeamsDataUpdated\", changeMyTeamsData)\n    // events.subscribe(\"verifyUpToDateClicked\", changeVerificationData)//\n    // events.subscribe(\"pageChangeRequested\", alertAndLogCurrentObject);\n    // events.subscribe(\"userSeasonChangeRequested\", changeUserSeason); //\n    // events.subscribe(\"adminSeasonChangeRequested\", changeAdminSeason);;\n    \n    \n\n    function alertAndLogCurrentObject(databaseBoundObject){\n        console.log(databaseBoundObject)\n        alert(databaseBoundObject)\n    }\n\n    async function updateFacilityData(databaseBoundObject){ \n        try{\n            await fetch('adminHome/postAdminFacilitySettings.json', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n            events.publish(\"facilityDataSaved\")\n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n       \n    }\n\n    async function updateUserData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${_id}/update.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){ \n                events.publish(\"editUserDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user/add.json', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){\n                const newUser = await userDataResponse.json();  \n                events.publish(\"newUserDataSaved\", newUser)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserData(userId){\n        const idObj = {_id: userId}\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${userId}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                alert(errors);\n            }else if(userDataResponse.status == 200){\n                events.publish(\"userDataDeleted\", userId)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAdminBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${_id}/update.json`, { //change the path\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAdminBlockDataSaved\") //find receiver\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addAdminBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('adminHome/timeBlock/add.json', {  //get rid of hard coded season as soon as possible\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAdminBlockDataSaved\", newAdminBlock) //find listener\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteAdminBlockData(blockData){\n        const idObj = {_id: blockData._id}\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${blockData._id}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"adminBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    ///\n    async function updateUserBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${_id}/update.json`, { //change the path\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n               \n                const errors = await blockDataResponse.json();\n                console.log(errors)\n                const origin = \"edit\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAvailabilityBlockDataSaved\") \n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('home/timeBlock/add.json', { \n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAvailabilityBlockDataSaved\", newAdminBlock)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserBlockData(blockData){\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${blockData._id}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(blockData)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"availabilityBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    ///\n\n    function changeAllTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.allTeams - b.rank.allTeams\n        })\n        adminTestObj.allTeams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAllUsersArray(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.allUsers = databaseBoundObject;\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAdminSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeUserSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n\n    function changeVerificationData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.lastVerified = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeAvailabilityData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.availability = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeMyTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.myTeams - b.rank.myTeams\n        })\n        userTestObj.teams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    let userTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:false,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n        [\n            {\n            name:\"basketballWomen\",\n            coach: \"Brindle\",\n            rank:\n                {\n                    myTeams: 0,\n                    allTeams:6\n                },\n            size: 15,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n            \n            {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:5\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n    \n            {\n            name: \"football\",\n            coach:\"Brindle\",\n            rank:\n                {\n                    myTeams: 2,\n                    allTeams:1\n                },\n            size: 110,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n    \n                    [\n                        {dayOfWeek:\"Wed\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Sat\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n        ],\n        lastVerified: null,\n        adminPageSet:null,\n        season:\"fall\",\n        allTeams:\n            [\n                {\n                name: \"football\",\n                coach:\"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:1\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:6\n                    },\n                size: 15,\n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:5\n                        },\n                    size: 25,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 4,\n                            allTeams:4\n                        },\n                    size: 50,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n            ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:150\n        }\n    \n    }\n    \n    let adminTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:true,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                \n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            ],\n        lastVerified: null,\n        adminPageSet:\"admin\",\n        season:\"fall\",\n    \n        allTeams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                enabled: true,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                enabled: true,\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name: \"football\",\n                coach:\"Rivera\",\n                enabled: false,\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:2\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"sprintFootball\",\n                coach: \"Dolan\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:3\n                    },\n                size: 50,\n                enabled: true,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n        ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:120\n        },\n    \n        allUsers:\n        [\n            {\n            name: \"Brindle\",\n            color: \"#00ff00\",\n            privilegeLevel:true,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"basketballWomen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                        myTeams: 0,\n                        allTeams:0\n                        },\n                    size: 15,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:1\n                        },\n                    size: 25,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:\"admin\",\n            season:\"fall\"\n            },\n    \n            {    \n            name: \"Rivera\",\n            color: \"#0000ff\",\n            privilegeLevel:false,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name: \"football\",\n                    coach:\"Rivera\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:2\n                        },\n                    size: 110,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\",\n            },\n    \n            {    \n            name: \"Dolan\",\n            privilegeLevel:false,\n            color: \"#ffa500\",\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:3\n                        },\n                    size: 50,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\"\n            }\n        ],\n    \n        adminTimeBlocks:\n            {\n            Sun:[],\n            Mon:[{startTime: \"420\", endTime: \"540\", admin: \"yes\"}],\n            Tue:[],\n            Wed:[],\n            Thu:[{startTime: \"780\", endTime: \"840\", admin: \"yes\"}],\n            Fri:[],\n            Sat:[]\n            }\n    }\n\n})();\n\nexport {databasePost}","\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\nexport {events}","//purpose: convert totalMinutes into clockTime, and clockTime into totalMinutes\n\nconst timeValueConverter = (function(){\n    //no obvious issues here\n    function convertTotalMinutesToTime(totalMins){\n        let standardTime;\n        let hour = Math.floor(totalMins/60)\n        let meridian\n            switch(hour){\n                case 0:\n                    hour += 12\n                    meridian = \"a\"\n                    break;\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                    meridian = \"a\"\n                    break;\n                case 12:\n                    meridian = \"p\"\n                    break;\n                default:\n                    hour -=12\n                    meridian = \"p\"\n                    break;\n            }\n            \n        let mins = totalMins%60\n            if(mins == 0){\n                mins = \"00\"\n            }\n        standardTime = `${hour}:${mins}${meridian}`\n        return standardTime\n    }\n\n    function runConvertTotalMinutesToTime(totalMins){\n        return convertTotalMinutesToTime(totalMins)\n    }\n\n    function convertTimeToTotalMinutes(time){\n        const colonIndex = time.indexOf(\":\");\n        const meridian = time[time.length-1]\n        const meridianIndex = time.indexOf(meridian);\n        \n        let hour = Number(time.slice(0, colonIndex));\n            if(meridian == \"p\" && hour != 12){\n                hour +=12;\n            }else if(meridian == \"a\" && hour == 12){\n                hour -=12;\n            }\n        const min = Number(time.slice(colonIndex + 1, meridianIndex));\n        const totalMinutes = hour*60 + min;\n\n        return totalMinutes\n    }\n\n    function runConvertTimeToTotalMinutes(time){\n        return convertTimeToTotalMinutes(time)\n    }\n\n    return {runConvertTimeToTotalMinutes, runConvertTotalMinutesToTime}\n\n})();\n\nexport{timeValueConverter}","import { events } from \"../events\";\n\nconst availabilityValidator = (function(){\n  \n    events.subscribe(\"adminBlockDataValidationRequested\", validateAllAdminAvailability);\n    events.subscribe(\"availabilityValidationRequested\", validateAllUserAvailability);\n    \n    function validateAllAdminAvailability(timeBlockData){\n        const {timeBlock, origin} = timeBlockData\n        const errorArray = []\n        validateAllInputs(timeBlock, errorArray)\n        \n        \n        if(errorArray.length == 0){\n            events.publish(\"adminAvailabilityDataValidated\", timeBlockData)\n        }else{\n            events.publish(\"adminAvailabilityDataValidationFailed\", {errors: errorArray, origin})\n        }\n    }\n    \n    function validateAllUserAvailability(timeBlockData){\n        const {timeBlock, origin} = timeBlockData\n        const errorArray = []\n        validateAllInputs(timeBlock, errorArray)\n\n        if(errorArray.length == 0){\n            events.publish(\"userAvailabilityDataValidated\",timeBlockData);\n        }else{\n            events.publish(\"userAvailabilityValidationFailed\", {errors: errorArray, origin})\n        }\n    }\n    \n    function validateAllInputs(timeBlock, array){\n        try{\n            for(let prop in timeBlock.availability){\n                if(timeBlock.availability[prop] == \"default\"){\n                    throw(`Value for ${prop} cannot be default`);\n                }\n            }\n\n            if(timeBlock.availability.startTime >= timeBlock.availability.endTime){\n                throw('Start time overlaps with end time!')\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n})()\n\nexport {availabilityValidator}","import { events } from \"../events\";\n\n/*purpose: validator for facilityData updates\n\nfacilityData object is modeled as such:\n\nobj = {\n    facilityOpen, \n    facilityClose, \n    facilityMaxCapacity\n}\n\npublishes:\n    successful validations FOR adminMainPageFacilityDataModel\n   \nsubscribes to: \n    validation requests FROM adminMainPageFacilityDataModel\n*/\n\nconst facilityDataValidator = (function(){\n    //no obvious issues here\n    events.subscribe(\"adminFacilityDataValidationRequested\", validateAdminFacilityData);\n    \n    function validateAdminFacilityData(facilityData){\n        \n        const errorArray = [];\n  \n        for(let prop in facilityData){\n            \n            if(facilityData[prop] == \"default\"){\n                const string = \"A non-default value must be selected for: \";\n                string.concat(prop);\n                errorArray.push(string);\n            }\n        }\n\n        if(facilityData.facilityOpen >= facilityData.facilityClose){\n            errorArray.push('Start time overlaps with end time!')\n        }\n\n        if(errorArray.length > 0){\n            events.publish('facilityDataValidationFailed', errorArray)\n        }else{\n            events.publish(\"adminFacilityDataValidated\", facilityData)\n        }\n    }\n})()\n\nexport {facilityDataValidator}","import { events } from \"../../src/events\";\n\nconst userDataValidator = (function(){\n    \n    events.subscribe(\"userDataValidationRequested\", validateAllInputs);\n    \n    //\n    function validateAllInputs(adminUserData){\n        const {userData, origin} = adminUserData\n\n        const errorArray = [];\n\n        validateUserName(userData, errorArray); \n        validateColor(userData, errorArray)\n\n        if(errorArray.length > 0){\n            events.publish(\"userDataValidationFailed\", {errors: errorArray, origin});\n        }else{\n            events.publish(\"userDataValidated\", adminUserData);\n        }\n    }\n\n    function validateUserName(userModel, array){\n        const userName = userModel.name;\n        const userNameRegex = /[^A-Za-z0-9]/;\n        try{\n            if(userNameRegex.test(userName)){\n                throw(\"User names can only include letters and numbers (no spaces or symbols).\");\n            }else if(userName == \"\"){\n                throw(\"User name must have a value.\");\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n\n    function validateColor(userModel, array){\n        const color = userModel.color;\n        try{\n            if(color == \"#000000\"){\n                throw(\"Color must have a value not equal to black. Black is default value, and must be changed.\")\n            }\n        }catch(err){\n            array.push(err)\n        }\n\n    }\n})()\n\nexport {userDataValidator}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {events} from \"../src/events\"\nimport {adminHomeRender} from \"../src/adminHomePage/components/adminHomeRender\"\n\nimport {facilityDataGridComponent} from \"../src/adminHomePage/components/mainModulesRenders/facilityDataGrid\"\nimport {facilityDataFormComponent} from \"../src/adminHomePage/components/forms/facilityDataForm\";\nimport {facilityData} from \"../src/adminHomePage/models/facilityData\";\nimport {facilityDataValidator} from \"../src/validators/facilityDataValidator\"\n\nimport {userDataGridComponent} from \"../src/adminHomePage/components/mainModulesRenders/userGrid\";\nimport {userDataFormComponent} from \"../src/adminHomePage/components/forms/userForm\"\nimport {allUsersData} from \"../src/adminHomePage/models/allUsersData\"\nimport {userData} from \"../src/adminHomePage/models/userData\"\nimport {userDataValidator} from \"../src/validators/userValidator\"\n\nimport { adminTimeBlockDataGridComponent } from \"../src/adminHomePage/components/mainModulesRenders/adminTimeBlocksGrid\";\nimport { adminTimeBlockDataFormComponent } from \"../src/adminHomePage/components/forms/adminTimeBlockForm\";\nimport {allAdminTimeBlocksData} from \"../src/adminHomePage/models/allAdminTimeBlocksData\"\nimport {singleAdminTimeBlockModel} from \"../src/adminHomePage/models/timeBlockData\"\nimport { availabilityValidator } from \"../src/validators/availabilityValidator\"\n\nimport {databasePost} from \"../src/databasePost\"\n\nwindow.onload = setScriptData;\n\nasync function setScriptData(){\n    try{\n        const adminPageJSON = await fetch('adminHome/adminData.json'); //change this to accept userId and season\n        const adminPageData = await adminPageJSON.json();\n        console.log(adminPageData)\n        events.publish(\"adminDataFetched\", adminPageData);\n        events.publish(\"adminDataSet\");\n        \n    }catch(err){\n        console.log(err)\n    }\n}\n"],"names":[],"sourceRoot":""}