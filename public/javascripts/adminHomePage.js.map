{"version":3,"file":"adminHomePage.js","mappings":";;;;;;;;;;;;;;;;AAAgC;AACmB;;AAEnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;AACA;AACA,SAAS;AACT,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI,qDAAgB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,aAAa;AACb,mCAAmC,2FAA+C,KAAK;AACvF,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;AAEsB;;;;;;;;;;;;;;;;ACnJsB;;AAE7C,WAAW,YAAY;AACvB,WAAW,YAAY;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB,uCAAuC,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI;AACtF;AACA,SAAS,GAAG,IAAI,GAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,2BAA2B;AAC3B;AACA,SAAS,GAAG,IAAI,GAAG,IAAI;;AAEvB;AACA,SAAS;;AAET;AACA,SAAS,QAAQ,2BAA2B,GAAG,2BAA2B,YAAY,2BAA2B,GAAG,2BAA2B,EAAE;;AAEjJ;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,yDAAgB,0CAA0C;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,uDAAc;AAClC;AACA;AACA,oBAAoB,uDAAc;AAClC;AACA,aAAa;AACb;;AAEA;;;;AAIA;;AAEA;AACA,YAAY,uDAAc;AAC1B;AACA;;;;;;AAMA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA,yEAAyE,SAAS;AAClF;AACA,gBAAgB;;AAEhB;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA,CAAC;;AAEqB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oIAAoI;AACpM,gEAAgE,yHAAyH;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnOgD;AACyB;;AAEzE;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB;AAChB;;;AAGA;AACA;AACA;AACA;;AAEA,gCAAgC,6FAAgC;AAChE;AACA,gFAAgF,2BAA2B;AAC3G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,iCAAiC,wBAAwB;AACvF;;AAEA;AACA,SAAS;AACT;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uDAAc;AAC9B,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA,CAAC;;AAEiC;;;;;;;;;;;;;;;;;;;;;AC7Fc;;AAEhD;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,uDAAc;AAC1B;;AAEA;AACA,YAAY,uDAAc;AAC1B;;AAEA;AACA;AACA,2GAA2G,eAAe,KAAK,wBAAwB;AACvJ;AACA,oBAAoB,uDAAc;AAClC,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uDAAc;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,uDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAE6B;;;;;;;;;;;;;;;;;;ACjJgB;AACY;;AAE1D;;AAEA,IAAI,yDAAgB,uDAAuD;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gEAAgE,2FAA+C,4BAA4B,GAAG;AAC9I,kEAAkE,2FAA+C,6BAA6B;AAC9I,sEAAsE,iCAAiC;AACvG;AACA,CAAC;;AAEiC;;;;;;;;;;;;;;;;AC7BlC;AACgD;;AAEhD;;AAEA,IAAI,yDAAgB;;AAEpB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;;;AAGA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA,SAAS;AACT;AACA;AACA,+DAA+D,sBAAsB;AACrF;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;;AAEA,CAAC;AACD;AACA;;;AAG8B;;;;;;;;;;;;;;;;AClFY;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,2BAA2B;AAC3B;AACA;AACA;AACA,SAAS;AACT,GAAG,IAAI,GAAG;AACV;;AAEA,0CAA0C;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;;AAEA,CAAC,yDAAgB;AACjB,CAAC,yDAAgB;;AAEjB,CAAC,yDAAgB;AACjB,CAAC,yDAAgB;AACjB,CAAC,yDAAgB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,uDAAc;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE,uDAAc;AAChB;;AAEA,gDAAgD;AAChD,EAAE,uDAAc,yBAAyB,SAAS;AAClD;AACA;;AAEA;AACA;AACA,GAAG,uDAAc;AACjB,GAAG;AACH,GAAG,uDAAc;AACjB;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC/FyC;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,IAAI,yDAAgB;AACpB;AACA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB,+CAA+C;AACnE,IAAI,yDAAgB;;AAEpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA,0DAA0D;AAC1D,mDAAmD;AACnD;AACA;;AAEA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA,eAAe,yBAAyB;AACxC;AACA;;AAEA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;;;AAIA,CAAC;;;;;;;;;;;;;;;;;ACjF4C;;AAE7C;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,uBAAuB;AACvB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C,QAAQ,uDAAc,oBAAoB,0CAA0C;AACpF;;AAEA;AACA,2CAA2C;;AAE3C,QAAQ,uDAAc;AACtB;;AAEA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAA4D;AACtF;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C,QAAQ,uDAAc,uBAAuB,yCAAyC;AACtF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA,QAAQ,uDAAc,iCAAiC,mCAAmC;AAC1F;;AAEA;AACA,eAAe,gBAAgB;AAC/B,QAAQ,uDAAc,gCAAgC,uCAAuC;AAC7F;;AAEA,CAAC;AACgB;;;;;;;;;;;;;;;;;;AChHmB;AACuB;;AAE3D;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB;AACA;AACA,IAAI,yDAAgB;AACpB;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,YAAY,uDAAc;AAC1B,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;;AAGA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAA6D;AAC1F,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;ACpmBD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,GAAG,KAAK,EAAE,SAAS;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;;;;;;;;;;;;;;;;ACtEkC;;AAEnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,YAAY,mDAAc;AAC1B;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC1CyC;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,uBAAuB;AACvB;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,yDAAgB;AACpB;AACA;AACA,eAAe,kBAAkB;;AAEjC;;AAEA;AACA;;AAEA;AACA,YAAY,uDAAc,8BAA8B,2BAA2B;AACnF,SAAS;AACT,YAAY,uDAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,CAAC;;;;;;;;UClED;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;ACNoC;AAC2C;;AAE8B;AACZ;AAC3B;AACO;;AAEqB;AACd;AACf;AACR;AACI;;AAEjB;;AAEhD;;AAEA;AACA;AACA,uEAAuE;AACvE;AACA,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB;AACA,KAAK;AACL;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mEAAmE,aAAa;AAChF;AACA;AACA;AACA,qEAAqE,aAAa;AAClF;AACA,YAAY;;AAEZ;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ;AACR,M","sources":["webpack://pennschedule/./src/DOMBuilders/selectorDOMBuilder.js","webpack://pennschedule/./src/adminHomePage/components/adminHomeRender.js","webpack://pennschedule/./src/adminHomePage/components/forms/facilityDataForm.js","webpack://pennschedule/./src/adminHomePage/components/forms/userForm.js","webpack://pennschedule/./src/adminHomePage/components/mainModulesRenders/facilityDataGrid.js","webpack://pennschedule/./src/adminHomePage/components/mainModulesRenders/userGrid.js","webpack://pennschedule/./src/adminHomePage/models/allUsersData.js","webpack://pennschedule/./src/adminHomePage/models/facilityData.js","webpack://pennschedule/./src/adminHomePage/models/userData.js","webpack://pennschedule/./src/databasePost.js","webpack://pennschedule/./src/events.js","webpack://pennschedule/./src/timeConverter.js","webpack://pennschedule/./src/validators/facilityDataValidator.js","webpack://pennschedule/./src/validators/userValidator.js","webpack://pennschedule/webpack/bootstrap","webpack://pennschedule/webpack/runtime/define property getters","webpack://pennschedule/webpack/runtime/hasOwnProperty shorthand","webpack://pennschedule/webpack/runtime/make namespace object","webpack://pennschedule/./src/adminHomePage.js"],"sourcesContent":["import {events} from \"../events\"\nimport {timeValueConverter} from \"../timeConverter\"\n\nconst selectorBuilder = (function(){ \n\n    //default values must be input (into database?) for facilityOpen/Close/MaxCapacity BEFORE first time running, or startTime/endTime/teamSize will have errors!\n    const selectionRanges = { \n        startTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        endTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        teamSize: {\n            start: 5,\n            end: null,\n            increment: 5\n        },\n        facilityOpen:{ //4am to 8pm, default value 6am (360)?\n            start: 240,\n            end: 1200,\n            increment: 15\n        },\n        facilityClose:{ //5am to 9pm, default value 8pm (1200)?\n            start: 300,\n            end: 1260,\n            increment: 15\n        },\n        facilityMaxCapacity:{//range 10-150, default value 120?\n            start: 10,\n            end: 150,\n            increment: 5\n        },\n        dayOfWeek: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], \n        inWeiss: [\"yes\", \"no\"],\n    };\n    \n    events.subscribe(\"SOME DATA BASE FETCH FIX THIS FIX THIS\", setSelectorRanges);\n    \n\n    //call this after dbFetch\n    function setSelectorRanges(databaseRanges){\n        selectionRanges.startTime.start = databaseRanges.facilityOpen;\n        selectionRanges.endTime.start = databaseRanges.facilityOpen + 30;\n        selectionRanges.startTime.end = databaseRanges.facilityClose - 30;\n        selectionRanges.endTime.end = databaseRanges.facilityClose;\n        selectionRanges.teamSize.end = databaseRanges.facilityMaxCapacity;\n    }\n\n    function runBuildSelector(primaryClass){\n        return buildSelector(primaryClass)\n    }\n\n    \n\n    function buildSelector(primaryClass){\n        const selection = document.createElement(\"select\");\n        selection.classList.add(primaryClass);\n        selection.classList.add(\"selector\");\n            const defaultOption = document.createElement(\"option\");\n            defaultOption.value = \"default\";\n            defaultOption.innerText = \"--\";\n        selection.appendChild(defaultOption);\n\n        switch(primaryClass){\n            case \"dayOfWeek\":\n            case \"inWeiss\": \n                buildArraySelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"teamSize\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;   \n            case \"endTime\":\n            case \"facilityClose\":\n            case \"facilityMaxCapacity\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"startTime\":\n            case \"facilityOpen\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                selection.addEventListener(\"change\", modifyEndTimeDefaultValue);\n                break;\n        }\n\n        selection.addEventListener(\"change\", disableDefaultOption)\n\n        return selection\n    }\n\n    function buildArraySelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        optionValues.forEach(function(optionValue){\n            const option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.innerText = optionValue;\n            selector.appendChild(option); \n        })\n    }\n\n    function buildRangeSelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        for(let i = optionValues.start; i<=optionValues.end; i += optionValues.increment){\n            const option = document.createElement(\"option\");\n            option.value = i;\n            if(primaryClass == \"teamSize\" || primaryClass == \"facilityMaxCapacity\"){\n                option.innerText = i;\n            }else{\n                option.innerText = timeValueConverter.runConvertTotalMinutesToTime(i); //toString() should not be necessary\n            }selector.appendChild(option);\n        }\n    }\n\n        //these are all not working, may need to use event delegation within the modules themselves\n\n    function modifyEndTimeDefaultValue(){\n        const startTimeSelectedValue = Number(this.value);\n        const endTimeValuesArray = Array.from(this.parentElement.nextElementSibling.lastElementChild.children);\n        endTimeValuesArray.forEach(function(time){\n            const endTimeValue = Number(time.value);\n            if(endTimeValue < startTimeSelectedValue + 30 || endTimeValue == \"default\"){\n                time.disabled = true;\n            }else{\n                time.disabled = false;\n            }\n            if(endTimeValue == startTimeSelectedValue + 60){\n                time.selected = true;\n            }else{\n                time.selected = false;\n            }\n        })\n    }\n\n    function disableDefaultOption(){ //these are all not working, may need to use event delegation within the modules themselves\n        const values = Array.from(this.children);\n        values[0].disabled = true;\n    }\n\n    return {runBuildSelector}\n\n})();\n\nexport{selectorBuilder}\n","import { events } from \"../../../src/events\";\n\n// import {adminTeams} from \"./components/teamGrid\";\n// import {adminUsers} from \"./components/userGrid\";\n\n/*action: admin interface for observing allTeams/allUsers, setting facility parameters, blocking off time for all users, and running the scheduling function\n\nadminMainPageData object is modeled as such:\n\nobj = {\n    allTeams: \n        [{ \n            teamName,\n            teamSize, \n            rank:\n                {\n                    myTeams,\n                    allTeams\n                },\n            allOpts: [[{dayOfWeek, startTime, endTime, inWeiss}, {etc}], [{etc}, {etc}], []],\n            coach,\n        }, {etc}, {etc}]\n\n    allUsers:\n        [{\n            name,\n            color,\n            password, //MAKE SURE THIS DOES NOT GET PASSED TO FRONT END\n            privilegeLevel,\n            teams:{},\n            availability:{},\n            lastVerified\n        }, {etc}, {etc}]\n\n    facilitySelectors:\n        {facilityOpen, facilityClose, facilityMaxCapacity}\n\n    adminTimeBlocks:\n        {day: [{{startTime, stopTime, admin}, {startTime, stopTime, admin}, ], day: [{startTime, stopTime, admin}, {startTime, stopTime, admin}]},  make sure empties don't screw anything up\n\n    season,\n}\n\nadminSelectorsObj is modeled as such:\n\nobj = {\n\n    startTime: (pre-built select HTML element),\n    endTime: etc,\n    teamSize: etc,\n    facilityOpen: etc,\n    facilityClose: etc,\n    facilityMaxCapacity: etc,\n    dayOfWeek: etc,\n    inWeiss: etc\n}\n\npublishes:\n    page render requests FOR pageRenderer\n    season change requests FOR (?)\n    scheduler run requests FOR (?)\n    admin allTeam rank changes FOR adminAllTeamsDataModel\n    user add requests FOR adminUserGeneratorModel \n    user edit/delete requests for adminAllUsersDataModel\n    facilityData changes, save requests, and change cancellations FOR adminMainPageFacilityDataModel\n    \n\nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    adminSelectorsBuilt FROM selectorDOMBuilder\n    adminAvailability and adminFacility model updates FROM adminAvailabity and adminFacility data models\n*/\n\nconst adminHomeMain = (function(){\n\n    events.subscribe(\"adminDataSet\", setAdminEventListeners); //some prompt about setting data in client models\n\n    function setAdminEventListeners(){\n        setFacilityDataListeners()\n        setUserDataListeners();\n    }\n\n    function setFacilityDataListeners(){\n        const facilityEditButton = document.querySelector(\"#adminMainPageFacilitySelectorsEditButton\");\n        facilityEditButton.addEventListener(\"click\", requestAdminDataEdit);\n    \n        function requestAdminDataEdit(){\n            events.publish(\"editFacilityDataClicked\");\n        }\n    }\n\n    function setUserDataListeners(){\n        const addUserButton = document.querySelector(\"#adminUsersGridAddUser\");\n        \n        const allUsers = Array.from(document.querySelectorAll(\".adminUserGridUser\"));\n        if(allUsers.length >0){\n            allUsers.forEach(function(user){\n                const _id = user.dataset.userid;\n                const editButton = user.querySelector(\".adminUserGridUserEditButton\");\n                const deleteButton = user.querySelector(\".adminUserGridUserDeleteButton\")\n\n                editButton.addEventListener(\"click\", editUser);\n                deleteButton.addEventListener(\"click\", deleteUser);\n\n                function editUser(){\n                    events.publish(\"editUserClicked\", _id)\n                }\n                function deleteUser(){\n                    events.publish(\"deleteUserClicked\")\t\n                }\n            })\n        }\n\n        //need to add qSAll for edit/delete buttons that listen to appropriate event\n\n\n\n        addUserButton.addEventListener(\"click\", addUser)\n\n        function addUser(){\n            events.publish(\"addUserClicked\")\n        }\n    }\n\n\n\n\n\n//     events.subscribe(\"\", renderAdminTimeBlocksForm) //add listener for render click\n\n//     function renderAdminTimeBlocksForm(adminTimeBlockDayData){\n//         renderTimeBlockDataForm(adminTimeBlockDayData);\n//     }\n\n//     function setAdminTimeBlockListeners(){\n//         const dayBlocks = Array.from(document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\").children);\n//         dayBlocks.forEach(function(day){\n//             const dayName = day.firstChild(\"h3\").innerText;\n//             const addButton = day.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockAddButton\")\n\n//             const timeBlocks = Array.from(day.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersAllBlocks\"))\n//             timeBlocks.forEach(function(block){\n//                 const _id = block.dataset.dataTimeBlockId;\n//                 const editButton = block.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton\");\n//                 const deleteButton = block.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton\");\n\n//                 editButton.addEventListener(\"click\", requestAvailabilityBlockEdit);\n//                 deleteButton.addEventListener(\"click\", requestAvailabilityBlockDelete);\n\n//                 function requestAvailabilityBlockEdit(){\n//                     //class change?\n//                     events.publish(\"editAdminAvailabilityClicked\", {day, _id})\n                    \n//                 }\n//                 function requestAvailabilityBlockDelete(){\n//                     events.publish(\"deleteAdminAvailabilityClicked\", {day, _id})\n//                 }\n//             })\n\n//             addButton.addEventListener(\"click\" , requestAvailabilityBlockNew);\n\n//             function requestAvailabilityBlockNew(){\n//                 //class change?\n//                 events.publish(\"adminAvailabilityBlockAddRequested\", day)\n\n//             }\n//         })     \n//     }  \n})()\n\nexport {adminHomeMain}\n\n  // let season //?\n    \n    // events.subscribe(\"adminMainPageModelBuilt\", setSeason)\n    // events.subscribe(\"adminMainPageModelBuilt\", ANOTHERFUNCTIONHERE?);\n    // events.subscribe(\"adminAvailabilityModelModified\", renderAdminAllTimeBlocks);\n    // events.subscribe(\"adminFacilityModelModified\", renderFacilityDataGrid)\n    \n    // function setSeason(adminMainPageData){\n    //     season = adminMainPageData.season\n    // }\n\n    // function changeSeason(){\n            \n    // }\n\n    // function runScheduler(){\n    //     events.publish(\"runSchedulerRequested\") \n    // }\n\n    // //find subscribers to changeSeasons and runScheduler, issue NOT TO BE ADDRESSED:  scheduler could be run with unsaved modifications to adminAvail and facilityData\n    // function buildAdminMainPageDOM(adminMainPageData){\n       \n        \n    \n     \n        \n    //     const adminFacilityData = content.querySelector(\"#facilityDataGridContainer\");\n    //     const adminAddTimeBlock = content.querySelector(\"#setAllUsersAvailabilityGridContainer\");\n        \n    \n    //     const adminAllUsersNew = renderAdminAllUsersGrid(adminAllUsers, adminMainPageData.allUsers);\n    //     const adminFacilityDataNew = renderFacilityDataGrid({adminFacilityDataContainer: adminFacilityData, adminMainPageData: adminMainPageData.facilitySelectors, pageRenderOrigin: \"template\"});\n    //     const adminAddTimeBlockNew = renderAdminTimeBlocker({adminTimeBlockDiv: adminAddTimeBlock, adminMainPageData: adminMainPageData.adminTimeBlocks, pageRenderOrigin: \"template\"});\n    \n    //     adminAllUsers.replaceWith(adminAllUsersNew); \n    //     adminFacilityData.replaceWith(adminFacilityDataNew);\n    //     adminAddTimeBlock.replaceWith(adminAddTimeBlockNew);\n    \n    //     seasonButtons.forEach(function(button){\n    //         if(!button.disabled){\n    //             button.addEventListener(\"click\", changeSeason)\n    //         }else{\n                \n               \n    //         }\n    //     })\n\n    //     schedulerButton.addEventListener(\"click\", runScheduler)   \n    // }\n\n    // function setElements(){\n        \n        \n    //     const seasonButtons = Array.from(content.querySelectorAll(\"#adminSeasonButtons > button\"));\n    //     const schedulerButton = content.querySelector(\"#runScheduleBuilderButton\");\n    // }","import { events } from \"../../../../src/events\";\nimport { selectorBuilder } from \"../../../DOMBuilders/selectorDOMBuilder\"\n\nconst facilityDataFormComponent = (function(){\n\n    events.subscribe(\"adminFacilityDataEditRequested\", renderFacilityDataForm);\n    events.subscribe(\"adminFacilityDataChangesCancelled\", unrenderFacilityDataForm);\n    events.subscribe(\"facilityDataSaved\", unrenderFacilityDataForm)\n    \n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\")\n\n\n    function renderFacilityDataForm(facilityData){\n        \n        const elements = setElements();\n        populateSelectors(elements, facilityData);\n        setEventListeners(elements);\n\n        formDiv.appendChild(elements.content);\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n\n    function unrenderFacilityDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n\n\n    function setElements(){\n        const template = document.querySelector(\"#adminFacilityDataFormTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const facilitySelectors = content.querySelectorAll(\".selector\");                  \n        const saveButton = content.querySelector(\"#adminMainPageFacilitySelectorsSaveButton\");\n        const cancelButton = content.querySelector(\"#adminMainPageFacilitySelectorsCancelButton\");\n\n        return {content, facilitySelectors, saveButton, cancelButton}\n    }\n\n\n    function populateSelectors(selectorElements, facilityData){\n        \n        selectorElements.facilitySelectors.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n\n            const selectorNew = selectorBuilder.runBuildSelector(primaryClass);\n            \n            const selectedOption = selectorNew.querySelector(`option[value = \"${facilityData[primaryClass]}\"]`);\n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectorNew.firstChild.disabled = true;\n            }\n\n            selectorNew.addEventListener(\"change\", publishSelectionValueChange);\n            \n            function publishSelectionValueChange(){\n                const modifiedSelector = primaryClass\n                const value = selectorNew.value;\n                events.publish(\"modifyFacilitySelectorValue\", {modifiedSelector, value})\n            }\n\n            selector.replaceWith(selectorNew)\n        })\n    }\n\n\n    function setEventListeners(selectorElements){\n\n        selectorElements.saveButton.addEventListener(\"click\", updateFacilityData);\n        selectorElements.cancelButton.addEventListener(\"click\", cancelFacilityDataChanges);\n\n        function updateFacilityData(){\n            const confirmation = confirm(\"Changing facility settings from a longer to a shorter day can create bugs if other users are not informed to adjust. Please speak to other users to notify them of changes before running the schedule builder. Continue?\")\n            if(confirmation){\n                events.publish(\"updateFacilityDataClicked\");\n            }else{\n                events.publish(\"cancelFacilityDataChangesClicked\")\n            }\n           \n        }\n        function cancelFacilityDataChanges(){\n            events.publish(\"cancelFacilityDataChangesClicked\") //check this path\n        }\n    }\n})()\n\nexport {facilityDataFormComponent}\n\n\n\n\n\n","import { events } from \"../../../../src/events\";\n\nconst userDataFormComponent = (function(){\n\n    events.subscribe(\"userDataLoaded\", renderUserDataForm); \n    events.subscribe(\"newUserModelBuilt\", renderUserDataForm)\n    events.subscribe(\"userDataChangesCancelled\", unrenderUserDataForm);\n    events.subscribe(\"editUserDataSaved\", unrenderUserDataForm)\n    events.subscribe(\"newUserDataSaved\", unrenderUserDataForm);\n    events.subscribe(\"renderUserValidationErrors\", renderUserDataValidationErrors)\n\n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\");\n\n    \n\n    \n\n    function renderUserDataForm(userData){\n\n        const elements = setElements();\n        populateFields(elements, userData.userData);\n        setEventListeners(elements, userData);\n\n        formDiv.appendChild(elements.content);\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n    function unrenderUserDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n\n\n    function setElements(){\n        const template = document.querySelector(\"#adminUserGeneratorTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const name = content.querySelector(\"#userGeneratorName\");                  \n        const privilege = content.querySelector(\"#userGeneratorPrivilege\");\n        const color = content.querySelector(\"#userGeneratorColor\");\n\n        const saveButton = content.querySelector(\"#userGeneratorSaveButton\");\n        const cancelButton = content.querySelector(\"#userGeneratorCancelButton\"); \n\n        return {content, name, privilege, color, saveButton, cancelButton}\n    }\n\n\n    function populateFields(userElements, userData){\n        userElements.name.value = userData.name;\n        if(userData.privilegeLevel == true){\n            userElements.privilege.checked = true;\n        }\n        userElements.color.value = userData.color;\n    }\n\n\n    function setEventListeners(userElements, userValues){\n        const userData = userValues.userData;\n        const origin = userValues.origin;\n\n        userElements.name.addEventListener('blur', modifyUserNameValue)\n        userElements.privilege.addEventListener(\"blur\", updateUserPrivilege);\n        userElements.color.addEventListener(\"blur\", verifyColorChange);\n        userElements.saveButton.addEventListener(\"click\", saveUserData);\n        userElements.cancelButton.addEventListener(\"click\", cancelUserChanges);\n\n        function saveUserData(){\n            events.publish(\"updateUserDataClicked\", origin)    \n        }\n\n        function cancelUserChanges(){\n            events.publish(\"cancelUserDataChangesClicked\")\n        }\n\n        function modifyUserNameValue(){ \n            if(userData.name != \"\" && userElements.name.value != userData.name){\n                const confirmation = confirm(`If you submit changes, this will change the user name from ${userData.name} to ${userElements.name.value}. Proceed? `);\n                if(confirmation){\n                    events.publish(\"modifyUserNameValue\", userElements.name.value)\n                }else{\n                    userElements.name.value = userData.name;\n                    return false \n                }\n            }else if(userData.name != userElements.name.value){\n                events.publish(\"modifyUserNameValue\", userElements.name.value)\n            } \n        }\n\n        function updateUserPrivilege(){\n            \n            if(userElements.privilege.checked != userData.privilegeLevel){\n                events.publish(\"modifyUserPrivilegeLevelValue\", userElements.privilege.checked)\n            } \n\n            // add to server-side validation\n            // if(userData.privilegeLevel == true & !userElements.privilege.checked && !checkForLastAdmin()){\n            //     alert(\"Cannot demote last admin. Create new admin users before demoting this admin.\")\n            //     userElements.privilege.checked = true;\n            // }\n        }\n\n        function verifyColorChange(){\n            if(userData.color != userElements.color.value){\n                events.publish(\"modifyUserColorValue\", userElements.color.value)\n            }\n            \n            // add to server-side validation\n            // if(userData.color != userColorDOM.value && blockColorDuplication()){\n            //     alert(`Another user is already using this color. Considering all the possible colors available, the odds are pretty low. Unlucky pick, I guess!`)\n            //     userColorDOM.value = userData.color; \n            //     userColorDOM.focus();\n            // }\n        }\n    }\n\n    function renderUserDataValidationErrors(userData){\n        const {data, origin} = userData\n        const renderData = {userData: data, origin}\n        \n        unrenderUserDataForm();\n        renderUserDataForm(renderData);\n        \n        const errorList = document.querySelector(\"#userGeneratorGeneralErrorList\");\n\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n\n        userData.errors.forEach(function(error){\n            const bullet = document.createElement(\"li\");\n            bullet.innerText = error;\n            errorList.appendChild(bullet);\n        })\n    }\n})()\n\nexport {userDataFormComponent}\n\n","import {events} from \"../../../../src/events\";\nimport {timeValueConverter} from \"../../../timeConverter\";\n\nconst facilityDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedFacilityData\", renderFacilityDataGrid); //add prompt about successful save\n\n    function renderFacilityDataGrid(facilityData){\n        const elements = setElements();\n        setContent(elements, facilityData);\n    }\n\n    function setElements(){\n        const main = document.querySelector(\"#facilityDataGrid\")\n        const openTimeText = document.querySelector(\"#adminMainPageFacilityHoursSelectorsOpen > p\");\n        const closeTimeText = document.querySelector(\"#adminMainPageFacilityHoursSelectorsClose > p\");\n        const maxCapacityText = document.querySelector(\"#adminMainPageFacilityHoursSelectorsMax > p\");\n        \n        return {main, openTimeText, closeTimeText, maxCapacityText}\n    }\n\n    function setContent(facilityElements, facilityData){\n        facilityElements.main.dataset.facilityDataId = facilityData._id;\n        facilityElements.openTimeText.innerText = `Open Time: ${timeValueConverter.runConvertTotalMinutesToTime(facilityData.facilityOpen)}`; //adjust the semi-colon distance for these in original render\n        facilityElements.closeTimeText.innerText = `Close Time: ${timeValueConverter.runConvertTotalMinutesToTime(facilityData.facilityClose)}`\n        facilityElements.maxCapacityText.innerText = `Max Capacity: ${facilityData.facilityMaxCapacity}`\n    }\n})()\n\nexport {facilityDataGridComponent}\n","//ADMIN USERS DIV\nimport { events } from \"../../../../src/events\";\n\nconst userDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedUserData\", renderAdminUsers)\n\n    function renderAdminUsers(adminMainPageData){\n\n        const userGrid = document.querySelector(\"#adminUsersGrid\");\n        const userGridNew = document.createElement(\"div\");\n        userGridNew.id = \"adminUsersGrid\";\n\n        adminMainPageData.forEach(function(user){\n            const userRow = buildUserRow(user);\n            userGridNew.appendChild(userRow);\n        })\n\n        userGrid.replaceWith(userGridNew); \n    }\n\n\n    //NEED TO GET _id PROP FOR NEW POST, RETURN ID THROUGH JSON AND ASSIGN IN USERDATA MODEL ON RETURN?\n    //USE ARRAY.MAP AND OBJ EQUIVALENT (?) IN DATAMODElS FOR DEEP COPIES\n    //WHAT IS FUNCTIONAL DIFFERENCE BETWEEN HTTP METHODS?\n    function buildUserRow(userData){   \n        const elements = setTemplateElements();\n        setElementsContent(elements, userData);\n        setEventListeners(elements, userData)\n\n        return elements.content  \n    }\n\n\n    function setTemplateElements(){\n        const template = document.querySelector(\"#adminMainPageUserGridUserTemplate\");\n        const content = document.importNode(template.content, true);\n\n        const div = content.querySelector(\".adminUserGridUser\")\n\n        const name = content.querySelector(\".adminUserGridUserName\");\n        const privilege = content.querySelector(\".adminUserGridUserPrivilege\");\n        const lastVerified = content.querySelector(\".adminUserGridUserLastVerified\");\n        const colorBlock = content.querySelector(\".adminUserColor\");\n\n        const editButton = content.querySelector(\".adminUserGridUserEditButton\");\n        const deleteButton = content.querySelector(\".adminUserGridUserDeleteButton\");\n\n        return {content, div, name, privilege, lastVerified, colorBlock, editButton, deleteButton}\n    }\n\n\n    function setElementsContent(userElement, userData){\n        userElement.div.setAttribute(\"data-userId\", userData._id)\n        userElement.name.innerText = `Name: ${userData.name}`;\n        if(userData.privilegeLevel){\n            userElement.privilege.innerText = `Privilege: Admin`\n        }else{\n            userElement.privilege.innerText = `Privilege: User`\n        }\n        userElement.lastVerified.innerText = `Last Verified: ${userData.lastVerified}`;\n        userElement.colorBlock.style.backgroundColor = userData.color\n    }\n\n\n    function setEventListeners(userElement, userData){\n        userElement.editButton.addEventListener(\"click\", editUser);\n        userElement.deleteButton.addEventListener(\"click\", deleteUser);\n\n        function editUser(){\n            events.publish(\"editUserClicked\", userData._id)\n        }\n        function deleteUser(){\n            events.publish(\"deleteUserClicked\", userData._id)\t\n        }\n    }\n\n})()\n //no obvious issues with this or dataModel, display is usersGrid and addUserButton\n \n\n\nexport {userDataGridComponent}\n","import {events} from \"../../../src/events\"\n\n/*purpose: dataModel for selecting individual user from allUsers to add/edit/delete\n\nadminAllUsers array is modeled as such:\n\nallUsers = \n\t[\n\t\t{\n            name,\n            color,\n            privilegeLevel,\n            teams:{},\n            availability:{},\n            lastVerified,\n\t\t\tadminPageSet,\n            season\n        }, \n\t\t{etc}, {etc}\n\t]\n\n\tteamOrderObj obj is modeled as follows: {index, modifier}\n\npublishes:\n    user data FOR adminUserDataModel edits /adminUserGenerator DOM display\n\tverified user addition/edits or deletions FOR database\n\nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    userData change validations FROM userValidator\n\trequests to edit/delete a user FROM adminMainPageDOM\n*/\n\nconst allUsersData = (function(){ //continue REVIEW HERE\n\t//no obvious issues, find database update listeners for delete/modify/add allUsers, make sure password does not get passed to front-end\n\tlet allUsersDataStable;\n\tlet allUsersDataMutable;\n\n\tevents.subscribe(\"adminDataFetched\", setDataNewPageRender);\n\tevents.subscribe(\"updateAllUsersModel\", setDataNewDatabasePost) //add prompt for successful save\n\n\tevents.subscribe(\"editUserClicked\", editUser);\n\tevents.subscribe(\"deleteUserClicked\", deleteUserForDatabaseUpdate);\n\tevents.subscribe(\"userDataValidated\", updateUserData)\n\n\tfunction setDataNewPageRender(adminAllUsers){\n        allUsersDataStable = adminAllUsers.allUsers;\n\t\tallUsersDataMutable = [];\n        createAllUsersDeepCopy(allUsersDataMutable, allUsersDataStable)\n    }\n\n    function setDataNewDatabasePost(userData){\n\t\tconst thisUserIndex = allUsersDataMutable.findIndex(function(user){\n\t\t\treturn user._id == userData._id\n\t\t});\n\t\tif(thisUserIndex != -1){\n\t\t\tallUsersDataMutable[thisUserIndex] = userData\n\t\t}else{\n\t\t\tallUsersDataMutable.push(userData);\n\t\t}\n\t\t\n        createAllUsersDeepCopy(allUsersDataStable, allUsersDataMutable);\n\t\tevents.publish(\"renderUpdatedUserData\", allUsersDataMutable) //do this\n    }\n\n    function createAllUsersDeepCopy(newArr, copyArr){\n\t\tcopyArr.forEach(function(user){\n\t\t\tconst newUserObj = {};\n\t\t\tfor(let prop in user){\n\t\t\t\tnewUserObj[prop] = user[prop]\n\t\t\t}\n\t\t\tnewArr.push(newUserObj);\n\t\t})\n    }\n\n\tfunction editUser(userId){\n\t\tconst thisUser = allUsersDataMutable.filter(function(user){\n\t\t\treturn userId == user._id\n\t\t})[0];\n\t\t\n\t\tevents.publish(\"userDataEditRequested\", thisUser);\n\t}\n\n\tfunction deleteUserForDatabaseUpdate(userData){/////revierw this\n\t\tevents.publish(\"allUsersDataUpdated\", {userData}); \n\t\t\n\t}\n\n\tfunction updateUserData(validatedUserData){\n\t\tif(validatedUserData.origin == \"edit\"){\n\t\t\tevents.publish(\"userUpdateRequested\", validatedUserData.userData) \n\t\t}else{\n\t\t\tevents.publish(\"newUserAdditionRequested\", validatedUserData.userData)\n\t\t}\n\t}\n})()\n\nexport {allUsersData}","import {events} from \"../../../src/events\"\n\n/*purpose: dataModel for modifying/saving facilityData content for adminMainPage\n\ndatabase object is modeled as such:\n\nobj = {\n    facilityOpen, \n    facilityClose, \n    facilityMaxCapacity\n}\n\npublishes:\n    facilityDataDOM renders FOR adminMainPageDOM\n    save requests FOR databse\n   \nsubscribes to: \n    adminMainPageModel builds FROM adminMainPageModel\n    data modification changes FROM adminMainPageDOM\n    save change and cancel change requests FROM adminMainPageDOM\n*/\n\n\n//start EDITING HERE, I WANT FACILITYDATA TO BE CONNECTED BY THE END OF TONIGHT!\nconst adminMainPageFacilityDataModel = (function(){\n    //no obvious issues, find database listener for data update\n    let adminFacilityDataStable;\n    let adminFacilityDataMutable;\n\n    events.subscribe(\"hibbilty\", console.log(\"Does this end it?\"))\n    \n    events.subscribe(\"adminDataFetched\", setDataNewPageRender);\n    events.subscribe(\"facilityDataSaved\", setDataNewDatabasePost); //add prompt about successful post\n    events.subscribe(\"editFacilityDataClicked\", editFacilityData) //add prompt about requesting dataEdit\n\n    events.subscribe(\"modifyFacilitySelectorValue\", modifyFacilitySelectorValue);\n    events.subscribe(\"updateFacilityDataClicked\", validateFacilityData);\n    events.subscribe(\"adminFacilityDataValidated\", updateFacilityData);\n    events.subscribe(\"cancelFacilityDataChangesClicked\", cancelFacilityDataChanges);\n\n    function setDataNewPageRender(adminData){\n        adminFacilityDataStable = adminData.facilityData; //make sure this is correct property for database initial database fetch\n        adminFacilityDataMutable = Object.create({});\n        createFacilityDataDeepCopy(adminFacilityDataMutable, adminFacilityDataStable);\n    }\n\n    function setDataNewDatabasePost(){\n        createFacilityDataDeepCopy(adminFacilityDataStable, adminFacilityDataMutable);\n        events.publish(\"renderUpdatedFacilityData\", adminFacilityDataMutable)\n    }\n\n    function createFacilityDataDeepCopy(newObj, copyObj){\n        for(let prop in copyObj){\n            newObj[prop] = copyObj[prop]\n        }\n    }\n\n    function editFacilityData(){\n        events.publish(\"adminFacilityDataEditRequested\", adminFacilityDataMutable)\n    }\n\n    function modifyFacilitySelectorValue(facilityDataObj){\n        const {modifiedSelector, value} = facilityDataObj\n        adminFacilityDataMutable[modifiedSelector] = Number(value);\n    }\n\n    function validateFacilityData(){\n        events.publish(\"adminFacilityDataValidationRequested\", adminFacilityDataMutable)\n    }\n\n    function updateFacilityData(){\n        events.publish(\"adminFacilityDataUpdateRequested\", adminFacilityDataMutable);\n    }\n    \n    function cancelFacilityDataChanges(){\n        createFacilityDataDeepCopy(adminFacilityDataMutable, adminFacilityDataStable);\n        events.publish(\"adminFacilityDataChangesCancelled\")\n    }\n\n\n\n})()\n\nexport {adminMainPageFacilityDataModel}","import { events } from \"../../../src/events\";\n\n/*purpose: dataModel for creating/modifying individual user data \n\nuserObject is modeled as such:\n\n    {\n        name,\n        color,\n        privilegeLevel,\n        teams:{},\n        availability:{},\n        lastVerified,\n        adminPageSet,\n        season\n    }, \n\npublishes:\n    userModel data FOR adminUserGeneratorDOM\n    validation requests to save data FOR userValidator\n   \nsubscribes to: \n    addUser requests FROM adminMainPageModel\n    editUser data FROM adminAllUsersDataModel\n\tuserData save requests FROM adminUserGeneratorDOM\n    data modifications for name/password/color/privelege FROM adminUserGeneratorDOM\n*/\n\nconst userData = (function(){\n    //no obvious issues, ensure that password does not come to front-end\n    let userModelStable;\n    let userModelMutable;\n\n    events.subscribe(\"modifyUserNameValue\", setName);\n    events.subscribe(\"modifyUserPrivilegeLevelValue\", setPrivilegeLevel)\n    events.subscribe(\"modifyUserColorValue\", setColor)\n    events.subscribe(\"userDataEditRequested\", setUserModelEditRequest);\n    events.subscribe(\"addUserClicked\", createNewUser);\n    events.subscribe(\"updateUserDataClicked\", validateChanges);\n    events.subscribe(\"cancelUserDataChangesClicked\", setUserModelCancelRequest )\n    events.subscribe(\"editUserDataSaved\", publishUserUpdatesToAllUsers);\n    events.subscribe(\"newUserDataSaved\", addUserDataToAllUsers);\n    events.subscribe(\"userDataValidationFailed\", renderUserValidationErrors);\n    \n    \n    function setUserModelEditRequest(userData){\n        userModelStable = userData\n        userModelMutable = Object.assign({}, userModelStable)\n\n        events.publish(\"userDataLoaded\", {userData: userModelMutable, origin:\"edit\"})\n    }\n\n    function setUserModelCancelRequest(){\n        userModelMutable = Object.assign({}, userModelStable);\n\n        events.publish(\"userDataChangesCancelled\")\n    }\n\n    function publishUserUpdatesToAllUsers(){\n        events.publish(\"updateAllUsersModel\", userModelMutable)\n    }\n\n    function addUserDataToAllUsers(_id){\n        userModelMutable._id = _id;\n        events.publish(\"updateAllUsersModel\", userModelMutable);\n    }\n    \n    //check this one separately\n    function createNewUser(){\n        userModelStable = {\n            name: \"\",\n            //password: coming soon\n            color: \"#000000\",\n            privilegeLevel: false,\n            teams:[], \n            availability:{Sun:[], Mon:[], Tue: [], Wed: [], Thu: [], Fri: [], Sat: []}, \n            lastVerified: null,\n            // adminPageSet: null,\n            // season: \"fall\"\n        };\n        userModelMutable = Object.assign({}, userModelStable);\n\n        events.publish(\"newUserModelBuilt\", {userData: userModelMutable, origin:\"add\"})\n    }\n\n    function setName(name){\n        userModelMutable.name = name;\n    }\n\n    function setColor(color){\n        userModelMutable.color = color\n    }\n\n    function setPrivilegeLevel(privilege){\n        userModelMutable.privilegeLevel = privilege;\n        // if(privilege == false){\n        //     userModelMutable.adminPageSet = null\n        // }else{\n        //     userModelMutable.adminPageSet = \"admin\"\n        // }\n    }\n\n    function validateChanges(origin){\n        events.publish(\"userDataValidationRequested\", {userData: userModelMutable, origin})\n    }\n\n    function renderUserValidationErrors(validationErrorData){\n        const {errors, origin} = validationErrorData\n        events.publish(\"renderUserValidationErrors\", {data: userModelMutable, errors, origin})\n    }\n\n})()\nexport {userData}\n\n","import {events} from \"../src/events\"\nimport { userData } from \"./adminHomePage/models/userData\";\n\nconst databasePost = (function(){\n\n    events.subscribe(\"userUpdateRequested\", updateUserData);\n    events.subscribe(\"newUserAdditionRequested\", addUserData)\n    // events.subscribe(\"adminAvailabilityDataUpdated\", alertAndLogCurrentObject)\n    // events.subscribe(\"adminAllTeamsDataUpdated\", changeAllTeamsData)\n    events.subscribe(\"adminFacilityDataUpdateRequested\", updateFacilityData)\n    // events.subscribe(\"availabilityDataUpdated\", changeAvailabilityData)\n    // events.subscribe(\"myTeamsDataUpdated\", changeMyTeamsData)\n    // events.subscribe(\"verifyUpToDateClicked\", changeVerificationData)//\n    // events.subscribe(\"pageChangeRequested\", alertAndLogCurrentObject);\n    // events.subscribe(\"userSeasonChangeRequested\", changeUserSeason); //\n    // events.subscribe(\"adminSeasonChangeRequested\", changeAdminSeason);\n    \n\n    function alertAndLogCurrentObject(databaseBoundObject){\n        console.log(databaseBoundObject)\n        alert(databaseBoundObject)\n    }\n\n    async function updateFacilityData(databaseBoundObject){ \n        try{\n            const facilityDataResponse = await fetch('adminHome/postAdminFacilitySettings.json', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n            console.log(await facilityDataResponse.body)\n            events.publish(\"facilityDataSaved\")\n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n       \n    }\n\n    async function updateUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user/0/update.json', { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){ \n                events.publish(\"editUserDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user/add.json', { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){\n                const newUser = await userDataResponse.json(); \n                events.publish(\"newUserDataSaved\", newUser)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    function changeAllTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.allTeams - b.rank.allTeams\n        })\n        adminTestObj.allTeams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAllUsersArray(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.allUsers = databaseBoundObject;\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAdminSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeUserSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n\n    function changeVerificationData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.lastVerified = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeAvailabilityData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.availability = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeMyTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.myTeams - b.rank.myTeams\n        })\n        userTestObj.teams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    let userTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:false,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n        [\n            {\n            name:\"basketballWomen\",\n            coach: \"Brindle\",\n            rank:\n                {\n                    myTeams: 0,\n                    allTeams:6\n                },\n            size: 15,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n            \n            {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:5\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n    \n            {\n            name: \"football\",\n            coach:\"Brindle\",\n            rank:\n                {\n                    myTeams: 2,\n                    allTeams:1\n                },\n            size: 110,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n    \n                    [\n                        {dayOfWeek:\"Wed\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Sat\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n        ],\n        lastVerified: null,\n        adminPageSet:null,\n        season:\"fall\",\n        allTeams:\n            [\n                {\n                name: \"football\",\n                coach:\"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:1\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:6\n                    },\n                size: 15,\n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:5\n                        },\n                    size: 25,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 4,\n                            allTeams:4\n                        },\n                    size: 50,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n            ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:150\n        }\n    \n    }\n    \n    let adminTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:true,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                \n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            ],\n        lastVerified: null,\n        adminPageSet:\"admin\",\n        season:\"fall\",\n    \n        allTeams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                enabled: true,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                enabled: true,\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name: \"football\",\n                coach:\"Rivera\",\n                enabled: false,\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:2\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"sprintFootball\",\n                coach: \"Dolan\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:3\n                    },\n                size: 50,\n                enabled: true,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n        ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:120\n        },\n    \n        allUsers:\n        [\n            {\n            name: \"Brindle\",\n            color: \"#00ff00\",\n            privilegeLevel:true,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"basketballWomen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                        myTeams: 0,\n                        allTeams:0\n                        },\n                    size: 15,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:1\n                        },\n                    size: 25,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:\"admin\",\n            season:\"fall\"\n            },\n    \n            {    \n            name: \"Rivera\",\n            color: \"#0000ff\",\n            privilegeLevel:false,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name: \"football\",\n                    coach:\"Rivera\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:2\n                        },\n                    size: 110,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\",\n            },\n    \n            {    \n            name: \"Dolan\",\n            privilegeLevel:false,\n            color: \"#ffa500\",\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:3\n                        },\n                    size: 50,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\"\n            }\n        ],\n    \n        adminTimeBlocks:\n            {\n            Sun:[],\n            Mon:[{startTime: \"420\", endTime: \"540\", admin: \"yes\"}],\n            Tue:[],\n            Wed:[],\n            Thu:[{startTime: \"780\", endTime: \"840\", admin: \"yes\"}],\n            Fri:[],\n            Sat:[]\n            }\n    }\n\n})();\n\nexport {databasePost}","\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\nexport {events}","//purpose: convert totalMinutes into clockTime, and clockTime into totalMinutes\n\nconst timeValueConverter = (function(){\n    //no obvious issues here\n    function convertTotalMinutesToTime(totalMins){\n        let standardTime;\n        let hour = Math.floor(totalMins/60)\n        let meridian\n            switch(hour){\n                case 0:\n                    hour += 12\n                    meridian = \"a\"\n                    break;\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                    meridian = \"a\"\n                    break;\n                case 12:\n                    meridian = \"p\"\n                    break;\n                default:\n                    hour -=12\n                    meridian = \"p\"\n                    break;\n            }\n            \n        let mins = totalMins%60\n            if(mins == 0){\n                mins = \"00\"\n            }\n        standardTime = `${hour}:${mins}${meridian}`\n        return standardTime\n    }\n\n    function runConvertTotalMinutesToTime(totalMins){\n        return convertTotalMinutesToTime(totalMins)\n    }\n\n    function convertTimeToTotalMinutes(time){\n        const colonIndex = time.indexOf(\":\");\n        const meridian = time[time.length-1]\n        const meridianIndex = time.indexOf(meridian);\n        \n        let hour = Number(time.slice(0, colonIndex));\n            if(meridian == \"p\" && hour != 12){\n                hour +=12;\n            }else if(meridian == \"a\" && hour == 12){\n                hour -=12;\n            }\n        const min = Number(time.slice(colonIndex + 1, meridianIndex));\n        const totalMinutes = hour*60 + min;\n\n        return totalMinutes\n    }\n\n    function runConvertTimeToTotalMinutes(time){\n        return convertTimeToTotalMinutes(time)\n    }\n\n    return {runConvertTimeToTotalMinutes, runConvertTotalMinutesToTime}\n\n})();\n\nexport{timeValueConverter}","import { events } from \"../events\";\n\n/*purpose: validator for facilityData updates\n\nfacilityData object is modeled as such:\n\nobj = {\n    facilityOpen, \n    facilityClose, \n    facilityMaxCapacity\n}\n\npublishes:\n    successful validations FOR adminMainPageFacilityDataModel\n   \nsubscribes to: \n    validation requests FROM adminMainPageFacilityDataModel\n*/\n\nconst facilityDataValidator = (function(){\n    //no obvious issues here\n    events.subscribe(\"adminFacilityDataValidationRequested\", validateAdminFacilityData);\n    \n    function validateAdminFacilityData(facilityData){\n        \n        const errorArray = [];\n  \n        for(let prop in facilityData){\n            \n            if(facilityData[prop] == \"default\"){\n                const string = \"A non-default value must be selected for: \";\n                string.concat(prop);\n                errorArray.push(string);\n            }\n        }\n\n        if(errorArray.length > 0){\n            alert(errorArray) //change this eo event that returns to form as list items\n        }else{\n            events.publish(\"adminFacilityDataValidated\", facilityData)\n        }\n    }\n})()\n\nexport {facilityDataValidator}","import { events } from \"../../src/events\";\n\n/*purpose: validator for user dataModel updates\n\nuserObject is modeled as such:\n\n    {\n        name,\n        color,\n        privilegeLevel,\n        teams:{},\n        availability:{},\n        lastVerified\n    }, \n\npublishes:\n    successful validations FOR adminAllUsersDataModel\n   \nsubscribes to: \n    validation requests FROM adminUserDataModel\n*/\n\nconst userDataValidator = (function(){\n    \n    events.subscribe(\"userDataValidationRequested\", validateAllInputs);\n    \n    function validateAllInputs(adminUserData){\n        const {userData, origin} = adminUserData\n\n        const errorArray = [];\n\n        validateUserName(userData, errorArray); \n        validateColor(userData, errorArray)\n\n        if(errorArray.length > 0){\n            events.publish(\"userDataValidationFailed\", {errors: errorArray, origin});\n        }else{\n            events.publish(\"userDataValidated\", adminUserData);\n        }\n    }\n\n    function validateUserName(userModel, array){\n        const userName = userModel.name;\n        const userNameRegex = /[^A-Za-z0-9]/;\n        try{\n            if(userNameRegex.test(userName)){\n                throw(\"User names can only include letters and numbers (no spaces or symbols).\");\n            }else if(userName == \"\"){\n                throw(\"User name must have a value.\");\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n\n    function validateColor(userModel, array){\n        const color = userModel.color;\n        try{\n            if(color == \"#000000\"){\n                throw(\"Color must have a value not equal to black. Black is default value, and must be changed.\")\n            }\n        }catch(err){\n            array.push(err)\n        }\n\n    }\n})()\n\nexport {userDataValidator}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {events} from \"../src/events\"\nimport {adminHomeRender} from \"../src/adminHomePage/components/adminHomeRender\"\n\nimport {facilityDataGridComponent} from \"../src/adminHomePage/components/mainModulesRenders/facilityDataGrid\"\nimport {facilityDataFormComponent} from \"../src/adminHomePage/components/forms/facilityDataForm\";\nimport {facilityData} from \"../src/adminHomePage/models/facilityData\";\nimport {facilityDataValidator} from \"../src/validators/facilityDataValidator\"\n\nimport {userDataGridComponent} from \"../src/adminHomePage/components/mainModulesRenders/userGrid\";\nimport {userDataFormComponent} from \"../src/adminHomePage/components/forms/userForm\"\nimport {allUsersData} from \"../src/adminHomePage/models/allUsersData\"\nimport {userData} from \"../src/adminHomePage/models/userData\"\nimport {userDataValidator} from \"../src/validators/userValidator\"\n\nimport {databasePost} from \"../src/databasePost\"\n\nwindow.onload = setScriptData;\n\nasync function setScriptData(){\n    try{\n        const adminPageJSON = await fetch('adminHome/adminData.json'); //change this to accept userId and season\n        const adminPageData = await adminPageJSON.json();\n        events.publish(\"adminDataFetched\", adminPageData);\n        events.publish(\"adminDataSet\");\n        \n    }catch(err){\n        console.log(err)\n    }\n}\n\n\n\n// function setAdminTimeBlockListeners(){\n//     const dayBlocks = Array.from(document.querySelector(\"#adminMainPageAddAvailabilityBlockAllUsersGrid\").children);\n//     dayBlocks.forEach(function(day){\n//         const dayName = day.firstChild(\"h3\").innerText;\n//         const addButton = day.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockAddButton\")\n\n//         const timeBlocks = Array.from(day.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersAllBlocks\"))\n//         timeBlocks.forEach(function(block){\n//             const _id = block.dataTimeBlockId;\n//             const editButton = block.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockEditButton\");\n//             const deleteButton = block.querySelector(\".adminMainPageAddAvailabilityBlockAllUsersBlockDeleteButton\");\n\n//             editButton.addEventListener(\"click\", requestAvailabilityBlockEdit);\n//             deleteButton.addEventListener(\"click\", requestAvailabilityBlockDelete);\n\n//             function requestAvailabilityBlockEdit(){\n//                 //class change?\n//                 events.publish(\"editAdminAvailabilityClicked\", {dayName, _id})\n                \n//             }\n//             function requestAvailabilityBlockDelete(){\n//                 events.publish(\"deleteAdminAvailabilityClicked\", {dayName, _id})\n//             }\n//         })\n\n//         addButton.addEventListener(\"click\" , requestAvailabilityBlockNew);\n\n//         function requestAvailabilityBlockNew(){\n//             //class change?\n//             events.publish(\"adminAvailabilityBlockAddRequested\", day)\n\n//         }\n//     })     \n// }  "],"names":[],"sourceRoot":""}