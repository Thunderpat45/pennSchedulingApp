(()=>{"use strict";const t={events:{},subscribe:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},unsubscribe:function(t,e){if(this.events[t])for(let s=0;s<this.events[t].length;s++)if(this.events[t][s]===e){this.events[t].splice(s,1);break}},publish:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}};function e(t){if(t.matches){const t=document.querySelector("body"),e=document.createElement("p");e.innerText="This program is designed for PCs, laptops and tablets, due to general support for XLSX documents on those platforms. Please use one of the recommended devices for best experience.";const s=Array.from(document.querySelectorAll("body *"));throw s.length>0&&s.forEach((function(t){t.remove()})),t.appendChild(e),"Window size not appropriate"}}t.subscribe("userUpdateRequested",(async function(e){const{_id:s}=e;try{const a=await fetch(`adminHome/user/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json(),s="edit";t.publish("userDataValidationFailed",{errors:e,origin:s})}else 200==a.status&&t.publish("editUserDataSaved")}catch(t){console.log(t)}})),t.subscribe("newUserAdditionRequested",(async function(e){try{const s=await fetch("adminHome/user",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const e=await s.json(),a="add";t.publish("userDataValidationFailed",{errors:e,origin:a})}else if(200==s.status){const e=await s.json();t.publish("newUserDataSaved",e)}}catch(t){console.log(t)}})),t.subscribe("deleteUserRequested",(async function(t){const e={_id:t};try{const s=await fetch(`adminHome/user/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const t=await s.json();alert(t)}else if(303==s.status){const{userId:t,season:e}=await s.json(),a=document.createElement("a");a.href=`/user/${t}/${e}/adminHome`,a.click()}}catch(t){console.log(t)}})),t.subscribe("adminBlockUpdateRequested",(async function(e){const{_id:s}=e;try{const a=await fetch(`adminHome/timeBlock/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json(),s="edit";t.publish("adminAvailabilityDataValidationFailed",{errors:e,origin:s})}else 200==a.status&&t.publish("editAdminBlockDataSaved")}catch(t){console.log(t)}})),t.subscribe("newAdminBlockAdditionRequested",(async function(e){try{const s=await fetch("adminHome/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const e=await s.json(),a="add";t.publish("adminAvailabilityDataValidationFailed",{errors:e,origin:a})}else if(200==s.status){const e=await s.json();t.publish("newAdminBlockDataSaved",e)}}catch(t){console.log(t)}})),t.subscribe("adminBlockDeleteRequested",(async function(e){const s={_id:e._id};try{const a=await fetch(`adminHome/timeBlock/${e._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json();alert(t)}else 200==a.status&&t.publish("adminBlockDataDeleted",e)}catch(t){console.log(t)}})),t.subscribe("availabilityBlockUpdateRequested",(async function(e){const{_id:s}=e;try{const a=await fetch(`home/timeBlock/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json(),s="edit";t.publish("userAvailabilityValidationFailed",{errors:e,origin:s})}else 200==a.status&&t.publish("editAvailabilityBlockDataSaved")}catch(t){console.log(t)}})),t.subscribe("newAvailabilityBlockAdditionRequested",(async function(e){try{const s=await fetch("home/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const e=await s.json(),a="add";t.publish("userAvailabilityValidationFailed",{errors:e,origin:a})}else if(200==s.status){const e=await s.json();t.publish("newAvailabilityBlockDataSaved",e)}}catch(t){console.log(t)}})),t.subscribe("availabilityBlockDeleteRequested",(async function(e){try{const s=await fetch(`home/timeBlock/${e._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const t=await s.json();alert(t)}else 200==s.status&&t.publish("availabilityBlockDataDeleted",e)}catch(t){console.log(t)}})),t.subscribe("teamUpdateRequested",(async function(e){const{_id:s}=e;try{const a=await fetch(`home/team/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json(),s="edit";t.publish("teamDataValidationFailed",{errors:e,origin:s})}else 200==a.status&&t.publish("editTeamDataSaved")}catch(t){console.log(t)}})),t.subscribe("newTeamAdditionRequested",(async function(e){try{const s=await fetch("home/team",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const e=await s.json(),a="add";t.publish("teamDataValidationFailed",{errors:e,origin:a})}else if(200==s.status){const e=await s.json();t.publish("newTeamDataSaved",e)}}catch(t){console.log(t)}})),t.subscribe("teamDataDeleteRequested",(async function(t){const e={_id:t};try{const s=await fetch(`home/team/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status){const t=await s.json();alert(t)}else if(303==s.status){const{userId:t,season:e}=await s.json(),a=document.createElement("a");a.href=`/user/${t}/${e}/home`,a.click()}}catch(t){console.log(t)}})),t.subscribe("teamVerificationUpdateRequested",(async function(e){const{_id:s}=e;try{const a=await fetch(`home/team/${s}/verification`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&t.publish("teamVerificationSaved",e)}catch(t){console.log(t)}})),t.subscribe("userAllTeamsVerificationUpdateRequested",(async function(e){const s={lastVerified:e};try{const a=await fetch("home/allTeamsVerification",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&t.publish("allTeamsVerificationSaved",e)}catch(t){console.log(t)}})),t.subscribe("adminFacilityDataUpdateRequested",(async function(e){try{await fetch("adminHome/facilitySettings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),t.publish("facilityDataSaved")}catch(t){console.log(t)}})),t.subscribe("teamEnabledUpdateRequested",(async function(e){const s={_id:e};try{const a=await fetch(`adminHome/team/${e}/enabledStatus`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&t.publish("teamEnableStatusChangeSaved")}catch(t){console.log(t)}})),t.subscribe("myTeamsOrderDataUpdateRequested",(async function(e){try{const s=await fetch("home/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status)throw"400 error!";200==s.status&&t.publish("myTeamsOrderChangeSaved")}catch(t){console.log(t)}})),t.subscribe("allTeamsOrderDataUpdateRequested",(async function(e){try{const s=await fetch("adminHome/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(404==s.status)throw"404 error!";if(400==s.status)throw"400 error!";200==s.status&&t.publish("allTeamsOrderChangeSaved")}catch(t){console.log(t)}})),t.subscribe("scheduleBuildRequested",(async function(){try{const t=await fetch("adminHome/schedule",{method:"GET",headers:{"Content-Type":"application/json"}});if(404==t.status)throw"404 error!";if(400==t.status)throw"400 error!";if(200==t.status){const e=await t.blob(),s=document.createElement("a");s.href=window.URL.createObjectURL(e),s.download="schedule.xlsx",s.click()}}catch(t){console.log(t)}})),function(){const t=document.querySelector("#logInForm"),e=document.querySelector("#logInUserName"),s=document.querySelector("#logInPassword"),a=document.querySelector("#loginAttemptButton"),o=document.querySelector("#userDemoLoginButton"),i=document.querySelector("#adminDemoLoginButton"),n=document.querySelector("#errorList");function r(){const t=[],a=/[^A-Za-z0-9]/;if(a.test(e.value)||a.test(s.value)){const e="Invalid username/password combination";t.push(e)}if(!e.value){const e="Username must have value";t.push(e)}if(!s.value){const e="Password must have value";t.push(e)}return t}function c(t){e.value="",s.value="",l(),t.length>0&&t.forEach((function(t){const e=document.createElement("li");e.innerText=t,n.appendChild(e)}))}function l(){if(n.firstChild)for(;n.firstChild;)n.removeChild(n.firstChild)}a.addEventListener("click",(async function(e){l();const s=r();if(s.length>0)e.preventDefault(),s.forEach((function(t){const e=document.createElement("li");e.innerText=t,n.appendChild(e)}));else try{t.submit()}catch(t){if(404==t.status)throw"404 error!";if(400==t.status)throw"400 error!";401==t.status&&c([await t.json()])}})),o.addEventListener("click",(async function(a){l(),e.value="user1",s.value="usero1";const o=r();if(o.length>0)a.preventDefault(),o.forEach((function(t){const e=document.createElement("li");e.innerText=t,n.appendChild(e)}));else try{t.submit()}catch(t){if(404==t.status)throw"404 error!";if(400==t.status)throw"400 error!";401==t.status&&c([await t.json()])}})),i.addEventListener("click",(async function(a){l(),e.value="admin2",s.value="admino2";const o=r();if(o.length>0)a.preventDefault(),o.forEach((function(t){const e=document.createElement("li");e.innerText=t,n.appendChild(e)}));else try{t.submit()}catch(t){if(404==t.status)throw"404 error!";if(400==t.status)throw"400 error!";401==t.status&&c([await t.json()])}}))}(),window.onload=async function(){try{const t=window.matchMedia("(max-width: 485px)");e(t),t.addEventListener("change",e)}catch(t){console.log(t)}}})();
//# sourceMappingURL=logInPage.js.map