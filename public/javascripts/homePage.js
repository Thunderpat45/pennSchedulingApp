(()=>{"use strict";const e={events:{},subscribe:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){if(this.events[e])for(let i=0;i<this.events[e].length;i++)if(this.events[e][i]===t){this.events[e].splice(i,1);break}},publish:function(e,t){this.events[e]&&this.events[e].forEach((function(e){e(t)}))}},t=(e.subscribe("userDataSet",(function(){Array.from(document.querySelector("#userPageAddAvailabilityBlockGrid").children).forEach((function(t){const i=t.querySelector("h3").innerText;t.querySelector(".userPageAddAvailabilityBlockAddButton").addEventListener("click",(function(){e.publish("addAvailabilityTimeBlockClicked",i)}));const a=Array.from(t.querySelectorAll(".userPageAddAvailabilityAllBlocks > div"));a.length>0&&a.forEach((function(t){const a=t.dataset.timeblockid,n=t.querySelector(".userPageAddAvailabilityBlockEditButton"),o=t.querySelector(".userPageAddAvailabilityBlockDeleteButton");null!=n&&(n.addEventListener("click",(function(){e.publish("editAvailabilityClicked",{day:i,_id:a})})),o.addEventListener("click",(function(){confirm("Delete this time block?")&&e.publish("deleteAvailabilityClicked",{day:i,_id:a})})))}))})),function(){const t=document.querySelector("#teamGridAddTeam"),i=document.querySelector("#verifyButton"),a=document.querySelector("#modifyMyTeamsOrder"),n=Array.from(document.querySelector("#teamGrid").children);"You have no teams listed!"!=n[0].innerText&&n.forEach((function(t){const i=t.dataset.teamid,a=t.querySelector(".teamGridTeamEditButton"),n=t.querySelector(".teamGridTeamDeleteButton"),o=t.querySelector(".teamGridTeamVerifyButton");a.addEventListener("click",(function(){e.publish("editTeamClicked",i)})),n.addEventListener("click",(function(){confirm("Delete this team?")&&e.publish("deleteTeamClicked",i)})),o.addEventListener("click",(function(){e.publish("verifyTeamClicked",i)}))})),t.addEventListener("click",(function(){e.publish("addTeamClicked")})),i.addEventListener("click",(function(){e.publish("verifyAllTeamsClicked")})),a.addEventListener("click",(function(){e.publish("teamOrderChangeClicked")}))}()})),e.subscribe("allTeamsVerificationSaved",(function(e){document.querySelector("#verifyInfo").innerText=`The last time you verified all teams were up-to-date was: ${e}`})),{runConvertTimeToTotalMinutes:function(e){return function(e){const t=e.indexOf(":"),i=e[e.length-1],a=e.indexOf(i);let n=Number(e.slice(0,t));return"p"==i&&12!=n?n+=12:"a"==i&&12==n&&(n-=12),60*n+Number(e.slice(t+1,a))}(e)},runConvertTotalMinutesToTime:function(e){return function(e){let t,i,a=Math.floor(e/60);a>0&&a<12?i="a":0==a?(a+=12,i="a"):(12==a||(a-=12),i="p");let n=e%60;return 0==n&&(n="00"),t=`${a}:${n}${i}`,t}(e)}}),i=function(){const i={startTime:{start:null,end:null,increment:15},endTime:{start:null,end:null,increment:15},teamSize:{start:5,end:null,increment:5},facilityOpen:{start:240,end:1200,increment:15},facilityClose:{start:300,end:1260,increment:15},facilityMaxCapacity:{start:10,end:150,increment:5},dayOfWeek:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],inWeiss:["yes","no"]};function a(e){let t;t=Object.prototype.hasOwnProperty.call(e,"facilityData")?e.facilityData:e,i.startTime.start=t.facilityOpen,i.endTime.start=t.facilityOpen+30,i.startTime.end=t.facilityClose-30,i.endTime.end=t.facilityClose,i.teamSize.end=t.facilityMaxCapacity}function n(e,a){const n=i[e];for(let i=n.start;i<=n.end;i+=n.increment){const n=document.createElement("option");n.value=i,n.innerText="teamSize"==e||"facilityMaxCapacity"==e?i:t.runConvertTotalMinutesToTime(i),a.appendChild(n)}}function o(){const e=Number(this.value);Array.from(this.parentElement.nextElementSibling.lastElementChild.children).forEach((function(t){const i=Number(t.value);t.disabled=i<e+30||"default"==i}))}function r(){Array.from(this.children)[0].disabled=!0}return e.subscribe("adminDataFetched",a),e.subscribe("userDataFetched",a),e.subscribe("setNewSelectorRanges",a),{runBuildSelector:function(e){return function(e){const t=document.createElement("select");t.classList.add(e),t.classList.add("selector");const a=document.createElement("option");switch(a.value="default",a.innerText="--",t.appendChild(a),e){case"dayOfWeek":case"inWeiss":!function(e,t){i[e].forEach((function(e){const i=document.createElement("option");i.value=e,i.innerText=e,t.appendChild(i)}))}(e,t);break;case"teamSize":case"endTime":case"facilityClose":case"facilityMaxCapacity":n(e,t);break;case"startTime":case"facilityOpen":n(e,t),t.addEventListener("change",o)}return t.addEventListener("change",r),t}(e)}}}();function a(e){if(e.matches){const e=document.querySelector("body"),t=document.createElement("p");t.innerText="This program is designed for PCs, laptops and tablets, due to general support for XLSX documents on those platforms. Please use one of the recommended devices for best experience.";const i=Array.from(document.querySelectorAll("body *"));throw i.length>0&&i.forEach((function(e){e.remove()})),e.appendChild(t),"Window size not appropriate"}}(function(){e.subscribe("availabilityBlockAddRequested",s),e.subscribe("availabilityBlockDataLoaded",s),e.subscribe("availabilityDataChangesCancelled",c),e.subscribe("renderAvailabilityBlockValidationErrors",(function(e){c(),s(e);const t=document.querySelector("#availabilityDayTimeBlockGeneralErrorList");if(t.firstChild)for(;t.firstChild;)t.removeChild(t.firstChild);e.errors.forEach((function(e){const i=document.createElement("li");i.innerText=e,t.appendChild(i)}))})),e.subscribe("editAvailabilityBlockDataSaved",c),e.subscribe("newAvailabilityBlockDataSaved",c);const a=document.querySelector("body"),n=document.querySelector("#mainPage"),o=document.querySelector("#entryFormDiv"),r=document.querySelector("#entryForm"),l=document.createElement("div");function s(s){const c=function(){const e=document.querySelector("#availabilityDayTimeBlockFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("h3"),a=t.querySelectorAll(".selector"),n=t.querySelector("#availabilityDayTimeBlockSelectorsStart"),o=t.querySelector("#availabilityDayTimeBlockSelectorsEnd"),r=t.querySelector("#availabilityDayTimeBlockFormSaveButton"),l=t.querySelector("#availabilityDayTimeBlockFormCancelButton");return{content:t,dayLabel:i,timeBlockSelectors:a,saveButton:r,cancelButton:l,startDiv:n,endDiv:o}}();var d,u;u=s,(d=c).dayLabel.innerText=`Day: ${u.timeBlock.day}`,d.timeBlockSelectors.forEach((function(a){const n=Array.from(a.classList)[0],o=i.runBuildSelector(n);let l;if(null!=o.querySelector(`option[value = "${u.timeBlock.availability[n]}"]`))l=o.querySelector(`option[value = "${u.timeBlock.availability[n]}"]`);else{l=o.querySelector("option[value = 'default']");const e=function(e,i){const a=document.createElement("p");return a.innerText=`Your selected value of ${t.runConvertTotalMinutesToTime(e[i])} for ${i} has been invalidated by a change to the opening/closing times for the facility. Speak with your supervisor to address this or change this value.`,a}(u.timeBlock.availability,n);"startTime"==n?d.startDiv.appendChild(e):d.endDiv.appendChild(e)}l.selected=!0,"default"!=l.value&&(o.firstChild.disabled=!0),o.addEventListener("change",(function(){const t=n;let i;i="startTime"==n||"endTime"==n?Number(o.value):o.value,e.publish("modifyAvailabilitySelectorValues",{modifiedSelector:t,value:i});const a=r.querySelectorAll(".selector"),l=r.querySelector("#availabilityDayTimeBlockFormSaveButton");0==Array.from(a).filter((function(e){return"default"==e[e.selectedIndex].value})).length&&(l.disabled=!1)})),a.replaceWith(o)})),function(t,i){t.saveButton.addEventListener("click",(function(){e.publish("updateAvailabilityClicked",i.origin)})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelAvailabilityBlockChangesClicked")}))}(c,s),r.appendChild(c.content);const m=r.querySelectorAll(".selector"),f=r.querySelector("#availabilityDayTimeBlockFormSaveButton");Array.from(m).filter((function(e){return"default"==e[e.selectedIndex].value})).length>0&&(f.disabled=!0),n.appendChild(l),l.appendChild(o),o.classList.toggle("formHidden"),a.style.overflowY="hidden"}function c(){if(r.firstChild)for(;r.firstChild;)r.removeChild(r.firstChild);l.replaceWith(...l.childNodes),o.classList.add("formHidden"),a.style.overflowY="scroll"}l.id="overlayDiv"})(),e.subscribe("renderUpdatedAvailabilityBlockData",(function(i){const{day:a,blocks:n}=i,o=document.querySelector("#userPageAddAvailabilityBlockGrid"),r=Array.from(o.querySelectorAll("div")).find((function(e){return e.firstElementChild.innerText==a})).querySelector(".userPageAddAvailabilityAllBlocks"),l=document.createElement("div");if(l.classList.add("userPageAddAvailabilityAllBlocks"),n.length>0)n.forEach((function(i){const n=function(i,a){const{_id:n}=a,o=function(){const e=document.querySelector("#userPageAddAvailabilityBlockTemplate"),t=document.importNode(e.content,!0),i=t.querySelector(".userPageAddAvailabilityBlock"),a=t.querySelector(".userPageAddAvailabilityBlockStart > p"),n=t.querySelector(".userPageAddAvailabilityBlockEnd > p"),o=t.querySelector(".userPageAddAvailabilityBlockEditButton"),r=t.querySelector(".userPageAddAvailabilityBlockDeleteButton");return{user:i,content:t,startTimeText:a,endTimeText:n,editButton:o,deleteButton:r}}();return function(e,i){e.user.setAttribute("dataTimeBlockId",i._id),0==isNaN(Number(i.availability.startTime))?e.startTimeText.innerText+=t.runConvertTotalMinutesToTime(i.availability.startTime):e.startTimeText.innerText=i.availability.startTime,0==isNaN(Number(i.availability.endTime))?e.endTimeText.innerText+=t.runConvertTotalMinutesToTime(i.availability.endTime):e.endTimeText.innerText=i.availability.endTime,1==i.admin&&(e.editButton.remove(),e.deleteButton.remove())}(o,a),function(t,i){t.editButton.addEventListener("click",(function(){e.publish("editAvailabilityClicked",i)})),t.deleteButton.addEventListener("click",(function(){confirm("Delete this time block?")&&e.publish("deleteAvailabilityClicked",i)}))}(o,{day:i,_id:n}),o.content}(a,i);l.appendChild(n)}));else{const e=document.createElement("p");e.innerText="No timeblocks",l.appendChild(e)}r.replaceWith(l)})),function(){function t(e,t){try{for(let t in e.availability)if("default"==e.availability[t])throw`Value for ${t} cannot be default`;if(e.availability.startTime>=e.availability.endTime)throw"Start time overlaps with end time!"}catch(e){t.push(e)}}e.subscribe("adminBlockDataValidationRequested",(function(i){const{timeBlock:a,origin:n}=i,o=[];t(a,o),0==o.length?e.publish("adminAvailabilityDataValidated",i):e.publish("adminAvailabilityDataValidationFailed",{errors:o,origin:n})})),e.subscribe("availabilityValidationRequested",(function(i){const{timeBlock:a,origin:n}=i,o=[];t(a,o),0==o.length?e.publish("userAvailabilityDataValidated",i):e.publish("userAvailabilityValidationFailed",{errors:o,origin:n})}))}(),function(){let t={},i={};e.subscribe("userDataFetched",(function(e){t=structuredClone(e.availabilityTimeBlocks),i=structuredClone(t)})),e.subscribe("updateAllAvailabilityBlocksModel",(function(a){const n=i[a.day].findIndex((function(e){return e._id==a._id}));-1!=n?i[a.day][n]=a:i[a.day].push(a),t=structuredClone(i),e.publish("renderUpdatedAvailabilityBlockData",{day:a.day,blocks:i[a.day]})})),e.subscribe("editAvailabilityClicked",(function(t){const{day:a,_id:n}=t,o=i[a].filter((function(e){return e._id==n}))[0];e.publish("availabilityBlockEditRequested",o)})),e.subscribe("deleteAvailabilityClicked",(function(t){e.publish("availabilityBlockDeleteRequested",t)})),e.subscribe("availabilityBlockDataDeleted",(function(a){const{day:n,_id:o}=a,r=i[n].filter((function(e){return o!=e._id}));i[n]=r,t=structuredClone(i),e.publish("renderUpdatedAvailabilityBlockData",{day:n,blocks:i[n]})}))}(),function(){let t,i;const a={admin:!1,season:null,day:null,availability:{startTime:"default",endTime:"default"}};e.subscribe("userDataFetched",(function(e){a.season=e.season})),e.subscribe("addAvailabilityTimeBlockClicked",(function(n){t=structuredClone(a),t.day=n,i=structuredClone(t),e.publish("availabilityBlockAddRequested",{timeBlock:i,origin:"add"})})),e.subscribe("modifyAvailabilitySelectorValues",(function(e){const{modifiedSelector:t,value:a}=e;i.availability[t]=a})),e.subscribe("availabilityBlockEditRequested",(function(a){t=structuredClone(a),i=structuredClone(t),e.publish("availabilityBlockDataLoaded",{timeBlock:i,origin:"edit"})})),e.subscribe("cancelAvailabilityBlockChangesClicked",(function(){t={},e.publish("availabilityDataChangesCancelled")})),e.subscribe("updateAvailabilityClicked",(function(t){e.publish("availabilityValidationRequested",{timeBlock:i,origin:t})})),e.subscribe("userAvailabilityDataValidated",(function(t){"edit"==t.origin?e.publish("availabilityBlockUpdateRequested",t.timeBlock):e.publish("newAvailabilityBlockAdditionRequested",t.timeBlock)})),e.subscribe("userAvailabilityValidationFailed",(function(t){const{errors:a,origin:n}=t;e.publish("renderAvailabilityBlockValidationErrors",{timeBlock:i,errors:a,origin:n})})),e.subscribe("editAvailabilityBlockDataSaved",(function(){e.publish("updateAllAvailabilityBlocksModel",i)})),e.subscribe("newAvailabilityBlockDataSaved",(function(t){i._id=t,e.publish("updateAllAvailabilityBlocksModel",i)}))}(),function(){e.subscribe("teamsOrderChangeRequested",r),e.subscribe("teamDataChangesCancelled",l),e.subscribe("myTeamsOrderChangeSaved",l),e.subscribe("teamsOrderDataUpdated",(function(e){l(),r(e)}));const t=document.querySelector("body"),i=document.querySelector("#mainPage"),a=document.querySelector("#entryFormDiv"),n=document.querySelector("#entryForm"),o=document.createElement("div");function r(r){const l=function(){const e=document.querySelector("#teamOrderFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("#teamOrderForm"),a=t.querySelector("#teamOrderFormTeams"),n=t.querySelector("#saveTeamOrderButton"),o=t.querySelector("#cancelTeamOrderChangesButton");return{content:t,form:i,teamList:a,saveButton:n,cancelButton:o}}();!function(t,i){i.length>=1?i.forEach((function(a){const n=document.querySelector("#teamOrderFormTeamTemplate"),o=document.importNode(n.content,!0),r=o.querySelector(".teamOrderFormTeamName"),l=o.querySelector(".teamOrderFormTeamSize"),s=o.querySelector(".moveOptionUpButton"),c=o.querySelector(".moveOptionDownButton");r.innerText=`Team: ${a.name}`,l.innerText=`Size: ${a.size}`,s.addEventListener("click",(function(){e.publish("modifyMyTeamsOrderClicked",{team:a,modifier:-1})})),c.addEventListener("click",(function(){e.publish("modifyMyTeamsOrderClicked",{team:a,modifier:1})})),i.length>1&&0==a.rank.myTeams?s.remove():i.length>1&&a.rank.myTeams==i.length-1?c.remove():1==i.length&&(s.remove(),c.remove()),t.teamList.appendChild(o)})):(t.teamList.innerText="No teams here!",t.saveButton.disabled=!0)}(l,r),function(t){t.saveButton.addEventListener("click",(function(){e.publish("updateTeamOrderClicked")})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelTeamOrderChangesClicked")}))}(l),n.appendChild(l.content),i.appendChild(o),o.appendChild(a),a.classList.toggle("formHidden"),l.form.classList.toggle("toggleScrollBarOn"),t.style.overflowY="hidden"}function l(){if(n.firstChild)for(;n.firstChild;)n.removeChild(n.firstChild);a.classList.add("formHidden"),t.style.overflowY="scroll",o.replaceWith(...o.childNodes)}o.id="overlayDiv"}(),function(){e.subscribe("teamAddRequested",s),e.subscribe("teamDataLoaded",s),e.subscribe("teamDataChangesCancelled",c),e.subscribe("optionsModified",(function(e){c(),s(e)})),e.subscribe("renderTeamDataValidationErrors",(function(e){c(),s(e);const t=document.querySelector("#teamDataGeneralErrorList");if(t.firstChild)for(;t.firstChild;)t.removeChild(t.firstChild);e.errors.forEach((function(e){const i=document.createElement("li");i.innerText=e,t.appendChild(i)}))})),e.subscribe("editTeamDataSaved",c),e.subscribe("newTeamDataSaved",c);const a=document.querySelector("body"),n=document.querySelector("#mainPage"),o=document.querySelector("#entryFormDiv"),r=document.querySelector("#entryForm"),l=document.createElement("div");function s(t){const s=function(){const e=document.querySelector("#teamFormTemplate"),t=document.importNode(e.content,!0),i=t.querySelector("#teamFormContainer"),a=t.querySelector("#formTeamName"),n=t.querySelector("#formTeamSize"),o=t.querySelector("#saveTeamRequest"),r=t.querySelector("#cancelTeamRequest"),l=t.querySelector("#addTrainingOption"),s=t.querySelector("#formAllOpts");return{content:t,form:i,teamName:a,teamSize:n,saveButton:o,cancelButton:r,addOptionButton:l,formAllOpts:s}}();!function(t,a){let n,o;t.teamName.value=a.team.name;const l=i.runBuildSelector("teamSize");null!=l.querySelector(`option[value = "${a.team.size}"]`)?n=l.querySelector(`option[value = "${a.team.size}"]`):(n=l.querySelector("option[value = 'default']"),o=d(a.teamSize,"teamSize")),n.selected=!0,"default"!=n.value&&(l.firstChild.disabled=!0),l.addEventListener("change",(function(){const t=l.value;e.publish("modifyTeamSizeValue",t)})),l.addEventListener("click",(function(){Array.from(this.children)[0].disabled=!0})),t.teamSize.replaceWith(l),null!=o&&l.parentElement.appendChild(o),a.team.allOpts.forEach((function(n){!function(t,a,n){const o=a.team.allOpts.indexOf(n)+1,l=function(t,a,n){const o=document.querySelector("#optionTemplate"),l=document.importNode(o.content,!0),s=l.querySelector(".arrowButtonsDiv"),c=l.querySelector(".optLabel"),u=l.querySelector(".formAllDays"),m=l.querySelector(".addTrainingDay");if(c.innerHTML=`Option ${n}`,t.team.allOpts.length>1){const i=document.createElement("button"),a=document.createElement("button"),o=document.createElement("i"),r=document.createElement("button"),l=document.createElement("i");i.classList.add("deleteOpt"),a.classList.add("myTeamsMoveUpButton"),o.classList.add("arrow","up"),a.appendChild(o),r.classList.add("myTeamsMoveDownButton"),l.classList.add("arrow","down"),r.appendChild(l),i.addEventListener("click",(function(){e.publish("deleteOpt",{optNum:n,origin:t.origin})})),a.addEventListener("click",(function(){e.publish("modifyOptOrder",{optNum:n,modifier:-1,origin:t.origin})})),r.addEventListener("click",(function(){e.publish("modifyOptOrder",{optNum:n,modifier:1,origin:t.origin})})),i.innerText="X",s.after(i),1!=n&&n!=t.team.allOpts.length&&(s.appendChild(a),s.appendChild(r)),n==t.team.allOpts.length&&s.appendChild(a),1==n&&s.appendChild(r)}return m.addEventListener("click",(function(){e.publish("addDay",{optNum:n,origin:t.origin})})),function(t,a,n,o){const l=document.createElement("div");l.classList.add("formAllDays"),a.forEach((function(o){const s=a.indexOf(o)+1,c=function(t,a,n,o,l){const s=document.querySelector("#dayTemplate"),c=document.importNode(s.content,!0),u=c.querySelector(".labelDeleteDayButton"),m=c.querySelector(".dayLabel"),f=c.querySelector(".formAllDayDetails");if(m.innerHTML=`Day ${l}`,a.length>1){const i=document.createElement("button");i.classList.add("deleteDay"),i.innerText="X",i.addEventListener("click",(function(){e.publish("deleteDay",{optNum:o,dayNum:l,origin:t.origin})})),u.insertBefore(i,m)}const y=function(t,a,n){const o=document.querySelector("#dayDetailsTemplate"),l=document.importNode(o.content,!0);return l.querySelectorAll(".selector").forEach((function(o){const l=Array.from(o.classList)[0],s=i.runBuildSelector(l);let c,u;null!=s.querySelector(`option[value = "${t[l]}"]`)?c=s.querySelector(`option[value = "${t[l]}"]`):(c=s.querySelector("option[value = 'default']"),u=d(t,l)),c.selected=!0,"default"!=c.value&&(s.firstChild.disabled=!0),s.addEventListener("change",(function(){const t=l;let i;i="startTime"==l||"endTime"==l?Number(s.value):s.value,e.publish("modifyTeamSelectorValue",{optNum:a,dayNum:n,modifiedSelector:t,value:i});const o=r.querySelectorAll(".selector"),c=r.querySelector("#saveTeamRequest");0==Array.from(o).filter((function(e){return"default"==e[e.selectedIndex].value})).length&&(c.disabled=!1)})),o.replaceWith(s),null!=u&&s.parentElement.appendChild(u)})),l}(n,o,l);return f.replaceWith(y),c}(t,a,o,n,s);l.appendChild(c)})),o.replaceWith(l)}(t,a,n,u),l}(a,n,o);t.formAllOpts.appendChild(l)}(t,a,n)}))}(s,t),function(t,i){t.saveButton.addEventListener("click",(function(){0!=function(){try{if(""!=i.team.name&&t.teamName.value!=i.team.name){if(!confirm(`If you submit changes, this will change team name from ${i.team.name} to ${t.teamName.value}. Proceed? `))throw t.teamName.value=i.team.name,!1;e.publish("modifyTeamNameValue",t.teamName.value)}else i.team.name!=t.teamName.value&&e.publish("modifyTeamNameValue",t.teamName.value)}catch(e){return e}}()&&e.publish("updateTeamClicked",i.origin)})),t.cancelButton.addEventListener("click",(function(){e.publish("cancelTeamChangesClicked")})),t.addOptionButton.addEventListener("click",(function(){e.publish("addOpt",i)}))}(s,t),r.appendChild(s.content);const c=r.querySelectorAll(".selector"),u=r.querySelector("#saveTeamRequest");Array.from(c).filter((function(e){return"default"==e[e.selectedIndex].value})).length>0&&(u.disabled=!0),n.appendChild(l),l.appendChild(o),o.classList.toggle("formHidden"),s.form.classList.toggle("toggleScrollBarOn"),a.style.overflowY="hidden"}function c(){if(r.firstChild)for(;r.firstChild;)r.removeChild(r.firstChild);o.classList.add("formHidden"),a.style.overflowY="scroll",l.replaceWith(...l.childNodes)}function d(e,i){const a=document.createElement("p");return a.innerText=`Your selected value of ${t.runConvertTotalMinutesToTime(e[i])} for ${i} has been invalidated by a change to the opening/closing times for the facility. Speak with your supervisor to address this or change this value.`,a}l.id="overlayDiv"}(),e.subscribe("renderUpdatedMyTeamsData",(function(i){const a=document.querySelector("#teamGrid"),n=document.createElement("div");if(n.id="teamGrid",i.length>0)i.forEach((function(i){const a=function(i){const a=function(){const e=document.querySelector("#userPageTeamBlockTemplate"),t=document.importNode(e.content,!0),i=t.querySelector(".teamGridTeam"),a=t.querySelector(".teamGridTeamName"),n=t.querySelector(".teamGridTeamSize"),o=t.querySelector(".teamGridTeamLastVerified"),r=t.querySelector(".teamGridTeamOptionContainer"),l=t.querySelector(".teamGridTeamVerifyButton"),s=t.querySelector(".teamGridTeamEditButton"),c=t.querySelector(".teamGridTeamDeleteButton");return{content:t,div:i,name:a,size:n,lastVerified:o,optionContainer:r,editButton:s,deleteButton:c,verifyButton:l}}();return function(e,i){e.div.setAttribute("data-teamId",i._id),e.name.innerText=`${i.name}`,e.size.innerText=`${i.size} athletes`,e.lastVerified.innerText=`Last Verified: ${i.lastVerified}`,i.allOpts.forEach((function(a){const n=document.querySelector("#userPageTeamOptionBlockTemplate"),o=document.importNode(n.content,!0);o.querySelector(".teamGridTeamOptionNumber").innerText=`Option ${i.allOpts.indexOf(a)+1}`;const r=o.querySelector(".teamGridTeamDayContainer");a.forEach((function(e){const i=document.querySelector("#userPageTeamDayBlockTemplate"),a=document.importNode(i.content,!0),n=a.querySelector(".teamGridTeamDayOfWeek"),o=a.querySelector(".teamGridTeamStartTime"),l=a.querySelector(".teamGridTeamEndTime"),s=a.querySelector(".teamGridTeamInWeiss");n.innerText=`${e.dayOfWeek}`,o.innerText=`${t.runConvertTotalMinutesToTime(e.startTime)}`,l.innerText=`${t.runConvertTotalMinutesToTime(e.endTime)}`,s.innerText=`${e.inWeiss}`,r.appendChild(a)})),e.optionContainer.appendChild(o)}))}(a,i),function(t,i){t.editButton.addEventListener("click",(function(){e.publish("editTeamClicked",i._id)})),t.deleteButton.addEventListener("click",(function(){confirm("Delete this team?")&&e.publish("deleteTeamClicked",i._id)})),t.verifyButton.addEventListener("click",(function(){e.publish("verifyTeamClicked",i._id)}))}(a,i),a.content}(i);n.appendChild(a)}));else{const e=document.createElement("p");e.innerText="You have no teams listed!",n.appendChild(e)}a.replaceWith(n)})),function(){let i;e.subscribe("userDataFetched",(function(e){i=e.facilityData})),e.subscribe("teamValidationRequested",(function(a){const n=[];var o,r;(function(e,t){const i=e.name,a=/[^A-Za-z0-9]/;try{if(a.test(i))throw"Team names can only include letters and numbers (no spaces or symbols).";if(""==i)throw"Team name must have a value."}catch(e){t.push(e)}})(a.teamData,n),function(e,t){const a=e.size;try{if("default"==a)throw"Team size must have a value.";if(a>i.facilityMaxCapacity)throw"Team size is greater than max size value. Discuss max size value changes with administrator."}catch(e){t.push(e)}}(a.teamData,n),o=a.teamData,r=n,o.allOpts.forEach((function(e){const a=o.allOpts.indexOf(e)+1,n=[];e.forEach((function(o){const l=e.indexOf(o)+1;!function(){for(const e in o)try{if("default"==o[e])throw`Option ${a}: Day ${l}: ${e} must have a value.`;if(("startTime"==e||"endTime"==e)&&(o[e]<i.facilityOpen||o[e]>i.facilityClose))throw`Option ${a}: Day ${l}: ${e} is outside operating hours. Discuss operating hour changes with administrator.`}catch(e){r.push(e)}try{if(o.startTime>=o.endTime)throw`Option ${a} Day ${l}'s startTime ${t.runConvertTotalMinutesToTime(o.startTime)} is equal to or later than endTime ${t.runConvertTotalMinutesToTime(o.endTime)}`}catch(e){r.push(e)}}(),function(){try{n.forEach((function(e){const t=n.indexOf(e)+1;if(e.dayOfWeek==o.dayOfWeek&&e.startTime==o.startTime&&e.inWeiss==o.inWeiss)throw`Option ${a}: Day ${t} and Day ${l} are duplicates.`;if(e.dayOfWeek==o.dayOfWeek&&o.startTime<e.startTime&&o.endTime>e.endTime)throw`Option ${a}: Day ${l}'s session runs through Day ${t}'s session.`;if(e.dayOfWeek==o.dayOfWeek&&o.startTime>e.startTime&&o.startTime<e.endTime)throw`Option ${a}: Day ${l}'s start time is in the middle of  Day ${t}'s session.`;if(e.dayOfWeek==o.dayOfWeek&&o.endTime<e.endTime&&o.endTime>e.startTime)throw`Option ${a}: Day ${l}'s end time is in the middle of  Day ${t}'s session.`})),n.push(o)}catch(e){r.push(e)}}()}))})),0==n.length?e.publish("teamDataValidated",a):e.publish("teamDataValidationFailed",{errors:n,origin:a.origin})}))}(),function(){let t=[],i=[];function a(a){const n=i.findIndex((function(e){return e._id==a._id}));-1!=n?i[n]=a:i.push(a),t=structuredClone(i),e.publish("renderUpdatedMyTeamsData",i)}e.subscribe("userDataFetched",(function(e){t=structuredClone(e.myTeams),i=structuredClone(t)})),e.subscribe("updateMyTeamsModel",a),e.subscribe("editTeamClicked",(function(t){const a=i.filter((function(e){return t==e._id}))[0];e.publish("teamDataEditRequested",a)})),e.subscribe("deleteTeamClicked",(function(t){e.publish("teamDataDeleteRequested",t)})),e.subscribe("teamDataDeleted",(function(a){const n=i.filter((function(e){return a!=e._id}));i=n,t=structuredClone(i),e.publish("renderUpdatedMyTeamsData",i)})),e.subscribe("verifyTeamClicked",(function(t){const a=structuredClone(i.filter((function(e){return t==e._id}))[0]),n=new Date,o=`${n.getMonth()+1}-${n.getDate()}-${n.getFullYear()}`;a.lastVerified=o,e.publish("teamVerificationUpdateRequested",a)})),e.subscribe("teamVerificationSaved",(function(t){let a=i.filter((function(e){return t._id==e._id}))[0];for(let e in t)a[e]=t[e];e.publish("renderUpdatedMyTeamsData",i)})),e.subscribe("verifyAllTeamsClicked",(function(){const t=new Date,i=`${t.getMonth()+1}-${t.getDate()}-${t.getFullYear()}`;e.publish("userAllTeamsVerificationUpdateRequested",i)})),e.subscribe("updateAllTeamsModel",a),e.subscribe("teamOrderChangeClicked",(function(){e.publish("teamsOrderChangeRequested",i)})),e.subscribe("modifyMyTeamsOrderClicked",(function(t){const a=i.findIndex((function(e){return e._id==t.team._id})),n=i.splice(a,1)[0];i.splice(a+t.modifier,0,n),i.forEach((function(e){e.rank.myTeams=i.findIndex((function(t){return t._id==e._id}))})),e.publish("teamsOrderDataUpdated",i)})),e.subscribe("updateTeamOrderClicked",(function(){e.publish("myTeamsOrderDataUpdateRequested",i)})),e.subscribe("cancelTeamOrderChangesClicked",(function(){i=structuredClone(t),e.publish("teamDataChangesCancelled")})),e.subscribe("myTeamsOrderChangeSaved",(function(){t=structuredClone(i),e.publish("renderUpdatedMyTeamsData",i)}))}(),function(){let t={},i={};const a={name:"",season:"default",size:"default",rank:{myTeams:null,allTeams:null},allOpts:null,coach:null,lastVerified:null,enabled:!0};e.subscribe("userDataFetched",(function(e){a.coach=e.thisUser._id,a.season=e.season})),e.subscribe("addTeamClicked",(function(){t=structuredClone(a),t.allOpts=[[{dayOfWeek:"default",startTime:"default",endTime:"default",inWeiss:"default"}]],i=structuredClone(t),e.publish("teamAddRequested",{team:i,origin:"add"})})),e.subscribe("teamDataEditRequested",(function(a){t=structuredClone(a),i=structuredClone(t),e.publish("teamDataLoaded",{team:i,origin:"edit"})})),e.subscribe("cancelTeamChangesClicked",(function(){t={},e.publish("teamDataChangesCancelled")})),e.subscribe("updateTeamClicked",(function(t){e.publish("teamValidationRequested",{teamData:i,origin:t})})),e.subscribe("teamDataValidated",(function(t){"edit"==t.origin?e.publish("teamUpdateRequested",t.teamData):e.publish("newTeamAdditionRequested",t.teamData)})),e.subscribe("teamDataValidationFailed",(function(t){const{errors:a,origin:n}=t;e.publish("renderTeamDataValidationErrors",{team:i,errors:a,origin:n})})),e.subscribe("editTeamDataSaved",(function(){e.publish("updateAllTeamsModel",i)})),e.subscribe("newTeamDataSaved",(function(t){const{_id:a,rank:n}=t;i._id=a,i.rank=n,e.publish("updateAllTeamsModel",i)})),e.subscribe("addOpt",(function(t){i.allOpts.push([{dayOfWeek:"default",startTime:"default",endTime:"default",inWeiss:"default"}]),e.publish("optionsModified",{team:i,origin:t.origin})})),e.subscribe("deleteOpt",(function(t){const a=t.optNum-1;i.allOpts.splice(a,1),e.publish("optionsModified",{team:i,origin:t.origin})})),e.subscribe("modifyOptOrder",(function(t){const a=t.optNum-1,n=i.allOpts.splice(a,1)[0];i.allOpts.splice(a+t.modifier,0,n),e.publish("optionsModified",{team:i,origin:t.origin})})),e.subscribe("addDay",(function(t){const a=t.optNum-1;i.allOpts[a].push({dayOfWeek:"default",startTime:"default",endTime:"default",inWeiss:"default"}),e.publish("optionsModified",{team:i,origin:t.origin})})),e.subscribe("modifyTeamSelectorValue",(function(e){const t=e.optNum-1,a=e.dayNum-1;i.allOpts[t][a][e.modifiedSelector]=e.value})),e.subscribe("deleteDay",(function(t){const a=t.optNum-1,n=t.dayNum-1;i.allOpts[a].splice(n,1),e.publish("optionsModified",{team:i,origin:t.origin})})),e.subscribe("modifyTeamSizeValue",(function(e){i.size=e})),e.subscribe("modifyTeamNameValue",(function(e){i.name=e}))}(),e.subscribe("userUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`adminHome/user/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("userDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editUserDataSaved")}catch(e){console.log(e)}})),e.subscribe("newUserAdditionRequested",(async function(t){try{const i=await fetch("adminHome/user",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("userDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newUserDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("deleteUserRequested",(async function(e){const t={_id:e};try{const i=await fetch(`adminHome/user/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else if(303==i.status){const{userId:e,season:t}=await i.json(),a=document.createElement("a");a.href=`/user/${e}/${t}/adminHome`,a.click()}}catch(e){console.log(e)}})),e.subscribe("adminBlockUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`adminHome/timeBlock/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("adminAvailabilityDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editAdminBlockDataSaved")}catch(e){console.log(e)}})),e.subscribe("newAdminBlockAdditionRequested",(async function(t){try{const i=await fetch("adminHome/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("adminAvailabilityDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newAdminBlockDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("adminBlockDeleteRequested",(async function(t){const i={_id:t._id};try{const a=await fetch(`adminHome/timeBlock/${t._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status){const e=await a.json();alert(e)}else 200==a.status&&e.publish("adminBlockDataDeleted",t)}catch(e){console.log(e)}})),e.subscribe("availabilityBlockUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/timeBlock/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("userAvailabilityValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editAvailabilityBlockDataSaved")}catch(e){console.log(e)}})),e.subscribe("newAvailabilityBlockAdditionRequested",(async function(t){try{const i=await fetch("home/timeBlock",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("userAvailabilityValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newAvailabilityBlockDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("availabilityBlockDeleteRequested",(async function(t){try{const i=await fetch(`home/timeBlock/${t._id}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else 200==i.status&&e.publish("availabilityBlockDataDeleted",t)}catch(e){console.log(e)}})),e.subscribe("teamUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/team/${i}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status){const t=await a.json(),i="edit";e.publish("teamDataValidationFailed",{errors:t,origin:i})}else 200==a.status&&e.publish("editTeamDataSaved")}catch(e){console.log(e)}})),e.subscribe("newTeamAdditionRequested",(async function(t){try{const i=await fetch("home/team",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const t=await i.json(),a="add";e.publish("teamDataValidationFailed",{errors:t,origin:a})}else if(200==i.status){const t=await i.json();e.publish("newTeamDataSaved",t)}}catch(e){console.log(e)}})),e.subscribe("teamDataDeleteRequested",(async function(e){const t={_id:e};try{const i=await fetch(`home/team/${e}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status){const e=await i.json();alert(e)}else if(303==i.status){const{userId:e,season:t}=await i.json(),a=document.createElement("a");a.href=`/user/${e}/${t}/home`,a.click()}}catch(e){console.log(e)}})),e.subscribe("teamVerificationUpdateRequested",(async function(t){const{_id:i}=t;try{const a=await fetch(`home/team/${i}/verification`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("teamVerificationSaved",t)}catch(e){console.log(e)}})),e.subscribe("userAllTeamsVerificationUpdateRequested",(async function(t){const i={lastVerified:t};try{const a=await fetch("home/allTeamsVerification",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("allTeamsVerificationSaved",t)}catch(e){console.log(e)}})),e.subscribe("adminFacilityDataUpdateRequested",(async function(t){try{await fetch("adminHome/facilitySettings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),e.publish("facilityDataSaved")}catch(e){console.log(e)}})),e.subscribe("teamEnabledUpdateRequested",(async function(t){const i={_id:t};try{const a=await fetch(`adminHome/team/${t}/enabledStatus`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(404==a.status)throw"404 error!";if(400==a.status)throw"400 error!";200==a.status&&e.publish("teamEnableStatusChangeSaved")}catch(e){console.log(e)}})),e.subscribe("myTeamsOrderDataUpdateRequested",(async function(t){try{const i=await fetch("home/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status)throw"400 error!";200==i.status&&e.publish("myTeamsOrderChangeSaved")}catch(e){console.log(e)}})),e.subscribe("allTeamsOrderDataUpdateRequested",(async function(t){try{const i=await fetch("adminHome/allTeamsOrder",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(404==i.status)throw"404 error!";if(400==i.status)throw"400 error!";200==i.status&&e.publish("allTeamsOrderChangeSaved")}catch(e){console.log(e)}})),e.subscribe("scheduleBuildRequested",(async function(){try{const e=await fetch("adminHome/schedule",{method:"GET",headers:{"Content-Type":"application/json"}});if(404==e.status)throw"404 error!";if(400==e.status)throw"400 error!";if(200==e.status){const t=await e.blob(),i=document.createElement("a");i.href=window.URL.createObjectURL(t),i.download="schedule.xlsx",i.click()}}catch(e){console.log(e)}})),window.onload=async function(){try{const t=window.matchMedia("(max-width: 485px)");a(t),t.addEventListener("change",a);const i=await fetch("home/userData"),n=await i.json();e.publish("userDataFetched",n),e.publish("userDataSet")}catch(e){console.log(e)}}})();
//# sourceMappingURL=homePage.js.map