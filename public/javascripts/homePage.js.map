{"version":3,"file":"homePage.js","mappings":";;;;;;;;;;;;;;;;AAAgC;AACmB;;AAEnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;AACA;AACA,SAAS;AACT,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,aAAa;AACb,mCAAmC,2FAA+C,KAAK;AACvF,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA,qCAAqC;AACrC;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;AAEsB;;;;;;;;;;;;;;;;ACnJa;;AAEpC;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB;AACA;AACA,IAAI,yDAAgB;AACpB;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,YAAY,uDAAc;AAC1B,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,mEAAmE,IAAI,iBAAiB;AACxF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,8BAA8B,eAAe;AAC3E,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,mEAAmE,OAAO,iBAAiB;AAC3F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,gDAAgD;AAChD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB;AACA,yEAAyE,IAAI,iBAAiB;AAC9F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,2CAA2C,eAAe;AACxF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,yEAAyE,cAAc,iBAAiB;AACxG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA,oEAAoE,IAAI,iBAAiB;AACzF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,gBAAgB,uDAAc,sCAAsC,eAAe;AACnF,aAAa;AACb;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,oEAAoE,cAAc,iBAAiB;AACnG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;;AAGA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA;AACA,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF,yBAAyB,4DAA4D;AACrF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF,6BAA6B,4DAA4D;AACzF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAA6D;AAC1F,6BAA6B,4DAA4D;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAA6D;AAC9F,iCAAiC,4DAA4D;AAC7F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC3yBD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC5BgD;AACgC;AACb;;;AAGnE;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;;;AAIpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA,sDAAsD,4BAA4B;;AAElF;AACA;AACA;AACA,gCAAgC,iGAAgC;AAChE;AACA;AACA,4DAA4D,mDAAmD;AAC/G,8EAA8E,mDAAmD;AACjI,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAc,sCAAsC,wBAAwB;;AAE5F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA,YAAY,uDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA,wDAAwD,+FAA+C,kBAAkB,MAAM,UAAU;AACzI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;;;;;;;;;;;;;;;;;;;ACtJyC;;AAE1C;;AAEA,IAAI,yDAAgB;;AAEpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAc,6BAA6B,mBAAmB;AACtF;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAc,+BAA+B,mBAAmB;AAC5F;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB,uDAAc;AAC9B;AACA,SAAS;AACT;;AAEA,CAAC;;AAEkB;;;;;;;;;;;;;;;;;ACrDsB;AACiB;;AAE1D;;AAEA,IAAI,qDAAgB;;AAEpB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oDAAoD,2FAA+C;AACnG,SAAS;AACT;AACA;AACA;AACA,kDAAkD,2FAA+C;AACjG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAc;AAC1B;AACA;AACA;AACA;AACA,gBAAgB,mDAAc;AAC9B;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC5FyC;AACe;;AAEzD;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;AACtD,uBAAuB,gCAAgC;AACvD,sDAAsD,GAAG,+BAA+B;AACxF,6DAA6D;AAC7D;AACA;;AAEA,aAAa;AACb;AACA;;AAEA;AACA,eAAe,UAAU;AACzB;AACA;AACA,SAAS;;AAET,QAAQ,uDAAc,2CAA2C;AACjE;;AAEA;AACA,QAAQ,uDAAc,oDAAoD;AAC1E;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,uDAAc,wCAAwC,sEAAsE;AAC9H;;AAEA;AACA,eAAe,UAAU;AACzB;AACA;AACA,GAAG;;AAEH;AACA;AACA,EAAE,uDAAc,wCAAwC,6CAA6C;AACrG;;AAEA,CAAC;;;;;;;;;;;;;;;;;AC3EyC;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;AACpB,IAAI,yDAAgB;;AAEpB;AACA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD,gEAAgE;;AAEhE,QAAQ,uDAAc,iCAAiC,mDAAmD;AAC1G;;AAEA;AACA;;AAEA,QAAQ,uDAAc;AACtB;;AAEA;AACA,kDAAkD;AAClD;;AAEA,mDAAmD;AACnD,gEAAgE;;AAEhE,QAAQ,uDAAc,mCAAmC,mDAAmD;AAC5G;;AAEA,oDAAoD;AACpD,eAAe,yBAAyB;AACxC;AACA;;AAEA;AACA,QAAQ,uDAAc,qCAAqC,4CAA4C;AACvG;;AAEA;AACA;AACA,GAAG,uDAAc;AACjB,GAAG;AACH,GAAG,uDAAc;AACjB;AACA;;AAEA;AACA,eAAe,gBAAgB;AAC/B,QAAQ,uDAAc,6CAA6C,oDAAoD;AACvH;;AAEA;AACA,QAAQ,uDAAc;AACtB;;AAEA;AACA;AACA,QAAQ,uDAAc;AACtB;;AAEA,CAAC;;;;;;;;;;;;;;;;ACpFD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,GAAG,KAAK,EAAE,SAAS;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;;AAEZ,CAAC;;;;;;;;;;;;;;;;;ACtEkC;;AAEnC;AACA;AACA,IAAI,qDAAgB;AACpB,IAAI,qDAAgB;AACpB;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAc;AAC1B,SAAS;AACT,YAAY,mDAAc,2CAA2C,2BAA2B;AAChG;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA,YAAY,mDAAc;AAC1B,SAAS;AACT,YAAY,mDAAc,sCAAsC,2BAA2B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;;;;;;;UC/CD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNoC;AACgC;;AAEyC;AACa;AAC7C;AACM;AACX;;AAExB;;AAEhD;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB;AACA,KAAK;AACL;AACA;AACA,C","sources":["webpack://pennschedule/./src/DOMBuilders/selectorDOMBuilder.js","webpack://pennschedule/./src/databasePost.js","webpack://pennschedule/./src/events.js","webpack://pennschedule/./src/homePage/components/forms/availabilityBlockForm.js","webpack://pennschedule/./src/homePage/components/homePageRender.js","webpack://pennschedule/./src/homePage/components/mainModuleRenders/availabilityBlocksGrid.js","webpack://pennschedule/./src/homePage/models/allAvailabilityData.js","webpack://pennschedule/./src/homePage/models/availabilityData.js","webpack://pennschedule/./src/timeConverter.js","webpack://pennschedule/./src/validators/availabilityValidator.js","webpack://pennschedule/webpack/bootstrap","webpack://pennschedule/webpack/runtime/define property getters","webpack://pennschedule/webpack/runtime/hasOwnProperty shorthand","webpack://pennschedule/webpack/runtime/make namespace object","webpack://pennschedule/./src/homePage.js"],"sourcesContent":["import {events} from \"../events\"\nimport {timeValueConverter} from \"../timeConverter\"\n\nconst selectorBuilder = (function(){ \n\n    //default values must be input (into database?) for facilityOpen/Close/MaxCapacity BEFORE first time running, or startTime/endTime/teamSize will have errors!\n    const selectionRanges = { \n        startTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        endTime: {\n            start: null,\n            end: null,\n            increment: 15\n        },\n        teamSize: {\n            start: 5,\n            end: null,\n            increment: 5\n        },\n        facilityOpen:{ //4am to 8pm, default value 6am (360)?\n            start: 240,\n            end: 1200,\n            increment: 15\n        },\n        facilityClose:{ //5am to 9pm, default value 8pm (1200)?\n            start: 300,\n            end: 1260,\n            increment: 15\n        },\n        facilityMaxCapacity:{//range 10-150, default value 120?\n            start: 10,\n            end: 150,\n            increment: 5\n        },\n        dayOfWeek: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], \n        inWeiss: [\"yes\", \"no\"],\n    };\n    \n    events.subscribe(\"adminDataFetched\", setSelectorRanges);\n    events.subscribe('userDataFetched', setSelectorRanges)\n    \n    function setSelectorRanges(dBdata){\n        let facilityData\n        if(Object.prototype.hasOwnProperty.call(dBdata, 'facilityData')){\n            facilityData = dBdata.facilityData\n        }else{\n            facilityData = dBdata\n        }\n        selectionRanges.startTime.start = facilityData.facilityOpen;\n        selectionRanges.endTime.start = facilityData.facilityOpen + 30;\n        selectionRanges.startTime.end = facilityData.facilityClose - 30;\n        selectionRanges.endTime.end = facilityData.facilityClose;\n        selectionRanges.teamSize.end = facilityData.facilityMaxCapacity;\n    }\n\n    function runBuildSelector(primaryClass){\n        return buildSelector(primaryClass)\n    }\n\n    \n\n    function buildSelector(primaryClass){\n        const selection = document.createElement(\"select\");\n        selection.classList.add(primaryClass);\n        selection.classList.add(\"selector\");\n            const defaultOption = document.createElement(\"option\");\n            defaultOption.value = \"default\";\n            defaultOption.innerText = \"--\";\n        selection.appendChild(defaultOption);\n\n        switch(primaryClass){\n            case \"dayOfWeek\":\n            case \"inWeiss\": \n                buildArraySelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"teamSize\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;   \n            case \"endTime\":\n            case \"facilityClose\":\n            case \"facilityMaxCapacity\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                break;\n            \n            case \"startTime\":\n            case \"facilityOpen\":\n                buildRangeSelectorOptions(primaryClass, selection);\n                selection.addEventListener(\"change\", modifyEndTimeDefaultValue);\n                break;\n        }\n\n        selection.addEventListener(\"change\", disableDefaultOption)\n\n        return selection\n    }\n\n    function buildArraySelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        optionValues.forEach(function(optionValue){\n            const option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.innerText = optionValue;\n            selector.appendChild(option); \n        })\n    }\n\n    function buildRangeSelectorOptions(primaryClass, selector){\n        const optionValues = selectionRanges[primaryClass];\n        for(let i = optionValues.start; i<=optionValues.end; i += optionValues.increment){\n            const option = document.createElement(\"option\");\n            option.value = i;\n            if(primaryClass == \"teamSize\" || primaryClass == \"facilityMaxCapacity\"){\n                option.innerText = i;\n            }else{\n                option.innerText = timeValueConverter.runConvertTotalMinutesToTime(i); //toString() should not be necessary\n            }selector.appendChild(option);\n        }\n    }\n\n        //these are all not working, may need to use event delegation within the modules themselves\n\n    function modifyEndTimeDefaultValue(){\n        const startTimeSelectedValue = Number(this.value);\n        const endTimeValuesArray = Array.from(this.parentElement.nextElementSibling.lastElementChild.children);\n        endTimeValuesArray.forEach(function(time){\n            const endTimeValue = Number(time.value);\n            if(endTimeValue < startTimeSelectedValue + 30 || endTimeValue == \"default\"){\n                time.disabled = true;\n            }else{\n                time.disabled = false;\n            }\n        })\n    }\n\n    function disableDefaultOption(){ //these are all not working, may need to use event delegation within the modules themselves\n        const values = Array.from(this.children);\n        values[0].disabled = true;\n    }\n\n    return {runBuildSelector}\n\n})();\n\nexport{selectorBuilder}\n","import {events} from \"../src/events\"\n\nconst databasePost = (function(){\n\n    events.subscribe(\"userUpdateRequested\", updateUserData);\n    events.subscribe(\"newUserAdditionRequested\", addUserData);\n    events.subscribe(\"deleteUserRequested\", deleteUserData);\n    events.subscribe('adminBlockUpdateRequested', updateAdminBlockData);\n    events.subscribe('newAdminBlockAdditionRequested', addAdminBlockData)\n    events.subscribe('adminBlockDeleteRequested', deleteAdminBlockData);\n    events.subscribe('availabilityBlockUpdateRequested', updateUserBlockData);\n    events.subscribe('newAvailabilityBlockAdditionRequested', addUserBlockData)\n    events.subscribe('availabilityBlockDeleteRequested', deleteUserBlockData)\n   \n    // events.subscribe(\"adminAllTeamsDataUpdated\", changeAllTeamsData)\n    events.subscribe(\"adminFacilityDataUpdateRequested\", updateFacilityData)\n   \n    // events.subscribe(\"myTeamsDataUpdated\", changeMyTeamsData)\n    // events.subscribe(\"verifyUpToDateClicked\", changeVerificationData)//\n    // events.subscribe(\"pageChangeRequested\", alertAndLogCurrentObject);\n    // events.subscribe(\"userSeasonChangeRequested\", changeUserSeason); //\n    // events.subscribe(\"adminSeasonChangeRequested\", changeAdminSeason);;\n    \n    \n\n    function alertAndLogCurrentObject(databaseBoundObject){\n        console.log(databaseBoundObject)\n        alert(databaseBoundObject)\n    }\n\n    async function updateFacilityData(databaseBoundObject){ \n        try{\n            await fetch('adminHome/postAdminFacilitySettings.json', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n            events.publish(\"facilityDataSaved\")\n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n       \n    }\n\n    async function updateUserData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${_id}/update.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){ \n                events.publish(\"editUserDataSaved\")\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserData(databaseBoundObject){\n        try{\n            const userDataResponse = await fetch('adminHome/user/add.json', {\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userDataValidationFailed\", {errors, origin})\n            }else if(userDataResponse.status == 200){\n                const newUser = await userDataResponse.json();  \n                events.publish(\"newUserDataSaved\", newUser)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserData(userId){\n        const idObj = {_id: userId}\n        try{\n            const userDataResponse = await fetch(`adminHome/user/${userId}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(userDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(userDataResponse.status == 400){\n                const errors = await userDataResponse.json();\n                alert(errors);\n            }else if(userDataResponse.status == 200){\n                events.publish(\"userDataDeleted\", userId)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function updateAdminBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${_id}/update.json`, { //change the path\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                const origin = \"edit\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAdminBlockDataSaved\") //find receiver\n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addAdminBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('adminHome/timeBlock/add.json', {  //get rid of hard coded season as soon as possible\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"adminAvailabilityDataValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAdminBlockDataSaved\", newAdminBlock) //find listener\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteAdminBlockData(blockData){\n        const idObj = {_id: blockData._id}\n        try{\n            const blockDataResponse = await fetch(`adminHome/timeBlock/${blockData._id}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(idObj)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"adminBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    ///\n    async function updateUserBlockData(databaseBoundObject){\n        const {_id} = databaseBoundObject;\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${_id}/update.json`, { //change the path\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n               \n                const errors = await blockDataResponse.json();\n                console.log(errors)\n                const origin = \"edit\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){ \n                events.publish(\"editAvailabilityBlockDataSaved\") \n            }\n           \n        }catch(err){\n            console.log(err)\n        }//fix the id to be dynamic\n    }\n\n    async function addUserBlockData(databaseBoundObject){\n        try{\n            const blockDataResponse = await fetch('home/timeBlock/add.json', { \n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(databaseBoundObject)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json()\n                const origin = \"add\"\n                events.publish(\"userAvailabilityValidationFailed\", {errors, origin})\n            }else if(blockDataResponse.status == 200){\n                const newAdminBlock = await blockDataResponse.json(); \n                events.publish(\"newAvailabilityBlockDataSaved\", newAdminBlock)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    async function deleteUserBlockData(blockData){\n        try{\n            const blockDataResponse = await fetch(`home/timeBlock/${blockData._id}/delete.json`, { //change the hard-coded id's into userspecific id's SOON\n                method:'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n          \n                },\n                body: JSON.stringify(blockData)\n    \n            });\n\n            if(blockDataResponse.status == 404){ //expand on http statuses?\n                throw('404 error!')\n            }else if(blockDataResponse.status == 400){\n                const errors = await blockDataResponse.json();\n                alert(errors);\n            }else if(blockDataResponse.status == 200){\n                events.publish(\"availabilityBlockDataDeleted\", blockData)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    ///\n\n    function changeAllTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.allTeams - b.rank.allTeams\n        })\n        adminTestObj.allTeams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAllUsersArray(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.allUsers = databaseBoundObject;\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeAdminSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        adminTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", adminTestObj)\n    }\n\n    function changeUserSeason(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.season = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n\n    function changeVerificationData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.lastVerified = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeAvailabilityData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        userTestObj.availability = databaseBoundObject\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    function changeMyTeamsData(databaseBoundObject){\n        alertAndLogCurrentObject(databaseBoundObject)\n        const sortedTeams = databaseBoundObject.sort(function(a,b){\n            return a.rank.myTeams - b.rank.myTeams\n        })\n        userTestObj.teams = sortedTeams\n        events.publish(\"dataLoadedFromDatabase\", userTestObj)\n    }\n\n    let userTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:false,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n        [\n            {\n            name:\"basketballWomen\",\n            coach: \"Brindle\",\n            rank:\n                {\n                    myTeams: 0,\n                    allTeams:6\n                },\n            size: 15,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n            \n            {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:5\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n    \n            {\n            name: \"football\",\n            coach:\"Brindle\",\n            rank:\n                {\n                    myTeams: 2,\n                    allTeams:1\n                },\n            size: 110,\n            allOpts:\n                [\n                    [\n                        {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n    \n                    [\n                        {dayOfWeek:\"Wed\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                        {dayOfWeek:\"Sat\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                    ],\n                ]\n            },\n        ],\n        lastVerified: null,\n        adminPageSet:null,\n        season:\"fall\",\n        allTeams:\n            [\n                {\n                name: \"football\",\n                coach:\"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:1\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 2,\n                        allTeams:6\n                    },\n                size: 15,\n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:5\n                        },\n                    size: 25,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 4,\n                            allTeams:4\n                        },\n                    size: 50,\n                    allOpts:\n                    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n            ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:150\n        }\n    \n    }\n    \n    let adminTestObj = {\n        name: \"Brindle\",\n        privilegeLevel:true,\n        availability:{\n            Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n            Mon:[],\n            Tue:[],\n            Wed:[],\n            Thu:[],\n            Fri:[],\n            Sat:[]\n        },\n        teams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                \n                allOpts:\n                    \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n                \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            ],\n        lastVerified: null,\n        adminPageSet:\"admin\",\n        season:\"fall\",\n    \n        allTeams:\n            [\n                {\n                name:\"basketballWomen\",\n                coach: \"Brindle\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:0\n                    },\n                size: 15,\n                enabled: true,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n            \n                {\n                name:\"basketballMen\",\n                coach: \"Brindle\",\n                enabled: true,\n                rank:\n                    {\n                        myTeams: 1,\n                        allTeams:1\n                    },\n                size: 25,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name: \"football\",\n                coach:\"Rivera\",\n                enabled: false,\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:2\n                    },\n                size: 110,\n                allOpts:\n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                        ],\n                    ]\n                },\n    \n                {\n                name:\"sprintFootball\",\n                coach: \"Dolan\",\n                rank:\n                    {\n                        myTeams: 0,\n                        allTeams:3\n                    },\n                size: 50,\n                enabled: true,\n                allOpts:\n                \n                    [\n                        [\n                            {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                            {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                        ],\n                    ]\n            },\n        ],\n        facilitySelectors:{\n            facilityOpen:360,\n            facilityClose: 1200,\n            facilityMaxCapacity:120\n        },\n    \n        allUsers:\n        [\n            {\n            name: \"Brindle\",\n            color: \"#00ff00\",\n            privilegeLevel:true,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"basketballWomen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                        myTeams: 0,\n                        allTeams:0\n                        },\n                    size: 15,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 420, endTime:495, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n    \n                    {\n                    name:\"basketballMen\",\n                    coach: \"Brindle\",\n                    rank:\n                        {\n                            myTeams: 1,\n                            allTeams:1\n                        },\n                    size: 25,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 930, endTime:990, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 915, endTime:975, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 870, endTime:930, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:\"admin\",\n            season:\"fall\"\n            },\n    \n            {    \n            name: \"Rivera\",\n            color: \"#0000ff\",\n            privilegeLevel:false,\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name: \"football\",\n                    coach:\"Rivera\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:2\n                        },\n                    size: 110,\n                    allOpts:\n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Thu\", startTime: 870, endTime:915, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Fri\", startTime: 945, endTime:975, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\",\n            },\n    \n            {    \n            name: \"Dolan\",\n            privilegeLevel:false,\n            color: \"#ffa500\",\n            availability:{\n                Sun:[{startTime: \"420\", endTime: \"540\", admin: \"no\"}],\n                Mon:[],\n                Tue:[],\n                Wed:[],\n                Thu:[],\n                Fri:[],\n                Sat:[]\n            },\n            teams:\n                [\n                    {\n                    name:\"sprintFootball\",\n                    coach: \"Dolan\",\n                    rank:\n                        {\n                            myTeams: 0,\n                            allTeams:3\n                        },\n                    size: 50,\n                    allOpts:\n    \n                        [\n                            [\n                                {dayOfWeek:\"Tue\", startTime: 960, endTime:1020, inWeiss:\"yes\"},\n                                {dayOfWeek:\"Sat\", startTime: 540, endTime:600, inWeiss:\"yes\"},\n                            ],\n                        ]\n                    },\n                ],\n            lastVerified: null,\n            adminPageSet:null,\n            season:\"fall\"\n            }\n        ],\n    \n        adminTimeBlocks:\n            {\n            Sun:[],\n            Mon:[{startTime: \"420\", endTime: \"540\", admin: \"yes\"}],\n            Tue:[],\n            Wed:[],\n            Thu:[{startTime: \"780\", endTime: \"840\", admin: \"yes\"}],\n            Fri:[],\n            Sat:[]\n            }\n    }\n\n})();\n\nexport {databasePost}","\n\nconst events = {\n    events: {},\n    \n    subscribe: function(eventName, fn){\n        this.events[eventName] = this.events[eventName] || [];\n        this.events[eventName].push(fn);\n    },\n\n    unsubscribe: function (eventName, fn){\n        if(this.events[eventName]){\n            for(let i = 0; i< this.events[eventName].length; i++){\n                if(this.events[eventName][i] === fn){\n                    this.events[eventName].splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    publish: function (eventName, data){\n        if(this.events[eventName]){\n            this.events[eventName].forEach(function(fn){\n                fn(data);\n            })\n        }\n    }\n}\n\n\n\nexport {events}","import { events } from \"../../../../src/events\";\nimport { selectorBuilder } from \"../../../../src/DOMBuilders/selectorDOMBuilder\"\nimport { timeValueConverter } from \"../../../../src/timeConverter\";\n\n\nconst availabilityTimeBlockDataFormComponent = (function(){\n\n    events.subscribe('availabilityBlockAddRequested', renderTimeBlockDataForm);\n    events.subscribe('availabilityBlockDataLoaded', renderTimeBlockDataForm);\n    events.subscribe('availabilityDataChangesCancelled', unrenderTimeBlockDataForm);\n    events.subscribe(\"renderAvailabilityBlockValidationErrors\", renderAvailabilityBlockDataValidationErrors)\n    events.subscribe(\"editAvailabilityBlockDataSaved\", unrenderTimeBlockDataForm);\n    events.subscribe('newAvailabilityBlockDataSaved', unrenderTimeBlockDataForm)\n\n\n\n    const formDivWrapper = document.querySelector(\"#entryFormDiv\")\n    const formDiv = document.querySelector(\"#entryForm\");\n    \n\n    function renderTimeBlockDataForm(timeBlockDayData){\n        \n    \n        const elements = setElements();\n        populateContent(elements, timeBlockDayData);\n        setEventListeners(elements, timeBlockDayData);\n    \n        formDiv.appendChild(elements.content);\n\n        const selectors = formDiv.querySelectorAll('.selector');\n        const saveButton = formDiv.querySelector('#availabilityDayTimeBlockFormSaveButton')\n        if(Array.from(selectors).filter(function(selector){\n            return selector[selector.selectedIndex].value == \"default\"\n        }).length > 0){\n            saveButton.disabled = true;\n        }\n        formDivWrapper.classList.toggle(\"formHidden\");\n    } \n\n    function unrenderTimeBlockDataForm(){\n        if(formDiv.firstChild){\n            while(formDiv.firstChild){\n                formDiv.removeChild(formDiv.firstChild)\n            }\n        }\n\n        formDivWrapper.classList.toggle(\"formHidden\");\n    }\n    \n    \n    function setElements(){\n        const template = document.querySelector(\"#availabilityDayTimeBlockFormTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const dayLabel = content.querySelector('h3');\n        const timeBlockSelectors = content.querySelectorAll(\".selector\");  \n        const startDiv = content.querySelector(\"#availabilityDayTimeBlockSelectorsStart\")\n        const endDiv =   content.querySelector(\"#availabilityDayTimeBlockSelectorsEnd\")              \n        const saveButton = content.querySelector(\"#availabilityDayTimeBlockFormSaveButton\");\n        const cancelButton = content.querySelector(\"#availabilityDayTimeBlockFormCancelButton\");\n    \n        return {content, dayLabel, timeBlockSelectors, saveButton, cancelButton, startDiv, endDiv}\n    }\n    \n    function populateContent(selectorElements, timeBlockData){\n\n        selectorElements.dayLabel.innerText = `Day: ${timeBlockData.timeBlock.day}`;\n\n        selectorElements.timeBlockSelectors.forEach(function(selector){\n            const primaryClass = Array.from(selector.classList)[0];\n    \n            const selectorNew = selectorBuilder.runBuildSelector(primaryClass);\n            let selectedOption\n            \n            if(selectorNew.querySelector(`option[value = \"${timeBlockData.timeBlock.availability[primaryClass]}\"]`) != null){\n                selectedOption = selectorNew.querySelector(`option[value = \"${timeBlockData.timeBlock.availability[primaryClass]}\"]`)\n            }else{\n                selectedOption = selectorNew.querySelector(\"option[value = 'default']\");\n                const errorText = createErrorText(timeBlockData.timeBlock.availability, primaryClass);\n                if(primaryClass == \"startTime\"){\n                    selectorElements.startDiv.appendChild(errorText)\n                }else{\n                    selectorElements.endDiv.appendChild(errorText)\n                }\n            }\n            \n            selectedOption.selected = true;\n            if(selectedOption.value != \"default\"){\n                selectorNew.firstChild.disabled = true;\n            }\n    \n            selectorNew.addEventListener(\"change\", publishSelectionValueChange);\n            \n            function publishSelectionValueChange(){\n                const modifiedSelector = primaryClass\n                const value = selectorNew.value;\n                events.publish(\"modifyAvailabilitySelectorValues\", {modifiedSelector, value})\n\n                const selectors = formDiv.querySelectorAll('.selector');\n                const saveButton = formDiv.querySelector('#availabilityDayTimeBlockFormSaveButton')\n                if(Array.from(selectors).filter(function(selector){\n                    return selector[selector.selectedIndex].value == \"default\"\n                }).length == 0){\n                    saveButton.disabled = false;\n                }\n            }\n    \n            selector.replaceWith(selectorNew)\n        })\n    }\n    \n    function setEventListeners(selectorElements, timeBlockData){\n    \n        selectorElements.saveButton.addEventListener(\"click\", updateTimeBlockData);\n        selectorElements.cancelButton.addEventListener(\"click\", cancelTimeBlockChanges);\n    \n        function updateTimeBlockData(){\n            events.publish(\"updateAvailabilityClicked\", timeBlockData.origin);\n        }\n        function cancelTimeBlockChanges(){\n            events.publish(\"cancelAvailabilityBlockChangesClicked\")\n        }\n    }\n    \n    function createErrorText(data, selector){\n        const errorText = document.createElement(\"p\");\n        errorText.innerText = `Your selected value of ${timeValueConverter.runConvertTotalMinutesToTime(data[selector])} for ${selector} has been invalidated by a change to the opening/closing times for the facility. Speak with your supervisor to address this or change this value.`;\n        return errorText;\n    }\n\n    function renderAvailabilityBlockDataValidationErrors(blockData){\n        \n        unrenderTimeBlockDataForm();\n        renderTimeBlockDataForm(blockData);\n        \n        const errorList = document.querySelector(\"#availabilityDayTimeBlockGeneralErrorList\");\n\n        if(errorList.firstChild){\n            while(errorList.firstChild){\n                errorList.removeChild(errorList.firstChild)\n            }\n        }\n\n        blockData.errors.forEach(function(error){\n            const bullet = document.createElement(\"li\");\n            bullet.innerText = error;\n            errorList.appendChild(bullet);\n        })\n    }\n\n})()\n\n\n\nexport {availabilityTimeBlockDataFormComponent}","import {events} from \"../../../src/events\"\n\nconst homeRender = (function(){\n\n    events.subscribe(\"userDataSet\", setHomeEventListeners);\n\n    function setHomeEventListeners(){\n        setAvailabilityEventListeners();\n    }\n\n    function setAvailabilityEventListeners(){\n        const availabilityTimeBlockDays = Array.from(document.querySelector(\"#userPageAddAvailabilityBlockGrid\").children);\n    \n        availabilityTimeBlockDays.forEach(function(day){\n            const dayString = day.querySelector(\"h3\").innerText;\n            const addBlockButton = day.querySelector(\".userPageAddAvailabilityBlockAddButton\");\n    \n            addBlockButton.addEventListener(\"click\", addTimeBlock);\n    \n            const dayAllBlocks = Array.from(day.querySelectorAll(\".userPageAddAvailabilityAllBlocks > div\"));\n            if(dayAllBlocks.length > 0 ){\n                dayAllBlocks.forEach(function(timeBlock){\n                    const _id = timeBlock.dataset.timeblockid\n                    const editBlockButton = timeBlock.querySelector(\".userPageAddAvailabilityBlockEditButton\");\n                    const deleteBlockButton = timeBlock.querySelector(\".userPageAddAvailabilityBlockDeleteButton\")\n    \n                    if(editBlockButton != null){\n                        editBlockButton.addEventListener(\"click\", editTimeBlock);\n                        deleteBlockButton.addEventListener(\"click\", deleteTimeBlock);\n                    }\n                    \n    \n                    function editTimeBlock(){\n                        events.publish(\"editAvailabilityClicked\", {day:dayString, _id})\n                    }\n    \n                    function deleteTimeBlock(){\n                        const confirmation = confirm(\"Delete this time block?\");\n                        if(confirmation){\n                            events.publish(\"deleteAvailabilityClicked\", {day:dayString, _id})\n                        }\n                    }\n                })\n            }\n    \n            function addTimeBlock(){\n                events.publish(\"addAvailabilityTimeBlockClicked\", dayString)\n            }\n        })\n    }\n\n})()\n\nexport {homeRender}\n","import { events } from \"../../../events\";\nimport {timeValueConverter} from \"../../../timeConverter\";\n\nconst availabilityTimeBlockDataGridComponent = (function(){\n\n    events.subscribe(\"renderUpdatedAvailabilityBlockData\", renderAdminTimeBlockDay)\n\n    function renderAdminTimeBlockDay(adminTimeBlockDayData){\n        const {day, blocks} = adminTimeBlockDayData\n    \n        const availabilityBlocksDiv = document.querySelector(\"#userPageAddAvailabilityBlockGrid\");\n        const dayDiv = Array.from(availabilityBlocksDiv.querySelectorAll(\"div\")).find(function(div){\n            return div.firstElementChild.innerText == day;\n        });\n        const dayAllBlocksDiv = dayDiv.querySelector(\".userPageAddAvailabilityAllBlocks\");\n        const dayAllBlocksDivNew = document.createElement(\"div\");\n        dayAllBlocksDivNew.classList.add(\"userPageAddAvailabilityAllBlocks\")\n    \n        if(blocks.length > 0){\n            blocks.forEach(function(timeBlockData){\n                const row = buildBlockRow(day, timeBlockData);\n                dayAllBlocksDivNew.appendChild(row)\n            })\n        }else{\n            const defaultText = document.createElement('p');\n            defaultText.innerText = \"No timeblocks\";\n            dayAllBlocksDivNew.appendChild(defaultText);\n        }\n        \n    \n        dayAllBlocksDiv.replaceWith(dayAllBlocksDivNew);\n    }\n     \n    function buildBlockRow(day, blockData){ \n        const {_id} = blockData\n        const elements = setTemplateElements()\n        setElementsContent(elements, blockData);\n        setEventListeners(elements, {day, _id});\n        \n        return elements.content \n    }\n    \n    function setTemplateElements(){\n        const template = document.querySelector(\"#userPageAddAvailabilityBlockTemplate\");\n        const content = document.importNode(template.content, true);\n    \n        const user = content.querySelector(\".userPageAddAvailabilityBlock\");\n        const startTimeText = content.querySelector(\".userPageAddAvailabilityBlockStart > p\")\n        const endTimeText = content.querySelector(\".userPageAddAvailabilityBlockEnd > p\")\n        \n        const editButton = content.querySelector(\".userPageAddAvailabilityBlockEditButton\");\n        const deleteButton = content.querySelector(\".userPageAddAvailabilityBlockDeleteButton\");\n        \n        return {user, content, startTimeText, endTimeText, editButton, deleteButton}\n    }\n    \n    function setElementsContent(blockElement, blockData){\n        blockElement.user.setAttribute(\"dataTimeBlockId\", blockData._id)\n        if(isNaN(Number(blockData.availability.startTime)) == false){\n            blockElement.startTimeText.innerText += timeValueConverter.runConvertTotalMinutesToTime(blockData.availability.startTime);\n        }else{\n            blockElement.startTimeText.innerText = blockData.availability.startTime;\n        }\n        if(isNaN(Number(blockData.availability.endTime)) == false){\n            blockElement.endTimeText.innerText += timeValueConverter.runConvertTotalMinutesToTime(blockData.availability.endTime);\n        }else{\n            blockElement.endTimeText.innerText =blockData.availability.endTime;\n        }\n    \n        if(blockData.admin == true){\n            blockElement.editButton.remove()\n            blockElement.deleteButton.remove()\n        }\n        \n    }\n    \n    function setEventListeners(timeBlockElement, timeBlockData){\n        timeBlockElement.editButton.addEventListener(\"click\", editAdminTimeBlock);\n        timeBlockElement.deleteButton.addEventListener(\"click\", deleteAdminTimeBlock);\n    \n        function editAdminTimeBlock(){\n            events.publish(\"editAvailabilityClicked\", timeBlockData)\n        }\n        function deleteAdminTimeBlock(){\n            const confirmation = confirm(\"Delete this time block?\");\n            if(confirmation){\n                events.publish(\"deleteAvailabilityClicked\", timeBlockData)\n            }\n            \n        }\n    }\n\n})()\n\nexport {availabilityTimeBlockDataGridComponent}","import {events} from \"../../../src/events\"\nimport { timeValueConverter } from \"../../timeConverter\";\n\nconst allAvailabilityDataModel = (function(){\n    \n    let allAvailabilityDataStable = {};\n    let allAvailabilityDataMutable = {};\n    \n    events.subscribe(\"userDataFetched\", setDataNewPageRender);\n    events.subscribe(\"updateAllAvailabilityBlocksModel\", setDataNewDatabasePost)\n    events.subscribe(\"editAvailabilityClicked\", editAvailabilityBlock)\n    events.subscribe(\"deleteAvailabilityClicked\", deleteAvailabilityBlock);\n    events.subscribe('availabilityBlockDataDeleted', setDataBlockDataDeleted)\n\n    function setDataNewPageRender(userData){\n        allAvailabilityDataStable = userData.availabilityTimeBlocks;\n        createAvailabilityDeepCopy(allAvailabilityDataMutable, allAvailabilityDataStable);\n    }\n\n    function createAvailabilityDeepCopy(newObj, copyObj){\n        for(let prop in newObj){\n            delete newObj[prop]\n        }\n\n        for(let day in copyObj){\n            newObj[day] = [];\n            copyObj[day].forEach(function(timeBlock){ //edit\n                const {admin, day, season, _id, coach} = timeBlock\n                const timeBlockCopy = Object.assign({}, {admin, day, season, _id, coach});\n                timeBlockCopy.availability = Object.assign({}, timeBlock.availability)\n                newObj[day].push(timeBlockCopy);\n                \n\n            });\n        }\n    }\n\n    function editAvailabilityBlock(timeBlockObj){\n        const {day, _id} = timeBlockObj;\n        const block = allAvailabilityDataMutable[day].filter(function(timeBlock){\n            return timeBlock._id == _id;\n        })[0]\n\n        events.publish(\"availabilityBlockEditRequested\", block); //add publish that sends to form, need _id/day?\n    }\n\n    function deleteAvailabilityBlock(timeBlockObj){\n        events.publish(\"availabilityBlockDeleteRequested\", timeBlockObj); //send this to database, change to deleteRequested?\n    }\n\n    function setDataNewDatabasePost(blockData){\n\t\tconst thisBlockIndex = allAvailabilityDataMutable[blockData.day].findIndex(function(block){\n\t\t\treturn block._id == blockData._id\n\t\t});\n\t\tif(thisBlockIndex != -1){\n\t\t\tallAvailabilityDataMutable[blockData.day][thisBlockIndex] = blockData\n\t\t}else{\n\t\t\tallAvailabilityDataMutable[blockData.day].push(blockData);\n\t\t}\n\t\t\n        createAvailabilityDeepCopy(allAvailabilityDataStable, allAvailabilityDataMutable);\n\t\tevents.publish(\"renderUpdatedAvailabilityBlockData\", {day: blockData.day, blocks: allAvailabilityDataMutable[blockData.day]})\n    }\n\n    function setDataBlockDataDeleted(blockData){\n        const {day, _id} = blockData\n\t\tconst newBlocksList = allAvailabilityDataMutable[day].filter(function(block){\n\t\t\treturn _id != block._id\n\t\t})\n\n\t\tallAvailabilityDataMutable[day] = newBlocksList;\n\t\tcreateAvailabilityDeepCopy(allAvailabilityDataStable, allAvailabilityDataMutable);\n\t\tevents.publish(\"renderUpdatedAvailabilityBlockData\", {day, blocks: allAvailabilityDataMutable[day]})\n\t}\n\n})()\n\nexport {allAvailabilityDataModel}","import {events} from \"../../../src/events\"\n\nconst availabilityData = (function(){\n    \n    let availabilityModelStable;\n    let availabilityModelMutable;\n\n    const timeBlockDefault = {\n        admin:false,\n        season:null,\n        day:null,\n        availability:{startTime: \"default\", endTime: \"default\"}\n    };\n\n    events.subscribe('userDataFetched', setSeason)\n    events.subscribe(\"addAvailabilityTimeBlockClicked\", addAvailabilityBlock);\n    events.subscribe(\"modifyAvailabilitySelectorValues\", modifyAvailabilityValue);\n    events.subscribe('availabilityBlockEditRequested', setAvailabilityDataEditRequest)\n    events.subscribe('cancelAvailabilityBlockChangesClicked', setAvailabilityDataCancelRequest)\n    events.subscribe(\"updateAvailabilityClicked\", validateChanges);\n    events.subscribe(\"userAvailabilityDataValidated\", updateAvailabilityData)\n    events.subscribe(\"userAvailabilityValidationFailed\", renderBlockValidationErrors);\n    events.subscribe(\"editAvailabilityBlockDataSaved\", publishBlockUpdatesToAllBlocks);\n    events.subscribe(\"newAvailabilityBlockDataSaved\", addBlockDataToAllBlocks);\n\n    function setSeason(userData){\n        timeBlockDefault.season = userData.season\n    } \n\n    function setAvailabilityDataEditRequest(timeBlock){\n        availabilityModelStable =  timeBlock;\n        availabilityModelMutable = Object.assign({}, availabilityModelStable)\n        availabilityModelMutable.availability = Object.assign({}, availabilityModelStable.availability)\n\n        events.publish(\"availabilityBlockDataLoaded\", {timeBlock: availabilityModelMutable, origin:\"edit\"})\n    }\n\n    function setAvailabilityDataCancelRequest(){\n        availabilityModelStable = {};\n\n        events.publish(\"availabilityDataChangesCancelled\") \n    }\n\n    function addAvailabilityBlock(day){\n        availabilityModelStable = Object.assign({}, timeBlockDefault);\n        availabilityModelStable.day = day;\n\n        availabilityModelMutable = Object.assign({}, availabilityModelStable);\n        availabilityModelMutable.availability = Object.assign({}, availabilityModelStable.availability)\n\n        events.publish(\"availabilityBlockAddRequested\", {timeBlock: availabilityModelMutable, origin: \"add\"});\n    }\n\n    function modifyAvailabilityValue(timeBlockObj){ //make sure this is sent this way\n        const {modifiedSelector, value} = timeBlockObj\n        availabilityModelMutable.availability[modifiedSelector] = value\n    }\n\n    function validateChanges(origin){\n        events.publish(\"availabilityValidationRequested\", {timeBlock: availabilityModelMutable, origin})\n    }\n\n    function updateAvailabilityData(validatedBlockData){\n        if(validatedBlockData.origin == \"edit\"){\n\t\t\tevents.publish(\"availabilityBlockUpdateRequested\", validatedBlockData.timeBlock) \n\t\t}else{\n\t\t\tevents.publish(\"newAvailabilityBlockAdditionRequested\", validatedBlockData.timeBlock)\n\t\t}\n    }\n\n    function renderBlockValidationErrors(validationErrorData){\n        const {errors, origin} = validationErrorData\n        events.publish(\"renderAvailabilityBlockValidationErrors\", {timeBlock: availabilityModelMutable, errors, origin})\n    }\n\n    function publishBlockUpdatesToAllBlocks(){\n        events.publish(\"updateAllAvailabilityBlocksModel\", availabilityModelMutable)\n    }\n\n    function addBlockDataToAllBlocks(_id){\n        availabilityModelMutable._id = _id;\n        events.publish(\"updateAllAvailabilityBlocksModel\", availabilityModelMutable);\n    }\n\n})()\n\nexport {availabilityData}","//purpose: convert totalMinutes into clockTime, and clockTime into totalMinutes\n\nconst timeValueConverter = (function(){\n    //no obvious issues here\n    function convertTotalMinutesToTime(totalMins){\n        let standardTime;\n        let hour = Math.floor(totalMins/60)\n        let meridian\n            switch(hour){\n                case 0:\n                    hour += 12\n                    meridian = \"a\"\n                    break;\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                    meridian = \"a\"\n                    break;\n                case 12:\n                    meridian = \"p\"\n                    break;\n                default:\n                    hour -=12\n                    meridian = \"p\"\n                    break;\n            }\n            \n        let mins = totalMins%60\n            if(mins == 0){\n                mins = \"00\"\n            }\n        standardTime = `${hour}:${mins}${meridian}`\n        return standardTime\n    }\n\n    function runConvertTotalMinutesToTime(totalMins){\n        return convertTotalMinutesToTime(totalMins)\n    }\n\n    function convertTimeToTotalMinutes(time){\n        const colonIndex = time.indexOf(\":\");\n        const meridian = time[time.length-1]\n        const meridianIndex = time.indexOf(meridian);\n        \n        let hour = Number(time.slice(0, colonIndex));\n            if(meridian == \"p\" && hour != 12){\n                hour +=12;\n            }else if(meridian == \"a\" && hour == 12){\n                hour -=12;\n            }\n        const min = Number(time.slice(colonIndex + 1, meridianIndex));\n        const totalMinutes = hour*60 + min;\n\n        return totalMinutes\n    }\n\n    function runConvertTimeToTotalMinutes(time){\n        return convertTimeToTotalMinutes(time)\n    }\n\n    return {runConvertTimeToTotalMinutes, runConvertTotalMinutesToTime}\n\n})();\n\nexport{timeValueConverter}","import { events } from \"../events\";\n\nconst availabilityValidator = (function(){\n  \n    events.subscribe(\"adminBlockDataValidationRequested\", validateAllAdminAvailability);\n    events.subscribe(\"availabilityValidationRequested\", validateAllUserAvailability);\n    \n    function validateAllAdminAvailability(timeBlockData){\n        const {timeBlock, origin} = timeBlockData\n        const errorArray = []\n        validateAllInputs(timeBlock, errorArray)\n        \n        \n        if(errorArray.length == 0){\n            events.publish(\"adminAvailabilityDataValidated\", timeBlockData)\n        }else{\n            events.publish(\"adminAvailabilityDataValidationFailed\", {errors: errorArray, origin})\n        }\n    }\n    \n    function validateAllUserAvailability(timeBlockData){\n        const {timeBlock, origin} = timeBlockData\n        const errorArray = []\n        validateAllInputs(timeBlock, errorArray)\n\n        if(errorArray.length == 0){\n            events.publish(\"userAvailabilityDataValidated\",timeBlockData);\n        }else{\n            events.publish(\"userAvailabilityValidationFailed\", {errors: errorArray, origin})\n        }\n    }\n    \n    function validateAllInputs(timeBlock, array){\n        try{\n            for(let prop in timeBlock.availability){\n                if(timeBlock.availability[prop] == \"default\"){\n                    throw(`Value for ${prop} cannot be default`);\n                }\n            }\n\n            if(timeBlock.availability.startTime >= timeBlock.availability.endTime){\n                throw('Start time overlaps with end time!')\n            }\n        }catch(err){\n            array.push(err)\n        }\n    }\n})()\n\nexport {availabilityValidator}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {events} from \"../src/events\"\nimport {homeRender} from \"../src/homePage/components/homePageRender\"\n\nimport {availabilityTimeBlockDataFormComponent} from \"../src/homePage/components/forms/availabilityBlockForm\"\nimport {availabilityTimeBlockDataGridComponent} from \"../src/homePage/components/mainModuleRenders/availabilityBlocksGrid\"\nimport {availabilityValidator} from \"../src/validators/availabilityValidator\"\nimport {allAvailabilityDataModel} from \"../src/homePage/models/allAvailabilityData\"\nimport {availabilityData} from \"../src/homePage/models/availabilityData\"\n\nimport {databasePost} from \"../src/databasePost\"\n\nwindow.onload = setScriptData;\n\nasync function setScriptData(){\n    try{\n        const userPageJSON = await fetch('home/userData.json');\n        const userPageData = await userPageJSON.json();\n        console.log(userPageData);\n        events.publish(\"userDataFetched\", userPageData);\n        events.publish(\"userDataSet\");\n        \n    }catch(err){\n        console.log(err)\n    }\n}"],"names":[],"sourceRoot":""}